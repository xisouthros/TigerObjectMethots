UnityApplication
UnityApplication; LogoObjects kütüphanesinin ana nesnesidir.
İlk bu nesne oluşturulmalıdır. Diğer nesneler UnityApplication'dan türer.
Veritabanı üzerindeki
•	connect
•	disconnect
gibi operasyonlar bu nesnenin metodlarıyla yapılır.
UnityApplication'in alt nesneleri özellik (property) olarak tanımlanmıştır.
Aşağıdaki tablolarda UnityApplication metod ve özellikleri listelenmiştir.
 
Connect
Methods	Return Type	Açıklama
LGSetup
Yok	Registery ve LGold.ini dosyası dışında bir path vererek LogoObjects.dll dosyasının bu sete bağlantı kurmasını sağlamak için kullanılır.
Connect
Boolean	İlgili LBS programına mesela Unity’e Connect olur.
Disconnect
Yok	Connect, UserLogin veya CompanyLogin metodlarıyla kurulan tüm bağlantıları kapatır.
UserLogin
Boolean	Çalışacak olan kullanıcı programa giriş yapar.
UserLogout
Yok	Kullanıcı bağlantısını kapatır.
CompanyLogin
Boolean	Çalışılacak olan firmaya açılır.
CompanyLogout
Yok	Firma çalışmaya kapatılır.
Login
Boolean	UserLogin ve CompanyLogin metodlarının birleşimidir. Aynı anda Hem kullanıcı hemde firmaya Login olunur.
ApplyAvaragePayment
Yok	Unity içerisinden Faturalar-F9-Ödeme Hareketleri-Ortalama Vade uygula işlemini yapan UO metodudur.
UpgradeFirmTable	Boolean	Firma üzerinde Tabloları sürüme göre güncelleme işlemi yapar.
GenerateDocNumber
Yok	Firma Dönemi üzerinde Standart Numaralama Şablonlarını oluşturur.
DebtClose
Boolean	Program tarafında yapılan borç kapatma işlemi yapmak için eklenmiş bir fonksiyondur.
DispatchBilling
Boolean	İrsaliyeleri faturalaştırmak için kullanılır.
PackDate
Yok	Tarih bilgisinin LBS formatındaki Long Integer değerini verir.
UPackDate
Yok	LBS formatındaki Long Integer değeri verilen Tarih bilgisinin gün , ay ve yıl bilgilerini döner.
PackTime
Yok	Saat bilgisinin Long Integer değerini verir.
UPackTime
Yok	Long Integer değeri verilen saat bilgisinin saat, dakika ve saniye bilgilerini döner.
GetApprovalDate
Date	Ticari Sistem Yonetimi --> Islemler altindan yapilan onaylama tarihlerini modul bazinda get eder.
SetApprovalDate
Boolean	Ticari Sistem Yonetimi --> Islemler altindan yapilan onaylama tarihlerini modul bazinda set eder.
SetDistOrderStatus
Yok	Dağıtım Emirlerinin Statüsü bilgisini değiştiren metotdur.
GetLastError
Long	Herhangi bir işlemden kaynaklanan son hata numarasını döner.
GetLastErrorString
String	Herhangi bir işlemden kaynaklanan son hata mesajını döner.
GetLastTableErr
Long	CustTables methoduyla oluşturulan IQTableProxy kütüphanesinin methodlarını kullanarak LOD tablolarında işlem yaparken oluşan hataları döndüren bir methoddur.
GetCurrID
Yok	Döviz ismini verdiğiniz döviz türünün ID numarasını döner.
GetCurrName
Boolean	Döviz ID numarasını verdiğiniz döviz türünün adını ve sembol bilgisini döner.
GetDBConnInfo
Yok	UConfig içerisinde tanımlanmış bilgilerini döner.
GetAuthCode
Boolean	Yetki kodu kontrolü yapmak için kullanılır. Belirtilen kriterlere uygun tanımlanmış yetki kodu varsa TRUE, böyle bir yetki kodu tanımı bulunamazsa FALSE döner.
Version
String	Logo Objects Kütüpanesinin Versiyon bilgisini döner.
CustTables
IQTableProxy	LOD tabloları ile LVSL gibi çalışmak için eklenmiş kütüphanedir. SEQ tablolarıyla uğraşmak zorunda kalmadan çalışmanızı sağlar.
NewProductionApplication
ProductionApplication	Programdaki üretim emirleri ile ilgili yapılacabilecek işlemlerin toplandığı nesnedir.
NewQuery
IQuery	Sorgulama nesnesi oluşturur.
NewDataObject
IData	Veri nesnesi oluşturur.
NewRightsObject
IRights	Yetkilere ulaşmak için IRights nesnesi oluşturur.
NewAuthCodesObject
IAuthCodes	Yetki kodlarına ulaşmak için IAuthCodes nesnesi oluşturur.
NewCustomDataObject
IData	Kendi Data nesnemizi yaratmamıza yarar fakat kullanım alanı yoktur. Logo Objects bu metodu kendi içinde Data nesnelerini oluşturmak için kullanır.
Data Properties	Return Type	Açıklama
ForWebUse	Boolean	Sistem registerisine erişimin olmadığı durumlarda kullanılan bir yöntemdir. ForWebUse özelliğinin default değeri FALSE değeridir. Bu kullanımların farkı ForWebUse özelliğinin değeri FALSE ise bağlantı bilgilerini Local Registery'den okurken, TRUE olarak set edildiğinde İşletim Sistemi Kataloğu içindeki LGold.Ini dosyasından okunmaktadır. ASP.NET uygulamalarında tavsiye edilmez.
Connected	Boolean	Hali hazırdaki Connect durumunu bildirir.
LoggedIn	Boolean	Hali hazırdaki Login durumunu döner.
CompanyLoggedln	Boolean	Hali hazırdaki Firma Login durumunu döner.
CurrentFirm	Long	Login olunmuş Firma numarası döner.
ActivePeriod	Long	Firmanın Çalışma Dönemi gösterir.
SerialNo	String	Ürün seri numarası.
UserCount	int	Ürünün kullanıcı sayısı gösterir.
Collections Properties
Return Type	Açıklama
CAPI	ICAPI	CAPI bilgilerine ulaşmak için ICAPI nesnesidir.
Tables	ITables	LBS Unity tablolarına ulaşmak için ITables nesnesidir.
TradeGroups	ITradeGroups	Ticari işlem gruplarına ulaşmak için ITradeGroups nesnesidir.
FirmParameters
IFirmParameters	Firma Paremetrelerine ulaşılır.
 
 
CreateObject / CreateOLEObject
Dim UnityApp As Variant
Set UnityApp = CreateObject("UnityObjects.UnityApplication") 
If NOT IsEmpty(UnityApp) 
   Then 
      UnityApp = Empty
   Else
 
End If




Properties
IUnityApplication Properties Değişkenleri


Properties	Return Type	Member Of	Kullanımı	Açıklama
ForWebUse
	Boolean	UnityObjects.IUnityApplication 	Connection bilgilerinin LGold.Ini dosyasından mı yoksa Local Registery kayıtlarından mı okuyacağını belirten özelliktir.	ASP.NET uygulamalarında tavsiye edilmez.
Connected 	Boolean	UnityObjects.IUnityApplication	Connect işleminin başarıyla gerçekleşme durumunu döner.	Connect metodu başarıyla LBS Unity’e connect olursa TRUE, diğer durumlarda FALSE değeri döner. Read-only (sadece okunabilir) bir özelliktir. 
Bu özelliği LBS Unity’e connect olmak için TRUE, disconnect olmak için FALSE şeklinde set ederiz.
LoggedIn 	Boolean	UnityObjects.IUnityApplication 	UserLogin işleminin başarıyla gerçekleşme durumunu döner.	UserLogin metodu başarıyla LBS Unity’e login olursa TRUE, diğer durumlarda FALSE döner. Read-only (sadece okunabilir) bir özelliktir.
CompanyLoggedIn	Boolean	UnityObjects.IUnityApplication	CompanyLogin işleminin başarıyla gerçekleşme durumunu döner.	CompanyLogin metodu başarıyla ilgili firmaya login olursa TRUE, diğer durumlarda FALSE değeri döner. Read-only (sadece okunabilir) bir özelliktir.
CurrentFirm	Long 	UnityObjects.IUnityApplication	Aktif olan firmanın numarasını döner.	CompanyLogin metoduyla Login olunmuş firmanın numarasını döner. Read-only (sadece okunabilir) bir özelliktir.
ActivePeriod 	Long	UnityObjects.IUnityApplication 	Aktif Dönem numarası döner.	Login olunmuş firmanın aktif dönem numarası döner. Firmalarda Çalışma dönemi olarak işaretlenmiş dönemler firmaya login olma işleminde açılır. Sadece çalışma dönemi olarak işaretlenmiş dönemlerde işlem yapılır. Read-only (sadece okunabilir) bir özelliktir.

 
C# örneği
public static void Connected()

{
    bool ok = UnityApp.Connected;
    MessageBox.Show(ok.ToString());
}
public static void LoggedIn()
{
    bool ok = UnityApp.LoggedIn;
    MessageBox.Show(ok.ToString());
}
public static void CompanyLoggedIn()
{
    bool ok = UnityApp.CompanyLoggedIn;
    MessageBox.Show(ok.ToString());
}
public static void CurrentFirm()
{
    String FirmNr = UnityApp.CurrentFirm.ToString();
    MessageBox.Show(FirmNr);
}
public static void ActivePeriod()
{
    String Period = UnityApp.ActivePeriod.ToString();
    MessageBox.Show(Period);
}

Collection Properties
 
IUnityApplication Collection Properties Değişkenleri


Property	Return Type	Members Of	Kullanımı	Açıklama
CAPI 	ICAPI	UnityObjects.IUnityApplication	CAPI bilgileriyle çalışabilmek için ICAPI nesnesi oluşturulur.	 LBS Unity’de bazı bilgiler özellikli olarak güvenlik açısından ayrı biçimde saklanır. Bu bilgiler veri tabanından okunamaz. Sayısal olarak tutulurlar ve okunduğunda okuyan kişi açısından birşey ifade etmezler. Bu firmalara daha güvenilir bir ortamda çalışmayı sağlar. Önemli bilgiler istenmeyen kişilerin eline geçemez. Unity Objects ile bu bilgiler üzerinde işlem yapılması için ICAPI nesnesi kullanılır. ICAPI nesnesini oluşturarak Kullanıcılar, Firmalar, Firmaların Dönemleri, Bölümleri, İş yerleri, Fabrikaları, Fabrika bölümleri, Ambarları, Terminaller üzerinde işlemler yapabiliriz. Tanımlara erişebilir düzeltebilir, silebiliriz. Özelliklerini değiştirebiliriz. Bu işlemleri ICAPI nesnesinden türeteceğimiz. IFirms, IPeriods,  IWareHouses, IDepartments , IDivisions , IFactories, IFactoryDivisions, IUsers nesneleri ile ulaşırız.
Tables 	ITables	UnityObjects.IUnityApplication	LBS Unity Tablolarında çalışmak için ITables nesnesi oluşturulur.	ITables nesnesi ile tüm tablolar üzerinde işlemlerimizi yapabiliriz. İşlemlerimizi kolaylaştıracak bir çok faydalı metot ve özellik vardır. IUnityApplication nesnesinin tüm tablolarını içeren collection tipinde bir nesnedir. Bu nesnenin tüm elemanları ITable tipindedir. Unity Objects Kütüphanesindeki tüm diğer collection tipindeki nesneler gibi count ve item özelliklerine sahiptir.
TradeGroups 	ITradeGroups	UnityObjects.IUnityApplication	Ticari işlem gruplarında işlem yapmak için ITradeGroups nesnesi oluşturulur.	 ITradeGroups nesnesi ile ticari işlem grupları üzerinde çalışabiliriz. İşlemlerimizi kolaylaştıracak bir çok faydalı metot ve özellik vardır. Tüm ticari işlem gruplarını içeren collection tipinde bir nesnedir. Bu nesnenin tüm elemanları ITradeGroup tipindedir. Unity Objects Kütüphanesindeki tüm diğer collection tipindeki nesneler gibi count ve item özelliklerine sahiptir. 
Attributes Types
Index      Açıklama
   0       Hiç biri seçili değil 
   1       KDV Uygulanmayacak
   2       AB KDV Mevzuatı Uygulanacak 
   3       KDV uygulanmayacak, AB KDV mevzuatı uygulanacak. 
   4       Ek Vergi (ÖTV) Uygulanmayacak 
   5       KDV ve ÖTV uygulanmayacak 
   6       ÖTV uygulanmayacak, AB KDV mevzuatı uygulanacak
   7       Hepsi seçili 
FirmParameters 	IFirmParameters	UnityObjects.IUnityApplication	Ticari işlem parametrelerinde işlem yapmak için IFirmParametres nesnesi oluşturulur.	 
FirmParameters özelliği ile ticari sistem parametrelerine ulaşabiliriz. Bu özelliklerin değerlerini okuyabilip, değerlerini değiştirebiliriz. Post edilmeyen değişiklikler veri tabanına yansımaz.


 
C# Örneği
            int firmNr = Convert.ToInt32(Microsoft.VisualBasic.Interaction.InputBox("Firm Number", "Add Firm", "101", 100, 100));

            UnityObjects.Firms Firms = UnityApp.CAPI.Firms;
            UnityObjects.Firm Firm = Firms.NewFirm();
 
            Firm.FirmNr = firmNr;
            Firm.name = "Firm" + firmNr.ToString();
            Firm.set_WorkDays(7, true);
  
            if (Firm.Post())
            {
                DialogResult res = MessageBox.Show("Would you like to create firm tables?", "CreateTables", MessageBoxButtons.OKCancel); 
                if (res == DialogResult.OK) 
                {
                    bool ok = Firm.CreateTables();
                    if (ok)
                    {
                        res = MessageBox.Show("Would you like to create a period?", "Add Period", MessageBoxButtons.OKCancel); 
                        if (res == DialogResult.OK)
                        {
                            UnityObjects.Periods Periods = Firm.Periods;
                            UnityObjects.Period Period = Periods.NewPeriod();
                            Period.number = 1;
                            Period.Active = true;
                            Period.BeginDate = Convert.ToDateTime("01.01.2010");
                            Period.endDate = Convert.ToDateTime("31.12.2010");
                            if (Period.Post())
                            {
                                res = MessageBox.Show("Would you like to create period tables?", "CreateTables", MessageBoxButtons.OKCancel); 
                                if (res == DialogResult.OK) 
                                {
                                    Period.CreateTables();
                                }
                            }
                            else
                            {
                                MessageBox.Show(UnityApp.GetLastError().ToString() + ":" + UnityApp.GetLastErrorString().ToString());
                            }
                        }
                    }
                }
            }
            else
            {
                MessageBox.Show(UnityApp.GetLastError().ToString() + ":" + UnityApp.GetLastErrorString().ToString());
            }


Login
Login;
 
1.	Connect
2.	UserLogin 
3.	CompanyLogin
işlemlerini birlikte (aynı anda) yapmanızı sağlar.


Parametre	Type	Açıklama
UserName	String	Tanımlı olan kullanıcı isimleridir. Bu kullanıcı ile LBS Unity’e Login olunacaktır.
Password	String	Tanımlı olan kullanıcının tanımlı şifresidir.
FirmNr	int	Login olunacak Firma numarası geçilir. Bu firma numarası LBS USYS Sistem İşletmeninde Firma tanımlanırken verilen firma numarasıdır.
PeriodNr	int	Period numarası.
 	 	 
Return Type	 	Açıklama
Boolean	TRUE
ya da
FALSE	Login işleminin gerçekleşme durumunu döner. Login işlemi başarılıysa TRUE, değilse FALSE döner.
FALSE dönerse Application nesnesinin GetLastError, GetLastErrorString metotları ile hata yakalanabilir.
 
VB Örneği
Dim UnityApp As Variant
Dim LastError As Variant
 
Set UnityApp = CreateObject("UnityObjects.UnityApplication")
If NOT IsEmpty(UnityApp) then
   If UnityApp.Login("Kullanıcı Adı", "Şifre", Firma Numarası) then
       :
       :
      UnityApp.Disconnect
   Else
      LastError = UnityApp.GetLastError
   End If
   UnityApp = Empty
Else            
   MsgBox "Unity Application object not created ..."
End If
C# Örneği
if ((UserName != "") && (UnityApp.Login(UserName,UserPass,        Convert.ToInt16(FirmNr), 0)))
  {
     MessageBox.Show("Login OK");
  }
else
  {
    string Err = UnityApp.GetLastError().ToString() + ":" + UnityApp.GetLastErrorString().ToString();
    MessageBox.Show(Err);
  } 


AddDocument
LO ve LOD da döküman yönteminde hareket ve kartlara kayıt eklemek için kullanılan method'dur.


Parametre	Type	Açıklama
folderRef	int	Döküman katalog referansıdır.
document	string	Dökümanın yeri.
lref	int	Eklenmek istenen dökümanın referansıdır.
doctype	int	Dökümanın tipi
Return Type	Açıklama
boolean	İşlemin gerçekleşip gerçekleşmediğini bildirir.
 
 
C# Örneği
//Hata mesajları :
//-109 : Geçerli doküman katalog girişi yapılmalıdır.
//-110 : Bu özelliğin kullanılabilmesi için Kodak Imaging Library'nin kurulu olması gerekir.
//-111 : Seçilen doküman kataloga eklenemedi.
//-112 : Seçilen doküman istenen kayda eklenemedi.}

UnityObjects.UnityApplication UnityApp= new UnityObjects.UnityApplication();
bool res=Global.UnityApp.AddDocument(2, "C:/Users/UMUTCANY/Desktop/aktif kullanıcılar.txt", 8, 0);//Y2 - (YM) - malzeme

 if (res)
   {
       MessageBox.Show("Döküman eklenmiştir.");
   }
 else
   { 
       MessageBox.Show(UnityApp.GetLastError() + " - " + UnityApp.GetLastErrorString());
   }


AddInstalmentTransaction
Taksit hareketleri girerken ödemeli siparişin taksitini kapatmaya yarıyan method'dur.


Parametreler	Type	Açıklama
fType	short	Tip (1 : Sipariş, 2 : Fatura)
sourceRef	int	Fatura / Sipariş referansı
instRef	int	Ödemesi yapılacak taksit.
doctype	int	Döküman tipi.
lackType	short	 0 : İşlem yapılmayacak, 1 : İlk takside ekle, 2 : Son takside ekle, 3 : Taksitlere dağıt, 4 : Yeni taksit oluştur.
newInstDate	int	Yeni oluşturlması istenen taksidin tarihi.
payType	short	1 : Nakit, 2 : Çek, 3 : Senet, 4 : Kredi kartı.
payDate	int	ödeme tarihi
total	double	ödeme tutarı
trCurr	short	İşlem dövizi
trRate	double	İşlem dövizi kuru
opStat	short	İşlem statüsü
bankPayDate	int	Geri ödeme tarihi
calcType	short	Tutar hesabı
posComm	double	Hizmet komisyonu
pointComm	double	Puan komisyonu
dueDiffComm	double	Vade farkı komisyonu
lnAccCode	string	Hesap kodu (payType = 1), Kasa kodu (payType = 4)
rePayPlanCode	string	Geri ödeme planı (payType = 4)
Return Type	Açıklama
boolean	İşlemin gerçekleşip gerçekleşmediğini bildirir.
 
 
C# Örneği
UnityObjects.UnityApplication UnityApp=new UnityObjects.UnityApplication();
                 
bool lPostBasarili = UnityApp.AddInstalmentTransaction(1,2,3,2,1,2,33435232,4,2,34,1,23123,2,343,343,4545,"acccode","plancode");
  if (!lPostBasarili)
	{
		 MessageBox.Show(UnityApp.GetLastError()+"-"+UnityApp.GetLastErrorString());
	}
 else
   {
       MessageBox.Show("Taksit Kapatılmıştır.");
   }


ApplyAvaragePayment


Logo ERP ürünü  ile fatura içerisinde F9 Ödeme hareketleri Ortalama vade uygula işlemini yapan bir metotdur. ModNr parametresine hangi modül ile işlem yapacağımızı belirtiriz. Parametreye verebileceğimiz değer listesi aşağıdadır.
LRef parametresine geçeceğimiz değer ise üzerinde işlem yapılacak olan fişin Logical Referance bilgisidir.
 
Parametre	Type	Açıklama
ModNr	Integer	Modül numarasıdır. Aşağıda listesi verilmiştir.
LRef	Long	İşlem yapılacak fişin Logical Referans bilgisidir.

ModNr
Değer	Açıklama
4	Fatura
5	Cari Fişleri
 
 
VB Örneği
Dim Lref  As Long
Dim ModNr As Byte
ModNr = 4
Lref = InputBox("Ortalama vade uygulanacak olan Fatura Logical Referance bilgisini girin.:")
  Call UnityApp.ApplyAvaragePayment(ModNr, Lref)
End Sub 
C# Örneği
 
short Lref=4;
short ModNr = 5;            
UnityApp.ApplyAvaragePayment(ModNr,Lref);


AutoBOMRevisionUpdate
Logo Object ile üretim Tanımları/İşlemler/Ürün reçete revizyon güncelleme işlemi ile onaylanmış revizyonların geçerli hale getiren method'dur.


Parametre	Type	Açıklama
engChgRef	int	Revizyon  referansıdır.
Return Type	Açıklama
boolean	İşlemin gerçekleşip gerçekleşmediğini bildirir.
 
 
C# Örneği
UnityObjects.UnityApplication UnityApp = new UnityObjects.UnityApplication();
 bool res = Global.UnityApp.AutoBOMRevisionUpdate(1);
  if (res)
    {
       MessageBox.Show("Güncelleme gerçekleşti");
    }
  else
    {
      MessageBox.Show(UnityApp.GetLastError() + " - " + UnityApp.GetLastErrorString());
    } 

CompanyLogin
Bu metod Logo ERP ürünleri’nin firmalarına login olunması için kullanılır. Bu metot Connect ve UserLogin metotlarından sonra kullanılır. Firmaya başarılı bir şekilde connect olunması durumunda TRUE, diğer durumlarda FALSE değeri döner.
CompanyLogin FALSE dönerse Application nesnesinin GetLastError, GetLastErrorString metodları ile hata yakalanabilir. CompanyLogin metodu kullanılmadan Connected, Loggedln, CompanyLoggedln metodları ile Connection,
UserConnection ve açık olan firma bağlantısı olup olmadığı kontrol edilmelidir. Açık olan firma bağlantısı varsa CompanyLogout metodu kullanıldıktan sonra CompanyLogin olunmalıdır.
 
Paremetre	Type	Açıklama
FirmNr	Integer	Login olunacak Firma numarası geçilir. Firma Numarası Logo ERP ürünleri SYS Sistem İşletmeninde Firma tanımlanırken verilir.
PeriodNr	Integer	Opsiyonel bir parametredir Firmanın bağlanılmak istenen dönem numarası girilmelidir Boş olarak geçildiğinde Firma üzerindeki aktif döneme bağlanılmaktadır.
Return Type	Açıklama
Boolean	CompanyLogin işleminin gerçekleşme durumunu döner.
 
 
VB Örneği
 Dim FirmNr As Long
 Dim Ok As Boolean
 Dim Err As String 
  FirmNr = Val(InputBox("Login olunacak Firma Numarasını giriniz."))
  If FirmNr = 0 Then 
     Exit Sub
  End If
  Ok = UnityApp.CompanyLogin(FirmNr)
  If Ok Then
     MsgBox("Login Ok")
  Else
     Err = Cstr(UnityApp.GetLastError) + ":" + Cstr(UnityApp.GetLastErrorString)
     MsgBox(Err)
  End If
End Sub 
C# Örneği
 
if ((FirmNr != "") && (UnityApp.CompanyLogin(Convert.ToInt16(FirmNr), 0)))
  {
    MessageBox.Show("Connect + UserLogin + CompanyLogin");
  }
else
  {
    string Err = UnityApp.GetLastError().ToString() + ":" + UnityApp.GetLastErrorString().ToString();
    MessageBox.Show(Err);
  } 
 
CompanyLogout
Bu metod Logo ERP ürünlerin 'den firmalarından logout olunması için kullanılır. Bir firmadan Logout olunabilmesi için CompanyLogin işleminin başarıyla gerçekleşmiş olması gerekmektedir.
Metodu kullanmadan önce bağlantının olup olmadığı CompanyLoggedln metodu ile kontrol edilmelidir.
VB Örneği
 If UnityApp.CompanyLogin(FirmaNumarası) Then
   :
   :
   UnityApp. CompanyLogout
End If  
   
C# Örneği
if(UnityApp.CompanyLogin(FirmaNumarası))
  {
    :
    :
    UnityApp.CompanyLogout();
  } 


Connect
Bu metodla Logo ERP ürününe connection (Veritabanı Bağlantısı) kurulur. Logo ERP ürünüyle çalışmanın ilk adımı başarılı bir connection kurmaktır. Diğer çağrılar bu metodtan sonra yapılır. Logo ERP ürününe başarılı bir şekilde bağlanılırsa TRUE, diğer durumlarda FALSE değeri döner.
Connect FALSE dönerse Application nesnesinin GetLastError, GetLastErrorString metodları ile hata yakalanabilir. Connect işlemi yapılmadan Connected metodu kullanılarak Connection durumu kontrol edilmelidir.

Return Type	Açıklama
Boolean	Connect işleminin gerçekleşme durumunu döner.

 
VB Örneği
If UnityApp.Connect()
   MsgBox ("Connect")
Else
     string Err = Cstr(UnityApp.GetLastError) + ":" + Cstr(UnityApp.GetLastErrorString)
     MsgBox (Err)
End If 
C# Örneği
if (UnityApp.Connect())
 {
     MessageBox.Show("Connect");
 }
 else
 {
     string Err = UnityApp.GetLastError().ToString() + ":" + UnityApp.GetLastErrorString().ToString();
     MessageBox.Show(Err);
 }


DebtClose
Paytrans tablosundaki kayıtlar üzerinde program tarafından yaptığımız borç kapatma işlemini LObjects ile yapmamıza yarar. Kapatılacak borç miktarlarının tutması önemli değildir. Sadece girilen referansların birlerini kapatacak cinsten olması gerekir.
Yani bir referans borç tipinde iken parametrelerde geçilen ikinci referans alacak tipinde olmalıdır. Kapanan miktar kadar kapatma işlemi yapılır, eğer açıkta kalan bir miktar daha varsa bunlar için ikinci fişler açılmaktadır.
Parametrelerde geçilen referansların aynı cari hesaba ait olması gerekmektedir. Kapan borçlar programdan geri alınabilmektedir. Programdan borç kapatmayla bir farkı yoktur. Fonksiyon geriye boolean tipinde bir değer döndürür.
Bu değer işlemin başarılı bir şekilde yapılıp yapılamadığını bildirir. TRUE dönerse sorunsuz bir şekilde tamamlanmış, FALSE dönerse işlem başarılı bir şekilde sonuçlandırılamamıştır. İşlemin çıkardığı hata mesajlarına GetLastError ve GetLastErrorString methodlarından ulaşılabilir.
Bu methodların döndüreceği hata numaraları ve anlamları hakkındaki açıklayıcı bilgileri Unity Objects Hataları bölümünde bulabilirsiniz.
 
Parametre	Type	Açıklama
pTrFRecRef	int	Kapanacak olan Paytrans tablosundaki bir hareket. (Borç veya alacak)
pTrSRecRef	int	Kapanacak olan Paytrans tablosundaki bir hareket. (Borç veya alacak)
DebtAmount 	Double	Fişler arasında kapatılacak fiyat miktarı
DebtRate 	Double	Kapanan fişin döviz kuru
PayRate 	Double	Kapatan  fişin döviz kuru
Return Type	Açıklama
Boolean	İşlemi başarıyla gerçekleştirirse TRUE, diğer durumlarda FALSE döner.
 
 
Vb Örneği
if UnityApp.DebtClose(18 , 4,1000,2.505,2.36)then
MsgBox ("Borç Kapatma İşlemi Başarıyla Gerçekleştirildi.")
else
MsgBox ("Error : (" + CStr(UnityApp.GetLastError) ") + - "+ UnityApp.GetLastErrorString)  
PayTrans tablosundaki 18 ve 4 Logical Reference numaralarına sahip olan kayıtları kapatır.
Eğer bir sorun çıkarsa hata yakalama rutiniyle çıkan hataları yakalar.
C# Örneği
    int creditRef = 18;
    int debitRef = 4;
    bool ok = Global.UnityApp.DebtClose(creditRef, debitRef, 7000, 1, 2.5);
    if (ok==true)
      {
        MessageBox.Show("İşlem tamamlanmıştır");
      }
    else
     {
       MessageBox.Show(Global.UnityApp.GetLastError() +" "+Global.UnityApp.GetLastErrorString());
     }
 
 
 
 
 
  Eski Hali : 
      DebtClose(pTrFRecRef, pTrSRecRef: Integer; 
                        tot: Double = 0): WordBool; 
   Yeni Hali : 
      DebtClose(pTrFRecRef, pTrSRecRef: Integer; 
                        DebtAmount: Double = 0, 
                        DebtRate: Double = 0, 
                        PayRate: Double = 0): WordBool; 

Eski halinde "tot" parametresine girilen değer hem "kapatan" hem "kapanan" alanına yazılıyordu ve bu yöntem farklı döviz birimleriyle borç kapatma işleminde hatalı değerler çıkmasına neden oluyordu. 

Yeni halinde şu şekilde çalışmaktadır; 
   - Opsiyonel parametreler girilmeden "DebtClose(1001,1002)" şeklinde çalıştırıldığında DebtAmount, DebtRate ve PayRate borcun tamamını kapatabilmek veya tahsilatın tamamını kullanmak üzere default değerlerle doldurulur. 
   - DebtAmount parametresine "0"dan büyük değer girilmedikçe DebtRate veya PayRate parametresine girilen değerlerin bir hükmü yoktur. 
   - Kapanan fişin para birimi "TL" ise DebtRate parametresinin değeri ne olursa olsun "1"e dönüşür. 
   - Kapatan fişin para birimi "TL" ise PayRate parametresinin değeri ne olursa olsun "1"e dönüşür. 
   - PayAmount parametre olarak alınmaz, program DebtAmount, DebtRate ve PayRate parametrelerine göre PayAmount değeri hesaplanır. 

NOT : Bu fonksiyonun farklı para birimleriyle çalışabilmesi için ilgili cari hesabın "Ticari Bilgiler" sayfasında "Ödeme İzleme" alanının değeri "Değişik Dövizli İşlemlerle" olmalıdır.

RollBackDebtClose
Borç kapama işlemini geri almak için kullanılan fonksiyondur.
Parametre	Type	Açıklama
transRef	int	Borç kapaması geri alınmak istenen ödeme hareketinin LOGICALREF' idir
Return Type	Açıklama
boolean	işlem başarılı bir şekilde tamamlanmış ise TRUE, yoksa FALSE.
C# Örneği
UnityApp.RollBackDebtClose(23);


DebtCloseFIFO
Logo Tiger 3 içerisinde, borç takip ekranında yer alan FIFO Kapat butonunun yaptığı işlemi Logo Objects ve REST Servis ile yapmamıza yarar. 
Fonksiyon geriye bool tipinde bir değer döndürür.
Bu değer işlemin başarılı bir şekilde yapılıp yapılamadığını bildirir. true dönerse sorunsuz bir şekilde tamamlanmış, false dönerse işlem başarılı bir şekilde sonuçlandırılamamıştır.
İşlemin çıkardığı hata mesajlarına GetLastError ve GetLastErrorString metotlarından ulaşılabilir.
Bu metotların döndüreceği hata numaraları ve anlamları hakkındaki açıklayıcı bilgileri Unity Objects Hataları bölümünde bulabilirsiniz.
 
Parametre	Type	Açıklama
payTrRef	int	Kapanacak olan Paytrans tablosundaki bir hareket. (LG_FFF_PP_PAYTRANS.LOGICALREF)
begDate	DateTime	Başlangıç işlem tarihi
endDate	DateTime	Bitiş işlem tarihi
Return Type	Açıklama
bool	İşlemi başarıyla gerçekleştirirse TRUE, diğer durumlarda FALSE döner.
 
C# Örneği
 DateTime begdate = Convert.ToDateTime("01.01.2021");
 DateTime enddate = Convert.ToDateTime("31.12.2021");
 
 if (Global.UnityApp.DebtCloseFIFO(15470, begdate, enddate))
 {
 MessageBox.Show("İşlem tamamlanmıştır.");
 }
 else
 {
 MessageBox.Show(Global.UnityApp.GetLastError() + " " + Global.UnityApp.GetLastErrorString());
 }


Logo Objects Hata Kodları
IUnityApplication nesnesinin GetLastError veya  GetLastErrorString metoduyla yakalayabileceğiniz hata kodlarıdır.
Bu hatalar Logo Objects'in çalışmasıyla ilgili hatalardır.

Hata No	Hata Mesajı
0	No error
-1	Can not make basic connection.
-2	Can not connect database.
-3	Invalid user name.
-4	Can not read user information.
-5	Invalid password.
-6	Can not login.
-7	Can not get firm information.
-8	Can not login to company.
-9	Can not create query object.
-10	Can not set SQL statement.
-11	Can not craete XML file.
-12	Can not open XML file.
-13	Not allowed. (protection error) (Set ile UnityObject kullanma yetkisi yok)
-14	Can not add trade group. Possible key violation.
-15	Can not find trade group. Possible deleted key.
-16	Can not lock trade group. Possible deleted key.
-17	Can not write trade group. Possible key violation.
-18	Can not read trade group. Possible deleted key.
-19	Can not delete trade group from trade group list. Index out of bounds.
-20	Can not delete trade group. Possible locked or deleted already.
-21	Can not clear trade group list. No items yet.
-22	Can not find requested class in registered classes list.
-23	Already connected.
-24	Already disconnected.
-25	Can not collect firms list.
-26	Can not collect users list.
-27	Can not collect departments list.
-28	Can not collect divisions list.
-29	Can not collect warehouses list.
-30	Can not collect factories list.
-31	Can not collect factory divisions list.
-32	Can not collect periods list.
-33	Can not delete condition from conditions list. Index out of bounds.
-34	Can not allocate new child object to append to line list of data object.
-35	Can not find field by given name. This field name must be defined in resource field list.
-36	Can not find field by given name. This field name must be defined in database.
-37	Data object not ready to read data.
-38	Can not delete data. Invalid reference.
-39	Invalid data state. Data state must be insert or update.
-40	Can not find field by given name in returned cursors' column list.
-41	Can not locate first row in current cursor.
-42	Can not locate next row in current cursor.
-43	Can not locate previous row in current cursor.
-44	Can not locate last row in current cursor.
-45	Can not load column list of the current cursor.
-46	Can not find given user.
-47	Can not load user rights.
-48	Invalid right type.
-49	Rights list is empty.
-50	Can not update rights list to database.
-51	Port of the firm parameters table is null.
-52	Can not find firm parameters info to update.
-53	Can not lock firm parameters table to update.
-54	Can not write firm parameters info to table.
-55	Invalid module number.
-56	Can not read approval date info from table.
-57	Can not write approval date info to table.
-58	Can not append firm info to CAPI database.
-59	Can not update firm info to CAPI database.
-60	Can not delete firm info from CAPI database.
-61	Can not append user info to CAPI database.
-62	Can not update user info to CAPI database.
-63	Can not delete user info from CAPI database.
-64	Can not append department info to CAPI database.
-65	Can not update department info to CAPI database.
-66	Can not delete department info from CAPI database.
-67	Can not append division info to CAPI database.
-68	Can not update division info to CAPI database.
-69	Can not delete division info from CAPI database.
-70	Can not append warehouse info to CAPI database.
-71	Can not update warehouse info to CAPI database.
-72	Can not delete warehouse info from CAPI database.
-73	Can not append factory info to CAPI database.
-74	Can not update factory info to CAPI database.
-75	Can not delete factory info from CAPI database.
-76	Can not append factory division info to CAPI database.
-77	Can not update factory division info to CAPI database.
-78	Can not delete factory division info from CAPI database.
-79	Can not append period info to CAPI database.
-80	Can not update period info to CAPI database.
-81	Can not delete period info from CAPI database.
-82	Can not read terminal info from CAPI database.
-83	Can not delete terminal info from CAPI database.
-84	Can not append terminal info from CAPI database.
-85	Can not update terminal info from CAPI database.
-86	Can not update authentication code.
-87	Authentication code list is empty.
-88	Invalid authentication type.
-89	Can not read authentication codes.
-93	Terminal sayısı limiti aşılmıştır
32456	Hareketin tümü başka işlemleri kapatıyor !
32457	İşlem iptal edilmiş ! ~ ~Borç kapama işlemi yapılamaz.
32458	Fatura peşin ödenmiş ! ~ ~Borç kapama işlemi yapılamaz.
32459	Hareketler aynı cariye ait olmalıdır!
32460	İşlem döviz türleri uyuşmuyor !
32461	Başka bir kullanıcı kapatma işlemi yapıyor.
32462	Hareketler birbirinden farklı olmalı
32463	İşlem türü hatalı !
32464	İşlemin tümü kapanmış !
32465	Hareket bulunamadı!



CreateGlobalCustTables
LOD ile oluşturulmuş veya güncellenmiş tabloların LObject ile DB tarafında oluşturma ve güncelleme işlemini gerçekleştiren method'dur.
 
C# Örneği
UnityObjects.Firms Firms=Global.UnityApp.CAPI.Firms;
Firms[0].CreateCustomTables();
UnityObjects.Periods Perds=Global.UnityApp.CAPI.Firms[0].Periods;
Perds[0].CreateCustomTables();
Global.UnityApp.CreateGlobalCustTables();


CustTables
Logo Object Designer' da yapılmış tablolara veri yazmak için kullanılır.


C# Örneği
   int  TableId = 7;  
   UnityObjects.QTableProxy tbl = Global.UnityApp.CustTables(TableId);
   tbl.NewRecord();  
   tbl.SetTxtField("FLDCODE", "CODE");  
   tbl.UpdateRecord();    
   int DBErrRes = Global.UnityApp.GetLastTableErr();
   if (DBErrRes!=0)
	{
       MessageBox.Show("Do not appdend new row ! Table ID = " + TableId.ToString());
	}


IRelation
IRelation tek bir alanının tüm özelliklerini listeler.
Uyarı:
Programın kullandığı alanları silmek veya değiştirmek düzgün çalışmasını engelleyecek, veri bütünlüğünün bozulmasına sebep olacaktır.
Dikkatli kullanılmalıdır.
 
Data Properties
DestField	String	Tablonun Relation tanımlanmış field ismi döner.
DestTable	Integer	Tablonun Relation tanımlanmış tablo index'i döner.
Index	Integer	Index (Sıra) numarasıdır. 0'dan başlar. Atanabilen bir alan değildir. CollectionItem Index'ini döner. Kayıtlara ulaşırken Index numaralarını kullanmak hızlı olmasına karşın önerilmez.
SourceField	String	Tablonun relation tanımlanmış field ismini döner.
Parent	Unknown	ICollectionItem’dan inherit edilmiş bir property’dir. IRelations türünden bir nesne bilgisi tutar. Read veya Write işlemi yapılamaz. Unity Object bu özelliği iç işleyişinde kullanır.


Irelation Örnek
UnityObjects.Relations Relations =Global.UnityApp.Tables[0].Relations;
string str = "Relation Count in the Table = " +Relations.Count.ToString() +
            " First " + Relations.Count.ToString() + " Relation ;\n" ;
str = str + "Index - Source Field - Dest Field - Dest Table \n";  
for (int i = 0; i < Relations.Count-1; i++)
{
    UnityObjects.Relation Relation = Relations[i];
    str = str +Relation.index.ToString()+ " - " + Relation.sourceField + " - " + Relation.DestField + " - " +
    Relation.DestTable + " - \n" ;
} 
MessageBox.Show(str);
 
IRelations
IRelations, ICollection nesnesinden inherited (miras alınmış) bir nesnedir.

•	LBS Unity veri tabanındaki tüm tabloların ilişkilerine ulaşmamızı sağlar.
•	Tüm elemanları IRelation nesnesi olarak olarak tanımlıdır.
 
Methods
 
Clear	Yok	ICollection'dan inherit edilmiş bir method'dur. Kullanılmamalıdır.
Delete(Index)	Boolean	Index parametresi olan bir metotdur. İlişkilerden isteneni siler. İlişkiler birer CollectionItem olarak tanımlı olduklarından silmek istediğimiz İlişkinin collectionItem index'ini bu metoda parametre olarak geçerek silmek istediğimiz ilişkiyi sileriz. Silme işlemini check etmek için UnityApplication nesnesinin GetLastError veya GetLastErrorString metodlarını kullanabiliriz. İşlemler hafızada yapılmaktadır. Hiç bir şekilde veri tabanındaki ilişkileri silmez. Sık kullanılan bir metod değildir.
InternalLoad	Yok	Tabloların Relations property’sine erşildiğinde itemları doldurmak için internal olarak çağırılır. Kullanılmamalı.


Data Properties
Count	Integer	Tablodaki alanların listesindeki eleman sayısını verir.
Item(Index)	IField	Listedeki bir elemanın bilgilerini tutan listedir. Index 0 dan başlar. Döngülerde Count-1'e kadar döndürülmelidir. Bu listedeki tüm elemanlar IField tipindedir.
Parent	Unknown	ICollection’dan inherit edilmiş bir property’dir. ITable türünden bir nesne bilgisi tutar. Read veya Write işlemi yapılamaz. Unity Object bu özelliği iç işleyişinde kullanır.
 
IRights
IApplication nesnesinin NewRightObject metodunu kullanarak IRight nesnesi oluşturulur.
Bu nesnenin metod ve özelliklerini kullanarak, kullanıcıların ve grupların yetkilerini okur veya set ederiz. 
Usys programında yapabileceğimiz tüm yetki işlemlerini ayrıntılı bir şekilde bu nesne sayesinde yapabilmekteyiz.
Bir kullanıcını;
•	firma
•	firmanın bölümleri
•	departmanları
•	fabrikaları
•	fabrika bölümleri
•	iş yerleri
•	dönemleri
•	terminal
•	işlem yetkileri gibi tüm yetki kısıtlamalarını yapabilmekteyiz.
 
Methods
GetRightsByName	Boolean	Kullanıcının ismi ile hak bilgilerine ulaşmak için kullanılır.
GetRightsByNumber	Boolean	Kullanıcının numarası ile hak bilgilerine ulaşmak için kullanılır.
Get	Boolean	Kullanıcının herhangi bir yetki üzerindeki durumunu döner.
Set	Boolean	Kullanıcının herhangi bir yetki üzerindeki durumunu set eder.
Update	Boolean	Veri tabanına yapılan değişiklikleri ekler.
Data Properties
UserName	WideString	İşlem yapılan kullanıcının ismidir.
Owner	Integer	Hakkın sahibidir.
RighsType	Integer	Oluşturulan Hak nesnesinin tipidir.
RightType	Integer	Hak nesnesiyle yapılacak işlemlerin tipidir.


IRightMethods
IRightMethods arayüzleri ile

•	Kullanıcı Haklarını belirleriz.


Function GetRightsByName(AName As String, ARightType As Integer, AOwner As Integer) As Boolean
Member of UnityObjects.IRights   
Parametreleri
AUserName	String	Haklarına ulaşılmak istenen kullanıcının ismi.
ARightType	Integer	Yetki nesnesiyle yapacağımız işlem tip numarasıdır.
Aowner	Integer	Ulaşılmak istenen hakkın sahibi
Dönen Değer Tipi
Boolean	Kullanıcının haklarına başarıyla ulaşılırsa TRUE, diğer durumlarda FALSE döner.
Owner özelliği çok karıştırıldığından bu özelliği dikkatli kullanmak gereklidir. ARightType bilgisinin sahibini (owner) set ettiğimiz parametredir. Terminal ve Firmanın sahibi yoktur fakat işlem, bölümler, işyerleri, ambarlar ve fabrika yetkileri kendi başlarına özerk yetkiler değildir. bunlar firmalara bağlıdır. Dolayısı ile bir sahibi olan eleman üzerinde işlem yapmak istiyorsak onun sahip bilgisinide vermek zorundayız. Mesela 2 numaralı firmanın 45 numaralı ambarında işlem yapmak istiyorsak bizim yetki tipimiz ambarları gösteren 6 , ambarımızın bağlı olduğu 2 numaralı firmanın numarası ise sahibinin numarasıdır. Eğer 2 numaralı firma yetkisinden bahsedeceksek yetki tipimiz firmaları gösteren 3, Owner parametresinede firmanın bağlı olduğu başka bir eleman olmadığı için owner bilgisine 0 değerini geçeceğiz.
Yetkilendirme yapacağımız kullanıcının ilk olarak yetkilerine ulaşılması lazımdır. Yetkileri okunduktan sonra diğer işlemler yapılabilir. Yetkilere kullanıcı bazında ulaşacağız. Kullanıcın yetkilerine kullanıcının ismini  kullanarak ulaşmak istediğimizde bu metodu kullanırız. 
Function GetRightsByNumber(ANumber As Integer, ARightType As Integer, AOwner As Integer) As Boolean
Member of UnityObjects.IRights 
Parametreleri
AUserNumber	Integer	Haklarına ulaşılmak istenen kullanıcının numarası.
ARightType	Integer	Ulaşılmak istenen hakkın tipi
AOwner	Integer	Ulaşılmak istenen hakkın sahibi
Dönen Değer Tipi
Boolean	Kullanıcının haklarına başarıyla ulaşılırsa TRUE,diğer durumlarda FALSE döner.
Metodun yaptığı iş ve parametrelerinin kullanılması GetRightsNumber parametresiyle aynıdır. Sadece Yetkilerine ulaşılmak istenen kullanıcının numarası ile haklar okunur. 
Function Get(index As Long) As Boolean  
Member of UnityObjects.IRights 
Parametreleri
Index	Long	Yetkisini almak istediğimiz elemanın numarasını geçeriz.
Dönen Değer Tipi
Boolean	Get işlemi başarıyla gerçekleşirse TRUE, diğer durumlarda FALSE döner.
Kullanıcının yetkilerine GetByName veya GetByNumber kullanarak ulaştığımızda, programa hangi kullanıcının terminal, firma veya firmanın işyerleri gibi yetkilendirme işlemi yapacağımızı belirtmiş oluruz. Bundan sonraki adımda programa kaçıncı terminal, fabrika veya işyeri olduğu bilgisini girmektir. Bu iş için get medodunu kullanırız. Get metoduna istediğimiz elemanın numarasını geçerek,kullanıcının o elemanın üzerindeki yetki durumunu return değerinde öğreniriz. Yetkili ise TRUE, diğer durumlarda ise FALSE değeri döner. 
Sub Set(index As Long, Value As Boolean)
Member of UnityObjects.IRights 
Parametreleri
Index	Long	Yetkisini almak istediğimiz elemanın numarasını geçeriz.
Value  	Boolean	Set edeceğimiz değeri geçeriz.(0-yetkisiz, 1-yetkili)
Dönen Değer Tipi
Boolean	Set işlemi başarıyla gerçekleşirse TRUE, diğer durumlarda FALSE döner.
Kullanıcının haklarını get metoduyla okuduğumuz gibi set metoduylada değiştirebiliriz. Index numarası get metodunda geçtiğimiz index gibidir. Value parametresi ise indexle belirtilmiş elemanın set edeceğimiz parametresidir. 1 (True - Yetkili) veya 0 (False - Yetkisiz) yapabiliriz.
Function Update() As Boolean 
Member of UnityObjects.IRights 
Parametreleri
Yok
Dönen Değer Tipi
Boolean	Update işlemi başarıyla gerçekleşirse TRUE,diğer durumlarda FALSE değeri döner.
Kullanıcılar üzerinde yaptığımız yetkilendirme işlemleri update yapmazsak veritabanına yazılmayacak ve kaydedilmemiş olacaktır. Yapacağımız işlemleri bitirdikten sonra update işlemini gerçekleştirmeliyiz. Update işleminin gerçekleştiğinden emin olmak için return değerini kontrol edebiliriz ve FALSE ise hata yordamlarını kullanarak hata ayıklayabiliriz.
short userNr = 2;
short firmNr = 38;
short whNr = 1;
// Rights Types
// 1 : Merge        : Kullanıcı ve Group haklarının birleşimidir.
// 2 : Group Rights : Grup haklarının okur
// 3 : User Rights  : Kullanıcı haklarını okur.
UnityObjects.Rights Rights = Global.UnityApp.NewRightsObject(3);
// Right Type
//  1 : Terminal yetkilerine ulaşmak için kullanılır.
//  2 : İşlem yetkilerine ulaşmak için kullanılır.
//  3 : Firma yetkilerine ulaşmak için kullanılır.
//  4 : Firmanın Bölüm yetkilerine ulaşmak için kullanılır.
//  5 : Firmanın İşyerleri yetkilerine ulaşmak için kullanılır.
//  6 : Firmanın Ambar yetkilerine ulaşmak için kullanılır.
//  7 : Firmanın Fabrika yetkilerine ulaşmak için kullanılır.
// 11 : Firmanın İşyeri giriş yetkileri
// 12 : Firmanın İşyeri çıkış yetkileri
// 13 : Firmanın Ambar giriş yetkileri
// 14 : Firmanın Ambar çıkış yetkileri 
Rights.GetRightsByNumber(userNr, 6, firmNr);
bool right_ok = Rights.Get(whNr);
Rights.Set(whNr, !right_ok);

IRight Properties
IRight Properties (Özellikleri)

Property UserName As String
read-only
Member of UnityObjects.IRights
Dönen Değer Tipi
WideString	Yetkileri okunan kullanıcının ismini döner.
 Yetkilerini okuduğumuz kullanıcının ismini döner. 
Property Owner As Integer
read-only
Member of UnityObjects.IRights
Dönen Değer Tipi
Integer	Yetkileri okunan elemanın sahibi (owner) bilgisini döner.
Yetkileri okunan elemanın owner bilgisini döner. Owner bilgisi sahip olduğu bir üst eleman anlamındadır. Firma, Terminal ve kullanıcı bilgilerinin owner yani sahibi yoktur çünkü konumuz dahilinde tekil nesneler halindedirler ama bazı nesneler bu tekil nesnelerin altında bulunurlar. Bu nesnelere örnek verecek olursak firmaların ambarları veya iş yerleri olabilir. Owner nesnesi bu bilgiyi tutar. Bir ambardan bahsederken hangi firmaya bağlı ambar olduğunu Unity Object bu özellikle bize bildirir. 
Property RightsType As Integer
read-only
Member of UnityObjects.IRights
Dönen Değer Tipi
Integer	Yaratılan yetki nesnesinin tip numarasını döner. Dönen integer değer ARightsTypes tip değerleridir.
Ulaşmak ve üzerinde işlem yapmak istediğimiz yetki tiplerini ilgili metoda geçeriz. Yetki tiplerimiz üç tanedir. URIGHT_USER tipini kullanıcı haklarını işlemek, URIGHT_GROUP grup işlerini yönetmek ve her ikisinin karışımını kullanmak için URIGHT_MERGED tipini kullanırız. Bu tipleri hakları okurken veririr. bu metodta okuduğumuz hakkın tipini bize döner. 
Property RightType As Integer
read-only
Member of UnityObjects.IRights
Dönen Değer Tipi
Integer	Yetki nesnesinde işlem yapılan yetki tip numarasını döner. Dönen integer değer RightTypes tip değerleridir.
Mesela kullanıcı yetkilerini okurken  kullanıcının hangi nesne üzerindeki yetkisi olduğu bilgisinide ilgili metodlarla geçeriz. Bu özellik bize nerenin yetkisi üzerinde çalıştığımızı döner. Mesela firmalar üzerindemi yoksa ticari işlem yetkileri üzerindemi işlem yaptığımızı döner.
 
short userNr = 2;
short firmNr = 38;
short whNr = 1;
// Rights Types
// 1 : Merge        : Kullanıcı ve Group haklarının birleşimidir.
// 2 : Group Rights : Grup haklarının okur
// 3 : User Rights  : Kullanıcı haklarını okur.
UnityObjects.Rights Rights = Global.UnityApp.NewRightsObject(3);
// Right Type
//  1 : Terminal yetkilerine ulaşmak için kullanılır.
//  2 : İşlem yetkilerine ulaşmak için kullanılır.
//  3 : Firma yetkilerine ulaşmak için kullanılır.
//  4 : Firmanın Bölüm yetkilerine ulaşmak için kullanılır.
//  5 : Firmanın İşyerleri yetkilerine ulaşmak için kullanılır.
//  6 : Firmanın Ambar yetkilerine ulaşmak için kullanılır.
//  7 : Firmanın Fabrika yetkilerine ulaşmak için kullanılır.
// 11 : Firmanın İşyeri giriş yetkileri
// 12 : Firmanın İşyeri çıkış yetkileri
// 13 : Firmanın Ambar giriş yetkileri
// 14 : Firmanın Ambar çıkış yetkileri 
Rights.GetRightsByNumber(userNr, 6, firmNr);
bool right_ok = Rights.Get(whNr);
Rights.Set(whNr, !right_ok);


ITable
ITable, bir tablonun tüm özelliklerini listeler.
Bu Tablonun kaydı Unity object ile yapılamaz. Bu tablolar LBS Unity USYS (Sistem İşletmeni) programı ile ilk kurulum sırasında oluşturulurlar. 
Uyarı:

Tablo üzerlerinde çalışılırken dikkatli olunmalıdır. Tablolar Unity programının çalışması için birinci önceliğe sahiptir. Programın kullandığı tabloları silmek veya değiştirmek düzgün çalışmasını engelleyecek, veri bütünlüğünün bozulmasına sebep olacaktır.  
Tablo nesnesiyle çalışılırken LBS Unity veri tabanını isimlendirme standartlarını bilmek gereklidir.
 

Methods

GetTableName	String	Firma ve dönem numaralarını vererek Tablo ismini düzenleriz.
InternalLoad	Yok	Tables’a erşildiğinde oluşturulan itemlar için internal olarak çağırılır. Kullanılmamalı.
  
Data Properties

Name	String	Tablonun ismidir.
Number	Integer	Tablonun numarasıdır.
Index	Integer	Index (Sıra) numarasıdır. 0'dan başlar. Atanabilen bir alan değildir. CollectionItem Index'ini döner. Kayıtlara ulaşırken Index numaralarını kullanmak hızlı olmasına karşın önerilmez.
Parent	Unknown	ICollectionItem’dan inherit edilmiş bir property’dir. ITables türünden bir nesne bilgisi tutar. Read veya Write işlemi yapılamaz. Unity Object bu özelliği iç işleyişinde kullanır.
  
Collection Properties

Fields	IFields 	Tablonun tüm alanlarına ulaşırız. Tüm alanlar IField tipinde tanımlanmıştır. Bu nesnelere Fields nesnesiyle ulaşıp işleyebiliriz.
Relations	IRelations 	Tablolar arasındaki tüm ilişkileri içerir. Tablonun ilişkilerini bu nesne sayesinde işleriz. Collection tipinde bir nesnedir ve tanımlı olan her ilişki IRelation olarak tanımlıdır. Bu ilişkilere IRelations nesnesi ile ulaşır ve işleriz.
 
Function GetTableName(FirmNr As Integer, periodNr As Integer) As String
Member of UnityObjects.ITable   
Parametreleri
FirmNr	Integer	Oluşturmak istediğimiz tablo isminin firma numarasıdır.
PeriodNr  	Integer	Oluşturmak istediğimiz tablo isminin dönem numarasıdır.
Dönen Değer Tipi
String	Verdiğimiz firma ve dönem numaralarına göre tablo ismi güncellenir ve return değerinde string bir değer olarak döner.
Çalışma süresince bir tablo üzerinde veya bir dönemde çalışılmayabilinir ve kullanıcının ihtiyacına göre değişik firma ve dönemler üzerinde çalışma yapmak gerekebilir. Bu durumlarda tablo ismi sorun yaratabilir.Tablo ismini sabit olarak değil değişken olarak işleyebilmemiz gerekir. Bu metot tablo ismini verdiğimiz firma ve dönem numarası ile düzenleyerek bize geri döner. Kolaylaştırıcı bir metotdur.


 
 
 
C# Örneği
UnityObjects.Tables Tables = Global.UnityApp.Tables;
           string str = "";
           for (int i = 0; i < Tables.Count - 1; i++)
           {
               UnityObjects.Table Table = Tables[i];
               str = str + Table.index.ToString() + "-" + Table.number.ToString() + "-" + Table.name + "\n";
           }
           MessageBox.Show(str);
 
 
 
GetTableName C# Örneği
if (UnityApp.CompanyLoggedIn!=true)
{
	MessageBox.Show("Please Login to Company");
    return;
}
string Itm_TableName=UnityApp.GetTableName (1,UnityApp.CurrentFirm, UnityApp.ActivePeriod);//Itm_TableName --> LG_FFF_ITEMS Table name
UnityObjects.IQuery Query=UnityApp.NewQuery();
string QueryString="Select Top 3 CODE from " + Itm_TableName + " Where CARDTYPE  22";
Query.Statement=QueryString;
if (Query.OpenDirect()==true)
{
    bool RES=Query.First();
    while (RES==true)
{
    UnityObjects.IQueryField QueryFields1=Query.QueryFields[0];
    MessageBox.Show(QueryFields1.Value.ToString());
    RES=Query.Next();
}
}
else 
    MessageBox.Show("Query  Error:"+Query.Error.ToString());
    Query.Close();
    Query=null; //Kill Objects
 
ITables
ICollection nesnesinden inherited (miras alınmış) bir nesnedir.
LBS Unity veri tabanındaki tüm tablolar üzerinde işlem yapmamızı sağlar. 
Tüm elemanları ITable nesnesi olarak olarak tanımlıdır.


Methods
Clear	Yok	ICollection'dan inherit edilmiş bir method'dur. Kullanılmamalıdır.
Delete(Index)	Boolean	Index parametresi olan bir metotdur. LBS Unity Tablolarından isteneni siler. Tablolar birer CollectionItem olarak tanımlı olduklarından silmek istediğimiz Tablonun CollectionItem index'ini bu metoda parametre olarak geçerek silmek istediğimiz tabloyu sileriz. Silme işlemini check etmek için UnityApplication nesnesinin GetLastError veya GetLastErrorString metodlarını kullanabiliriz. İşlemler hafızada yapılmaktadır. Hiç bir şekilde veri tabanındaki tabloları silmez. Sık kullanılan bir metod değildir.
Data Properties
Count	Integer	Tablo listesindeki eleman sayısını verir.
Item(Index)	ITable	Tables listesindeki bir elemanın bilgilerini tutan listedir. Index 0 dan başlar. Döngülerde Count-1'e kadar döndürülmelidir. Bu listedeki tüm elemanlar ITable tipindedir.
Parent	Unknown	ICollection’dan inherit edilmiş bir property’dir. IUnityApplication türünden bir nesne bilgisi tutar. Read veya Write işlemi yapılamaz. Unity Object bu özelliği iç işleyişinde kullanır.
UnityObjects.Tables Tables = Global.UnityApp.Tables;
           string str = "";
           for (int i = 0; i < Tables.Count - 1; i++)
           {
               UnityObjects.Table Table = Tables[i];
               str = str + Table.index.ToString() + "-" + Table.number.ToString() + "-" + Table.name + "\n";
           }
           MessageBox.Show(str);
ITradeGroup
ITradeGroup,

•	Tek bir Ticari işlem grubunun tüm özelliklerini listeler.


Bu Ticari işlem grubu kaydı LBS Unity USYS (Sistem İşletmeni) programı ile tanımlanmış olmalıdır.


Methods
Post	Boolean	Nesne üzerinde yaptığınız ekleme ve değişiklikleri veri tabanına yansıtır.
Data Properties
Attributes 	Long	Ticari işlem grubunun özelliklerini belirttiğimiz parametredir. Ticari işlem gruplarına üç tip özellik atanabilmektedir. Bu özellikler tek tek veya birlikte atanabilirler. Her bir özelliğin kendine özel bir numarası vardır. Bu numaraları işleyerek hangi özelliklerin atandığını anlayabiliriz. Eğer bir den fazla özellik atanmış ise geri dönen değer bu özellik değerlerinin toplam değeri olacaktır.
Code	String	Ticari işlem grubu kodu
Definition	String	Ticari işlem grubu açıklaması
Index	Integer	Index (Sıra) numarasıdır. 0'dan başlar. Atanabilen bir alan değildir. CollectionItem Index'ini döner. Kayıtlara ulaşırken Index numaralarını kullanmak hızlı olmasına karşın önerilmez.
Parent	Unknown	ICollectionItem’dan inherit edilmiş bir property’dir. ITradeGroups türünden bir nesne bilgisi tutar. Read veya Write işlemi yapılamaz. Unity Object bu özelliği iç işleyişinde kullanır.
Reference	Long	Ticari işlem gruplarını kaydederken numaralarını biz vermeyiz otomatik olarak oluşur bu referans numaralarını alabileceğimiz özelliktir.
UnityObjects.TradeGroups TrdGrps =Global.UnityApp.TradeGroups;  //ITradeGroups Object
UnityObjects.TradeGroup TrdGrp = TrdGrps.New();   //ITradeGroup Object

TrdGrp.code = "NewTRDGRPCode";
TrdGrp.Definition = "Definition";
TrdGrp.Attributes = 1;
// Attributes Değerleri
//1 KDV uygulanmayacak
//4 Ek Vergi (ÖTV) Uygulanmayacak
//2 AB KDV Mevzuatı Uygulanacak
//7 Hepsi seçili
//0 Hiç biri seçili değil
//5 KDV ve ÖTV uygulanmayacak
//6 ÖTV uygulanmayacak, AB KDV mevzuatı uygulanacak
//3 KDV uygulanmayacak, AB KDV mevzuatı uygulanacak.


 if (TrdGrp.Post())
 {
  MessageBox.Show("Reference = " + TrdGrp.Reference.ToString() + " Code = " + TrdGrp.code + "   Definition = " + TrdGrp.Definition + " is added" );
 }
 else
 {
     MessageBox.Show(Global.UnityApp.GetLastError()+"-"+Global.UnityApp.GetLastErrorString());
 }


ITradeGroups
ICollection nesnesinden inherited (miras alınmış) bir nesnedir.Ticari işlem Grupları üzerinde işlem yapabilmemizi sağlar.
Tüm elemanları ITradeGroup nesnesi olarak olarak tanımlıdır.
 

Methods
Clear	Yok	ICollection'dan inherit edilmiş bir method'dur.Doğrudan kullanılmamalıdır. Refresh içinden internal olarak kullanılmaktadır.
Delete(Index)	Boolean	Index parametresi olan bir metotdur. Ticari İşlem grupları kayıtlarından isteneni siler. Ticari işlem grupları birer CollectionItem olarak tanımlı olduklarından silmek istediğimiz Ticari işlem grubunun collectionItem index'ini bu metoda parametre olarak geçerek silmek istediğimiz ticari işlem grubunu sileriz. Silme işlemini check etmek için UnityApplication nesnesinin GetLastError veya GetLastErrorString metodlarını kullanabiliriz. İşlemler Post işlemine gerek olmadan veri tabanına yansır. Silme işleminin direkt olarak veri tabanından yapıldığı unutulmamalıdır.
New	ITradeGroup	Yeni bir Ticari işlem grubu tanımı açmak için tüm veri bufferlarını temizler. Elimizde içi boş olan bir ITradeGroup tipinde (CollectionItem) döner. Gerekli alanlarını doldurarak Post işlemi yaparsak veri tabanına eklemiş oluruz. Post işlemi yapmazsak veri tabanına yeni kayıt eklenmez.


Data Properties
Count	Long	Ticari işlem grupları listesindeki eleman sayısını verir.
Item(Index)	ITradeGroup	Listedeki bir elemanın bilgilerini tutan listedir. Index 0 dan başlar. Döngülerde Count-1'e kadar döndürülmelidir. Bu listedeki tüm elemanlar ITradeGroup tipindedir.
Parent	Unknown	ICollection’dan inherit edilmiş bir property’dir. IUnityApplication türünden bir nesne bilgisi tutar. Read veya Write işlemi yapılamaz. Unity Object bu özelliği iç işleyişinde kullanır.
 
 
 
UnityObjects.TradeGroups TrdGrps =Global.UnityApp.TradeGroups;  //ITradeGroups Object
UnityObjects.TradeGroup TrdGrp = TrdGrps.New();   //ITradeGroup Object

TrdGrp.code = "NewTRDGRPCode";
TrdGrp.Definition = "Definition";
TrdGrp.Attributes = 1;
// Attributes Değerleri
//1 KDV uygulanmayacak
//4 Ek Vergi (ÖTV) Uygulanmayacak
//2 AB KDV Mevzuatı Uygulanacak
//7 Hepsi seçili
//0 Hiç biri seçili değil
//5 KDV ve ÖTV uygulanmayacak
//6 ÖTV uygulanmayacak, AB KDV mevzuatı uygulanacak
//3 KDV uygulanmayacak, AB KDV mevzuatı uygulanacak.


 if (TrdGrp.Post())
 {
  MessageBox.Show("Reference = " + TrdGrp.Reference.ToString() + " Code = " + TrdGrp.code + " Definition = " + TrdGrp.Definition + " is added" );
 }
 else
 {
     MessageBox.Show(Global.UnityApp.GetLastError()+"-"+Global.UnityApp.GetLastErrorString());
 }
 
Disconnect
Bu metod Logo ERP ürününe  Connect, UserLogin ve CompanyLogin metodlarıyla açılan tüm connection’ları kapatır.
Disconnect işlemi yapılmadan Connected metodu kullanılarak Connection durumu kontrol edilmelidir.



VB örneği
If Not UnityApp.Connected Then
   If UnityApp.Connect Then
       :
       :
       if UnityApp.Connected then 
          UnityApp.Disconnect
       End if
   End if
End If
C# Örneği
  if(!UnityApp.Connected)
	{
      if(UnityApp.Connect())
       {
         :
         :
       }
     if(UnityApp.Connected)
     UnityApp.Disconnect(); 
   }


DispatchBilling
Programda kesilmiş irsaliyeleri faturalaştırmak için kullanılır. Faturalaştırmak istenen irsaliyenin mutlaka kayıtlı olması gereklidir.
Faturalaştırılacak irsaliyenin Logical Reference bilgisi gereklidir.
Parametre	Type	Açıklama
dRef	Long	Faturalaştıracağınız irsaliyenin Logical Reference bilgisidir (LRef).
iFicheNo	String	Oluşturulacak olan faturanın Numarasıdır.
iDate	Long	Oluşturulacak olan faturanın Tarihidir.
iDoCode	String	Oluşturulacak olan faturanın Belge Numarasıdır.
iSpeCode	String	Oluşturulacak olan faturanın Özel Kodudur.
iCyphCode	String	Oluşturulacak olan faturanın Yetki Kodudur.
genExp1	String	Oluşturulacak olan faturanın 1. Açıklama satırıdır.
genExp2	String	Oluşturulacak olan faturanın 2. Açıklama satırıdır.
genExp3	String	Oluşturulacak olan faturanın 3. Açıklama satırıdır.
genExp4	String	Oluşturulacak olan faturanın 4. Açıklama satırıdır.
chkRight	Boolean	Kullanici yetkisi kontrolunun manual yapilmasi icin parametredir.
invRef	Long	Dönen bir veridir. Boş, Long tipinde bir değişken gönderilmelidir.
opTrans	Boolean	SQL Transaction parametresidir.
refs	String	Birden fazla irsaliye bir faturada birleştirileceğinde kullanılan parametredir. Bu parametrede belirtilen referansların sonuna (son referans dahil) noktalı virgül konulmalıdır.
eInv	Boolean	E-Fatura ve E-Arşiv işaretidir. Eğer irsaliye E-Fatura ve E-Arşiv 'e dönüştürülecek ise True set edilmelidir
vatExceptReason 	String	KDV Muafiyet sebebidir. Faturada eğer KDV muafiyet sebebi set edilecekse doldurulmalıdır.
vatExceptCode 	String	KDV Muafiyet kodu dur.
Return Type	Açıklama
Boolean	İşlemi başarıyla gerçekleştirirse TRUE, diğer durumlarda FALSE döner.
VB Örneği
If UnityApp.DispatchBilling(13, "FAT01", CDate(Date), "DocNumber01", "SpeCode01", "AuthCode01", "Exp01", " Exp02", " Exp03", " Exp04", TRUE, inRef, FALSE, "") Then
 MsgBox ("Post Ok!")
 Else
 MsgBox UApp.GetLastError +" "+ UApp.GetLastErrorString 
 End If 
C# Örneği
int dispRef = 5;     
int invRef = 0;
string vatReason= "17/2-a Sağlık, Çevre Ve Sosyal Yardım Amaçlı İşlemler";
string vatExceptCode = "202";
string refs = "";
bool ok = UnityApp.DispatchBilling(dispRef, "~", 131728655,   "", "", "", "", "", "", "", true, ref invRef, true, refs,true,vatReason, vatExceptCode);
if (ok)
{
    MessageBox.Show("OK");
}
else
{
    MessageBox.Show(UnityApp.GetLastError().ToString() + " : " +  UnityApp.GetLastErrorString().ToString());
}

  

ForceReLogin
Kullanıcı yetkilerinin ve firma parametrelerinin ürün üzerinde ve Logo Objects aracında tazelenmesini sağlayan method'dur.

Paremetre	Type	Açıklama
grpUser	int	0 - Grup, 1 - Kullanıcı
nr	int	Grup / Kullanıcı numarası
blocked	boolean	"Uygulama kullanımını tamamen engelle." checkbox'ındaki değer
msg	string	Kullanıcıya mesaj gönderme.
 
C# Örneği
string msg="Bilgileri Kontrol Ediniz.";
Global.UnityApp.ForceReLogin(1,2,true,msg);

GenerateDocNumbers
Sistem İşletmenindeki “Standart numaralama şablonu oluştur” işlemini yapar. Standart numaralama şablonu Dönemler bazında yapılır.
Verilen Firma ve Döneme Standart numaralama şablonu oluşturulur.



Parametre	Type	Açıklama
FirmNr	Long	Tanımlı olan firmaların numaralarıdır. Parametreye geçilen Firma numarasına sahip firma için standard kayıt numaraları oluşturulur.
PeriodNr	Long	Firmada tanımlı olan Dönemlerin numarasıdır. Parametreye geçilen dönem numarasına sahip dönem için standard numaralama şablonu oluşturulur.
Return Type	Açıklama
Yok	Yok


 
 
 
VB Örneği
Dim FirmNr As Long
Dim PeriodNr As Long  
FirmNr = CLng(InputBox("Input firm number .:"))  
PeriodNr = CLng(InputBox("Input period number .:"))  
UnityApp.GenerateDocNumbers( FirmNr, PeriodNr)
 
 
 
C# Örneği
short FirmNr = 1;
short PeriodNr = 1;
UnityApp.GenerateDocNumbers(FirmNr, PeriodNr);

GetApprovalDate
Tüm program bölümlerinden yapılan işlemler belirli bir tarihten itibaren kesinleştirilir.
Böylece bu tarih ve öncesine ait işlem yapılmaması ve bilgilerin güvenirliği ve güncelliği sağlanır.
Onaylama tüm program bölümlerinden girilen fişler için yapılabilir.


Parametre	Type	Açıklama
ModuleNr	Long	Module bazında onaylama tarihini almak için ilgili module numarası geçilir.
brNr	short	Bölüm numarası.
Return Type	Açıklama
Date	Module bazında dönen onay tarihi bu değişkenle döner.
VB Örneği
Dim ADate As Date  
ADate = UnityApp.GetApprovalDate(5,0)
MsgBox ADate
 
 
 
 
 
C# Örneği
DateTime dtDate =UnityApp.GetApprovalDate(5, 0);
MessageBox.Show(dtDate.ToString());


GetAuthCode
Yetki kodu kontrolünü kolaylaştırmak için konulmuş bir metoddur. Yetki kodlarını kontrol etmek için yetki kodu nesnesini oluşturmak,yetki kodlarını bu nesneye yüklemek ve okuyup işlemek yerine arayacağınız yetki kodununun hızlı bir tanımlanmış olup olmadığını belirten metoddur.
 
Parametre	Type	Açıklama
UserNr	Long	Yetki kodu kontrolü yapılacak kullanıcı numarasıdır.
FirmNr	Long	Yetki kodu kontrolü firma numarasıdır.
AuthType	Integer	Kontrolü yapılacak yetki kodunun tip numarasıdır.
AuthCode	String	Kontrolü yapılacak yetki kodudur.
Return Type	Açıklama
Boolean	Belirtilen kriterlere uygun bir yetki kodu tanımı bulunursa TRUE, diğer durumlarda FALSE değeri döner.


 
C# Örneği
UnityObjects.IAuthCodes AuthCodes = UnityApp.NewAuthCodesObject(3);
bool ok = AuthCodes.GetAuthCodesByNr(2, 158);
if (ok)
  {
    for (int i = 1; i < AuthCodes.ItemCount; i++)
       {
         MessageBox.Show(AuthCodes.GetAuthType(i).ToString() + " : " + AuthCodes.GetAuthCode(i));
       }
  }
else
  {
     MessageBox.Show(ok.ToString());
  }
 


Yetki kodları firma ve kullanıcı bazında tutulduğundan yetki kodu kontrolü yapılacak kullanıcı numrası  ve firma numarası ile yapılacak olan yetki kodu ve bu yetki kodunun tip numarası parametre olarak geçilirse bu kriterlere uygun olan bir yetki kodu tanımı bulunduğunda TRUE, diğer durumlarda FALSE döner.


GetCurrID
Döviz türünün ID bilgisiyle ismine ulaşmak için kullanılır. CurrID parametresinde verilen ID’ye sahip Döviz türü adı CurrName parametresine dönülür.


Parametre	Type	Açıklama
CurrName	String	Döviz türünün adıdır. (in)
CurrID	Integer	Döviz türünün ID numarasıdır. (out)
Return Type	Açıklama
Yok	Yok


 
VB Örneği
Dim CurrName As String
Dim CurrID As Integer
Dim CurrSymbol As String
CurrName = "TRY"
CurrID = 0
Call UnityApp.GetCurrID(CurrName, CurrID)
MsgBox (CurrName & CStr(CurrID))
CurrName = ""
CurrSymbol = ""
Call UnityApp.GetCurrName(53, CurrName, CurrSymbol)
MsgBox ("53 - " & CurrName & " - " & CurrSymbol)
CurrName = ""
CurrSymbol = ""
Call UnityApp.GetCurrName(160, CurrName, CurrSymbol)
MsgBox ("160 - " & CurrName & " - " & CurrSymbol) 
 
C# Örneği
short CurrID = 0;
UnityApp.GetCurrID("USD",out CurrID);
MessageBox.Show(CurrID.ToString());


 
1 : "ABD doları (USD)" 
2 : "Alman markı (DEM)" 
3 : "Avustralya doları (AUD)" 
4 : "Avusturya şilini (ATS)" 
5 : "Belçika frangı (BEF)" 
6 : "Danimarka kronu (DKK)" 
7 : "Fin markkası (FIM)" 
8 : "Fransız frangı (FRF)" 
9 : "Hollanda florini (NLG)" 
10 : "İsveç kronu (SEK)" 
11 : "İsviçre frangı (CHF)" 
12 : "İtalyan lireti (ITL)" 
13 : "Japon yeni (JPY)" 
14 : "Kanada doları (CAD)" 
15 : "Kuveyt dinarı (KWD)" 
16 : "Norveç kronu (NOK)" 
17 : "Sterlin (GBP)" 
18 : "S. Arabistan riyali (SAR)" 
19 : "Avrupa para birimi (XEU)" 
20 : "Euro (EUR)" 
21 : "Azerbaycan Manatı (AZM)" 
22 : "Brezilya Cruzeirosu (BRL)" 
23 : "Bulgar Levası (BLV)" 
24 : "Çek Kuronu (CZK)" 
25 : "Çin Yüeni (CNY)" 
26 : "Estonya Kuronu (EKR)" 
27 : "Gürcistan Marsilisi (GMS)" 
28 : "Hindistan Rupisi (INR)" 
29 : "Hongkong Doları (HKD)" 
30 : "Irak Dinarı (IQD)" 
31 : "İran Riyali (IRR)" 
32 : "İrlanda Lirası (IEP)" 
33 : "İspanyol Pesetası (ESP)" 
34 : "İsrail Şekeli (ILS)" 
35 : "İzlanda Kuronu (ISK)" 
36 : "Kıbrıs Lirası (CYP)" 
37 : "Kırgızistan Somu (KGS)" 
38 : "Letonya Latsı (LTL)" 
39 : "Libya Dinarı (LBD)" 
40 : "Lübnan Lirası (LBP)" 
41 : "Litvanya Litası (LVL)" 
42 : "Lüksemburg Frangı (LXF)" 
43 : "Macaristan Forinti (HNL)" 
44 : "Malaysia Doları (MYR)" 
45 : "Meksika Pesosu (MXP)" 
46 : "Mısır Lirası (EGP)" 
47 : "Barbados Doları (BBD)" 
48 : "Polonya Zlotisi (PLN)" 
49 : "Portekiz Escudosu (PTE)" 
50 : "Romen Leyi (RML)" 
51 : "Rus Rublesi (SYP)" 
52 : "Tayvan Doları (TWD)" 
53 : "Türk Lirası (TRL)" 
54 : "Ürdün Dinarı (JOD)" 
55 : "Yunan Drahmisi (GRD)" 
56 : "Arjantin Pesosu (ARA)"


GetCurrName
CurrID parametresinde verilen ID numarasına sahip olan döviz türü aranır. Bulunma durumu result değişkene set edilir ve arama sonucu olumlu ise CurrName ve CurrSymbol değişkenleri ilgili değerlerleset edilir.
 
Parametre	Type	Açıklama
CurrID	Integer	Döviz türünün ID numarasıdır. (in)
CurrName	String	Döviz türünün ismidir. (out)
CurrSymbol	String	Döviz türünün sembol bilgisidir. (out)
Return Type	Açıklama
Boolean	Parametrede verilen Döviz türü ID'sine sahip bir döviz türüne rastlanırsa TRUE, geçerli bir döviz ID numarası bulunamazsa FALSE olarak set edilir.


 
C# Örneği
string CurrName, CurrSymBol = "";
UnityApp.GetCurrName(53, out CurrName, out CurrSymBol);            
MessageBox.Show(CurrName + "\n" + CurrSymBol);


 


1 : "ABD doları (USD)" 
2 : "Alman markı (DEM)" 
3 : "Avustralya doları (AUD)" 
4 : "Avusturya şilini (ATS)" 
5 : "Belçika frangı (BEF)" 
6 : "Danimarka kronu (DKK)" 
7 : "Fin markkası (FIM)" 
8 : "Fransız frangı (FRF)" 
9 : "Hollanda florini (NLG)" 
10 : "İsveç kronu (SEK)" 
11 : "İsviçre frangı (CHF)" 
12 : "İtalyan lireti (ITL)" 
13 : "Japon yeni (JPY)" 
14 : "Kanada doları (CAD)" 
15 : "Kuveyt dinarı (KWD)" 
16 : "Norveç kronu (NOK)" 
17 : "Sterlin (GBP)" 
18 : "S. Arabistan riyali (SAR)" 
19 : "Avrupa para birimi (XEU)" 
20 : "Euro (EUR)" 
21 : "Azerbaycan Manatı (AZM)" 
22 : "Brezilya Cruzeirosu (BRL)" 
23 : "Bulgar Levası (BLV)" 
24 : "Çek Kuronu (CZK)" 
25 : "Çin Yüeni (CNY)" 
26 : "Estonya Kuronu (EKR)" 
27 : "Gürcistan Marsilisi (GMS)" 
28 : "Hindistan Rupisi (INR)" 
29 : "Hongkong Doları (HKD)" 
30 : "Irak Dinarı (IQD)" 
31 : "İran Riyali (IRR)" 
32 : "İrlanda Lirası (IEP)" 
33 : "İspanyol Pesetası (ESP)" 
34 : "İsrail Şekeli (ILS)" 
35 : "İzlanda Kuronu (ISK)" 
36 : "Kıbrıs Lirası (CYP)" 
37 : "Kırgızistan Somu (KGS)" 
38 : "Letonya Latsı (LTL)" 
39 : "Libya Dinarı (LBD)" 
40 : "Lübnan Lirası (LBP)" 
41 : "Litvanya Litası (LVL)" 
42 : "Lüksemburg Frangı (LXF)" 
43 : "Macaristan Forinti (HNL)" 
44 : "Malaysia Doları (MYR)" 
45 : "Meksika Pesosu (MXP)" 
46 : "Mısır Lirası (EGP)" 
47 : "Barbados Doları (BBD)" 
48 : "Polonya Zlotisi (PLN)" 
49 : "Portekiz Escudosu (PTE)" 
50 : "Romen Leyi (RML)" 
51 : "Rus Rublesi (SYP)" 
52 : "Tayvan Doları (TWD)" 
53 : "Türk Lirası (TRL)" 
54 : "Ürdün Dinarı (JOD)" 
55 : "Yunan Drahmisi (GRD)" 
56 : "Arjantin Pesosu (ARA)"

GetCustTableName
Logo Object Designer da yapılmış custom tablonun ismini döner.
Parametre	Type	Açıklama
tNr	int	Tablo numarası.
fNr	int	Firma numarası.
pNr	boolean	Period numarası.
Return Type	Açıklama
boolean	Tablonun ismi bu format'ta LG_XT056_001 dönüyor.
C# Örneği
string MyCustTableName = UnityApp.GetCustTableName(1, 1, 1);

GetDBConnInfo
Logo ERP ürünlerinin SYS.exe programında programın çalışması için gerekli olan ana ayarlar girilmektedir.

Bu bilgiler şifreli ve binary düzende program kataloğundaki LOGODB.CFG dosyasında tutulmaktadır. Bu dosyada tutulan bilgileri okumak için bu methodu kullanırız. Bize tüm ayarlar ilgili değişkenlerde dönecektir.

Parametre	Type	Açıklama
UserName 	String	SYS’ de girilen Veritabanı Kullanıcı İsmini döner.
Password	String	SYS’ de girilen  Veritabanı Kullanıcı şifresini döner.
DBType	Long	SYS’ de seçilen Veri tabanı tipine ait olan tip numarasını döner.
ServerName	String	Sunucunun ismini döner.
DBName	String	Veritabanı İsmini döner.
DBOwner	String	İç kullanım içindir.
TrnSup	Long	İç kullanım içindir.
cnfgPassW	String	Varsa config dosyasının şifresi.
Return Type	Açıklama
Yok	Yok


 
 
 
VB Örneği
 Dim UserName As String
Dim Password As String
Dim DBType As Long
Dim DBTypeStr As String
Dim ServerName As String
Dim DBName As String
Dim DBOwner As String ' Internal parameter
Dim TrnSup As Long    ' Internal parameter
Dim cnfgPassW String    
  'Fill variables with method
  Call UnityApp.GetDBConnInfo(UserName, Password, DBType, ServerName, DBName, DBOwner, TrnSup,cnfgPassW)
  'Fill DBTypeStr
  Select Case DBType
    Case 2: DBTypeStr = "SQL Server"
    Case 1: DBTypeStr = "Oracle Server"
    Case Else: DBTypeStr = "Unknown DBType please contact 
 LBSTOOLS@logo.com.trLBSTOOLS@logo.com.tr"
  End Select
  'Show variables
  MsgBox " ***    UConfig Info    ***" & Chr(10) & _
         "UserName    : " & UserName & Chr(10) & _
         "Password    : " & Password & Chr(10) & _
         "DB Type     : " & DBTypeStr & Chr(10) & _
         "Server Name : " & ServerName & Chr(10) & _
         "DB Name     : " & DBName
 
 
 
C# Örneği
string UserName,PassWord,serverName,DBName,DBOwner,cfgPass,strDBType = "";
int DBType, trnSup = 0;
UnityApp.GetDBConnInfo(out UserName, out PassWord, out DBType, out serverName,
out DBName, out DBOwner, out trnSup, out cfgPass);
switch (DBType)
    {
       case 2:
       strDBType = "SQLServer";
       break;
       case 1:
       strDBType = "Oracle";
       break;
    }
String txt = "UserName    \t :" + UserName + "\n" +                     
"UserPass    \t :" + PassWord + "\n" +
"ServerType  \t :" + strDBType + "\n" + 
"ServerName  \t :" + serverName + "\n" +
"DBName      \t :" + DBName + "\n";
 MessageBox.Show(txt); 
 
GetFlag
Logo Object içerisinde flag in okunabilmesini sağlayan method'dur.


Parametre	Type	Açıklama
nr	short	flag numarası
Return Type	Açıklama
boolean	İşlemin gerçekleşip gerçekleşmediğini döner.
C# Örneği
MessageBox.Show(Global.UnityApp.GetFlag(122).ToString());

GetLastError
UnityApplication interface nesnesinden ulaştığımız method ve propery’lerle çalışırken oluşan hataları işleyebilmek için kullanılan bir fonksiyondur. Fonksiyonun döndürdüğü değer oluşan son hata numarasıdır.


Return Type	Açıklama
Long	Son operasyondan dönen hatanın numarasını döner.
eğer Tipi
VB Örneği
Dim FirmNr As Long
Dim Ok As Boolean

FirmNr = Val(InputBox("Login olunacak Firma Numarasını giriniz."))
If FirmNr = 0 Then 
 Exit Sub
End If

Ok = UnityApp.CompanyLogin(FirmNr)
If Ok Then
 mdiFrmMain.statMain.SimpleText = mdiFrmMain.statMain.SimpleText + " and   Company logined ( " + CStr(FirmNr) + " )"
 mdiFrmMain.mnuItemCompanyLogout.Enabled = True
 mdiFrmMain.mnuItemCompanyLogin.Enabled = False
 Else
 mdiFrmMain.statMain.SimpleText = " Error code : " & str(UnityApp.GetLastError) & " " & UnityApp.GetLastErrorString
 End If 
C# Örneği
 
if (UnityApp.Connect())
   {
    MessageBox.Show("Connect");
   }
else
   {
    string Err = UnityApp.GetLastError().ToString() + ":" + UnityApp.GetLastErrorString().ToString();
    MessageBox.Show(Err);
   }




GetLastTableErr
Logo Object Designer ile oluşturulmuş olan firma bağımlı, dönem bağımlı, bağımsız veya ek bilgi tablolarıyla ilgili program tablolarında yapılan son işlemle ilgili hata oluşmuş ise bu hatanın numarasını tutar.
Alınan hata numaraları ve anlamlarını Özel Tablo (LOD - Custom Table) İşlem Hataları kısmında yer alıyor.
Return Type	Açıklama
Long	Son tablo operasyonundan dönen hatanın numarasını döner.
 
C# Örneği
int DBErr;
UnityObjects.QTableProxy CustTable_1 = Global.UnityApp.CustTables(3);
if (CustTable_1 == null)
{
    MessageBox.Show("Özel Tablo yarıtılamadı !");
    return;
}
CustTable_1.SearchByRef(1);
DBErr = Global.UnityApp.GetLastTableErr();
if (DBErr > 0)
    MessageBox.Show("SearchByRef DB Error Nr =  " + DBErr);


Özel Tablo (LOD - Custom Table) İşlem Hataları 
GetLastTableErr mehdoduyla alınan hata kodlarıdır. CustTable sınıfı içerisindeki methodlar kullanılarak çalışılırken yapılan tablo ile işlemler sırasında çıkabilecek hataların numaraları alınır ve aşağıdaki liste yardımı ile anlamları açıklanabilir.
Hata No	Hata Mesajı
-1	Yanlış işlem.
-2	Search veya SearchByRef fonksiyonundaki anahtar kelimelere göre konumlanılacak kayıt bulunamadı.
-3	Tanımlanan unique key veya index'e uygun olmayan kayıt hatası gerçekleştiğinden dolayı update işlemi yapılamadı.
-4	İşlem için uygun kayıt bulunamadı.
-5	Cursor'ın konumlanacağı kayıt bulunamadığından Browse işlemi iptal edildi.
-9	Kayıt mevcut değil. Başka bir operasyon veya kullanıcı tarafından silinmiş olabilir.


GetStockPrice
Malzeme fiyat bilgisi binary tutulan fiyat lara sorgu yapılabilmesini sağlayan method'dur.
 
Parametre	Type	Açıklama
iItemRef	int	Malzeme referansı
iVrntRef	int	Variant referansı
iDate	int	Tarih
iTime	int	Zaman
iCostGrpNr	int	Ambar Maliyet grup numarası
iPrType	int	Fiyat tipi
dAmount	double	Miktar
uomRef	int	Birim referansı
branch	short	İşyeri numarası
clCode	string	Cari hesap kodu
fTrdGrp	string	Ticari işlem grup kodu
VATInc	boolean	KDV dahil/Hariç
Return Type	Açıklana
object	İşlem sonucunu döner
C# Örneği
double price = 2;
int itemRef = 24;
int uomref = 5;
short branch = 0;
string clCode = "CRH04";
string trdGrp = "";
bool VatInc; //out parameter
Global.UnityApp.GetStockPrice(itemRef, 1, 131990033, 68864, 0, 8, price, uomref, branch, clCode, trdGrp, out VatInc);//Variant fiyat kartları binary tutulan fiyat lara sorgu yapılabilmesini sağlayan method'dur.
MessageBox.Show(price.ToString());


GetStockPriceList
Malzeme fiyat bilgisi, binary tutulan fiyat listesini sorgu yapılabilmesini sağlayan metottur.

Tiger içerisinde sipariş, irsaliye ve fatura (alış-satış) ekranlarında, satırda bir malzeme seçilip, miktar girilip fiyat kısmında da 3 noktaya tıklandığında ve akabinde tanımlı satış fiyatı (veya tanımlı alış fiyatı) seçildiğinde, eğer o malzemenin birden fazla fiyat tanımı varsa tanımlı fiyatlar ekranı açılmaktadır. Kullanıcı isteğine göre bu fiyatlardan birini seçip diğer işlerine devam etmektedir.
Bir fiyatı bulabilmek için GetStockPrice metodunu kullanabiliyoruz, ancak bu metodun parametreleri sabit. Fiyat ekranına eklenen herhangi bir girdinin bu metoda parametre olarak verilmesi veya çıktı yönteminin değişmesi, bu metodu eski hali ile kullanan çözüm ortaklarımıza iş yükü getirmektedir. Bu yüzden fiyat listesi dönecek yeni bir metot ihtiyacı ortaya çıkmıştır.
Hem girdi, hem de çıktı içerikleri değişse bile geriye dönük destek sağlayacağı öngörülerek, parametre setinin JSON formatında verileceği, çıktının da yine JSON formatında döneceği GetStockPriceList yöntemi geliştirilmiştir.


Parametre	Type	Açıklama
paramJSON	string	Yöntemin ihtiyaç duyduğu tüm parametreler JSON formatında metin tipli bir değişken ile tek parametrede gönderilir.
Return Type	Açıklana
string	Geriye dönen fiyat listesi JSON formatında bir metindir.
paramJSON	Type	Açıklama
iItemRef	int	Malzeme referansı
iVrntRef	int	Variant referansı
iDate	int	Tarih
iTime	int	Zaman
iCostGrpNr	int	Ambar Maliyet grup numarası
iPrType	int	Fiyat tipi
dAmount	double	Miktar
uomRef	int	Birim referansı
branch	short	İşyeri numarası
clCode	string	Cari hesap kodu
fTrdGrp	string	Ticari işlem grup kodu
C# Örneği
string priceParamJson = "

{" + "\"iItemRef\":521," + "\"iVrntRef\":0," + "\"iDate\":132318741," + "\"iTime\":68864," + "\"iCostGrpNr\":0," + "\"iPrType\":8," + "\"dAmount\":1," + "\"uomRef\":1076," + "\"branch\":0," + "\"clCode\":\"\"," + "\"fTrdGrp\":\"\"}
";

string responseJson = Global.UnityApp.GetStockPriceList(priceParamJson);
MessageBox.Show(responseJson);



GetTableName
Logo Object  de yapılmış  tablonun ismini döner.
Parametre	Type	Açıklama
tNr	int	Tablo numarası.
fNr	int	Firma numarası.
pNr	boolean	Period numarası.
Return Type	Açıklama
boolean	Tablonun ismi bu format'ta LG_001_01_ORFICHE dönüyor.
C# Örneği
string MyCustTableName = UnityApp.GetTableName(12, UnityApp.CurrentFirm, UnityApp.ActivePeriod);


 

 
 


   Tablo ID bilgileri
      StC          = 1 ;        { Stok kartlari portu            }
     SrvC       = 2 ;          { Hizmet kartlari portu          }
     SrvTot     = 3 ;         { Hizmet  toplamlari portu       }
     SrvNums    = 53;     { Hizmet ambar rakamlar    AK.  }
     StTot      = 5 ;          { Ambar toplamlari portu         }
     StITots    = 57;        { Stok ambar toplamlari          }
     GenStITots = 59;     { Genel Stok ambar toplamlari    }
     StCompL    = 7 ;       { Karma koli satirlari           }
     StF        = 8 ;             { Stok fiŸleri portu             }
     StTr       = 9 ;             { Stok hareket portu             }
     PromC      = 10;         { Promosyon karti portu          }
     DiscExpC   = 11;     { Indirim masraf portu           }
     OrdF       = 12;     { Siparis fisi portu             }
     OrdTr      = 13;     { Siparis satiri portu           }
     Inv        = 14;     { Fatura Portu                   }
     Prod       = 42;     { Mustahsil makbuzu portu        }
     ClC        = 15;     { Cari Hesap kart portu          }
     ShpI       = 58;     { Sevkiyat Bilgileri             }
     ClF        = 56;     { Cari hesap fisleri portu       }
     ClTr       = 16;     { Cari Hesap hareket portu       }
     ClIntel    = 17;     { Cari Hesap istihbarat portu    }
     ClNum      = 18;     { Cari Hesap risk rakamlari portu}
     ClTot      = 19;     { Cari Hesap toplamlar portu     }
     GenClTot   = 60;     { Cari Hesap genel topl. portu   }
     PayP       = 20;     { Odeme Plani portu              }
     PayLn      = 21;     { Odeme Plani satiri portu       }
     PayTr      = 22;     { Odeme hareketi portu           }
     BnC        = 23;     { Banka karti portu              }
     BnAcc      = 24;     { Banka hesap portu              }
     BnF        = 54;     { Banka fiŸleri portu            }
     BnTr       = 25;     { Banka hareket portu            }
     BnTot      = 26;     { Banka toplamlar portu          }
     GenBnTot   = 61;     { Banka genel toplamlar portu    }
     AccC       = 27;     { Muhasebe kart portu            }
     AccF       = 28;     { Muhasebe fis portu             }
     AccTr      = 29;     { Muhasebe hareket portu         }
     AccTot     = 30;     { Muhasebe toplamlar portu       }
     CostC      = 32;     { Masraf Merkezi portu           }
     CashC      = 33;     { Kasa kart portu                }
     CashTr     = 34;     { Kasa hareket portu             }
     CashTot    = 41;     { Kasa toplamlari portu          }
     GenCashTot = 62;     { Kasa genel toplamlari portu    }
     CSn        = 35;     { Cek / senet portu              }
     CSRl       = 36;     { Cek / senet bordro portu       }
     CSTr       = 37;     { Cek / senet hareket portu      }
     PrL        = 38;     { Fiyat Listesi portu            }
     EntC       = 39;     { Entegrasyon baglanti kodlari   }
     SpeC       = 40;     { Ozel kod tanimlari             }
     CondP      = 43;     { Alis-Satis kosullari portu     }
     FinItemP   = 44;     { Bilanco tabloları satır portu  }
     LogP       = 46;     { Log portu                      }
     FARegs     = 47;     { Sabit kymet kaytlar         }
     FAYrBook   = 48;     { Sabit kymet yl bilgileri     }
     FAAnnCost  = 163;    { SK yıllara yaygın maliyet ve ROFM bilgileri}
     SLog       = 49;     { Sistem Log portu               }
     PermP      = 50;     { Cost PermFile Portu            }
     CAccP      = 55;     { Kart muhasebe referans portu  }
     SlsmanP    = 70;     { Satış elemanları portu         }
     RouteP     = 72;     { Rota tanımları portu           }
     RouteTrP   = 73;     { Rota sıraları portu            }
     TargetP    = 74;     { Satıcı hedef tanımları portu   }
     FolderP    = 75;     { Watermark doküman folder portu }
     IndusP     = 76;     { Endüstri/sektörler             }
     CusVndP    = 77;     { Müşteri-satıcı                 }
     CusInAsg   = 78;     { Müşteri-sektör atama           }
     CusSlAsg   = 71;     { Müşteri-satıcı atama           }
    CusAPAsg   = 79;     { Müşteri CH atama               }
     ContctP    = 80;     { Müşterideki ilgili kişiler     }
     SlsLdP     = 81;     { Satış fırsatları               }
     SlsActP    = 82;     { Satış faaliyetleri             }
     OfferP     = 83;     { Teklifler                      }
     OfAltP     = 84;     { Teklif alternatifleri          }
     OfTrnP     = 85;     { Teklif satırları              }
     CnSlAsg    = 86;     { Satıcı-ilgili kişi atama       }
     ActPeop    = 87;     { Aktivite-İlgili kişiler        }
     SlsFile    = 88;     { Aktivite-Dosyalar              }
     SlsClP     = 91;     { Satıcı-C.Hesap ba§lantısı portu}
     SATI       = 89;     { Faaliyetlerim Ağacı Maddeleri  }
     SATIFilt   = 90;     { Faal. Ağacı Maddl. Filtreleri  }
     ExpCreditCrdP = 92; { İhracat kredi kartları portu   }
     ExpCreditLnP  = 93; { İhracat kredi satırları portu  }
     SlsLHistP  = 253;    { Satış fırsatları tarihçe portu }
     ContSpecP  = 254;    { İlgili kişiler özel günler portu }
     { ----Port Definitions For MRP -------}
     MRPHeadP     = 100;    { MPS veya MRP Başlık Kaydı   }
     MRPLineP     = 101;    { MPS veya MRP Satır Kaydı    }
     MRPPeggingP  = 102;    { MPS veya MRP Bağlantı Kaydı }
     MRPProposalP = 103;    { MPS veya MRP Öneri Kaydı    }
     MRPItemP     = 249;     { MRP-Item bağlantı Kaydı     }
     MRPItemCHGP  = 252;     { MRP-Item bağlantı Kaydı     }
     EmpP         = 106;    { Çalışan tanımları           }
     EmpGrpP      = 105;    { Çalışan grupları            }
     EmpGrpAssP   = 107;    { Çalışan ve grubu bağlantısı }
     SLTrans      = 51;     { Seri / Lot hareketi             }
     InvLocP      = 110;    { Ambar yerleşimleri              }
     SLNum        = 111;    { Seri / Lot Numaraları           }
     InvP         = 112;    { Malzeme - ambar parametreleri   }
     CharC        = 113;    { Malzeme Karakteristik kodları   } 
     CharV        = 114;    { Malzeme Karakteristik değerleri }
     ItmClsAs     = 115;    { Malzeme - sınıf ilişkisi        }
     ItmSups      = 117;    { Malzeme tedarikçiler               }
     ItmBOMAsgn   = 118;    { Malzeme - Üretim reçetesi ilişkisi }
     ItmSubs      = 119;    { Alternatif malzemeler              }
     ItmChAsgn    = 123;    { Malzeme Karakteristik Atama        }
     SelChVal     = 125;    { Malzeme karakteristikleri seçim listesi }
     DistTmp      = 127;    { Malzeme Sınıfı Dağıtım Şablonu     }
     DistLn       = 128;    { Dağıtım Şablonu satırı             }
     UnitSP       = 130;    { Birim Setleri Tanımları                }
     UnitSLP      = 131;    { Birim Setleri Satırları                }
     ItmUnAsgn    = 132;    { Malzeme Birim Set Satırı Atamaları     }
     UnitSCP      = 133;    { Birim Seti Çevrim Bilgileri            }
     SrvUnAsgn    = 134;    { Hizmet Birim Set Satırı Atamaları      }
     QCSet        = 135;    { Kalite Kontrol Karakteristik setleri   }
     QCLine       = 136;    { Kalite Kontrol Karakteristik seti satırları   }
     QCLVal       = 137;    { Kalite Kontrol Karakteristik seti satır değerleri   }
     QAsgn        = 138;    { Kalite Kontrol Karakteristik set atamaları   }
     SlQcAsgn     = 139;    { Seri lot kalite kontrol değeri girişi portu }
     PrdClsCostP  = 140;    { Dönem kapama maliyet kayıtları              }
     TrgPar       = 141;    { Trigger&sp yazımında gerekli olan alanlar   }
     OpP          = 143;    { Operasyon kartı                    }
     OpReqP       = 145;    { Operasyon İhtiyaçları              }
     LbrReqP      = 146;    { Çalışan İhtiyaçları                }
     ToolReqP     = 147;    { Araç İhtiyaçları                   }
     OpAttAsgnP   = 161;    { Operasyona iş istasyonu özellik bağlantısı }
     FactP        = 189;    { Malzeme - fabrika parametreleri    }
     PrevOpAsg    = 192;    { Önceki operasyon atama             }
     RtP          = 193;    { Üretim Rotaları                    }
     RtLnP        = 197;    { Üretim Rota Satırı                 }
     ItmWsTotP    = 176;    { Malzeme, iş istasyonu toplamları   }
     ItmWsDefP    = 177;    { Malzeme, iş istasyonu tanımları    }
     WSP          = 182;    { İş istasyonları                    }
     WSGrpP       = 184;    { İş istasyon grupları               }
     WSGrpAssP    = 185;    { İş istasyonu ve grubu bağlantısı   }
     WSCharC      = 198;    { İş istasyonu özellik tanımları     }
     WSCharV      = 199;    { İş istasyonu özellik değerleri     }
     WSAttAsgP    = 194;    { İş istasyonu özellik atama         }
     WSAttValAsgP = 195;    { İş istasyonu özellik değeri atama  }
     PrdPrm       = 108;    { Firma üretim emri parametreleri    }
     BOMPrm       = 109;    { Reçete Parametreleri               }
     PrmVal       = 155;    { Parametre değerleri                }
     AvgCurrP     = 167;    { Ortalama Döviz Kurları             }
     StdUnitCostP = 183;    { Standart "Malzeme/İş istasyonu/Çalışan" Maliyetleri }
     StdCostPerP  = 186;    { Standart Maliyet Periyodları       }
     StdBOMCostP  = 187;    { Standart Reçete Maliyetleri        } 
     BOMMstP      = 188;    { Üretim Reçeteleri                  } 
     BOMRev       = 190;    { Üretim Reçeteleri Revizyon         } 
     BOMLn        = 191;    { Üretim Reçeteleri Satırları        } 
     CoBOMAsg     = 175;    { Yan ürün BOM bağlantısı            } 
     LnOpAsgn     = 144;    { BOM satırı operasyon ilişkisi      } 
     StdCostP     = 150;    { Standart Maliyetler                }     
     EngLineP     = 156;    { Mühendislik değişikliği satırı     } 
     PrOrdP       = 157;    { Üretim Emri                        } 
     PoLn         = 154;    { Üretim emri satırı                 } 
     DspLineP     = 159;    { İş emri satırı                     } 
     PrevDLAsgn   = 160;    { İş emri sıralaması                 } 
     PegP         = 158;    { İşlem bağlantıları                 } 
     OccP         = 165;    { Kaynak işgal kaydı                 } 
     ProcP        = 149;    { Malzeme temin kaydı                } 
     FcAccP       = 196;    { ÜG Fişi WS-Acc referans portu      }
      DefnFldsCVP  = 168;    { Tanimli Alanlar Deger Portu (Kartlar için)} 
     DefnFldsTVP  = 169;    { Tanimli Alanlar Deger Portu (Fişler için)} 
     StpC         = 171;    { İş emri durma nedeni                 }
     StpA         = 172;    { Durma nedeni - İş istasyonu ataması  } 
     StpT         = 173;    { İş emri durma işlemi                 } 
     DistVehicle    = 200;    { Dağıtım Araçları} 
     DistRtP        = 201;    { Dağıtım Rotaları                   } 
     DistRtLnP      = 202;    { Dağıtım Rota Satırları             } 
     DistOrdP       = 203;    { Dağıtım Emirleri                   } 
     DistOrdLnP     = 204;    { Dağıtım Emirleri Satırları         } 
     CampCrdP       = 205;    { Kampanya Kartları                  } 
     CampCrdLnP     = 206;    { Kampanya satırları                 } 
     OverHeadsP     = 207;    { Genel Gider Kartları               } 
     OvrHdAccRefP   = 208;    { Genel Gider Muhasebe Hesapları     } 
     OvrHdCenterP   = 209;    { Maliyet Yerleri                    } 
     OvrHdCenterLnP = 210;    { Maliyet Yerleri  satırları         } 
     OvHCDistRateP  = 211;    { Maliyet Yerleri Hizmet Dağıtımı    } 
     WSOvHCAsgnP    = 212;    { İş istasyonları Maliyet Yerleri Atamaları } 
     opReqActivityP = 213;    { Operasyon ihtiyaç Aktiviteleri     } 
     InvInfo        = 214;    { Fatura İstihbarat portu            } 
     OvrHdTrans     = 215;    { Genel Gider Hareketleri            }
      reflectP       = 216;    { Yansıtma şablonu                   } 
     reflectLineP   = 217;    { Şablon satırları                   } 
     ActOvrHdDist   = 218;    { Fiili Genel Gider Yükleme          } 
     ActivityAmnt   = 221;    { Gerçek  Activite Miktarları        } 
     RefAsgn        = 222;    { Reflect Assign Table               }
      POAccP         = 223;    { üretim emri fark muhasebe kodları  } 
     StLInfCoef     = 224;    { Stok Satırları Enflasyon Katsayıları} 
     AccLInfCoef    = 225;    { Muhasebe Satırları Enflasyon Katsayıları} 
     DemandFicheP   = 226;    { Talep Fişi                         } 
     DemandLineP    = 227;    { Talep Fişi Satırları               } 
     ProjectP       = 229;    { Projeler Portu                     } 
     DemandPegP     = 230;    { Talep Fişi Karşılama Bağlantı Kaydı } 
     AccDistTempP   = 231;    { Muhasebe Hesap Kartı Dağıtım Şablonu } 
     AccDistTempLnP = 232;    { Muhasebe Hesap Kartı Dağıtım Şablonu Satırları}
     AccDistDetLnP  = 233;    { Muhasebe Hareketleri Detay Satırları          } 
     QProdF         = 234;    { Hızlı Üretim Fişi                             }   
     CompanseAccC   = 235;    { Muhasebe Kartları Karşı Hesaplar   } 
     PackFcP        = 236;    { Paketleme Fişleri }    
     PackFcLnP      = 237;    { Paketleme Hareketleri } 
     PackAsgnP      = 238;    { Paket Atama } 
     RePayP         = 239;    { Kredi kartı geri ödeme planı } 
     CashDistDetLnP = 240;    { Kasa Muhasebe Hareketleri Detay Satırları          }   
     DiscPayLnP     = 241;    { İndirimli Ödeme Satırları }  
     DiscPayTrP     = 242;    { İndirimli Ödeme Hareketleri } 
     GLAssgnP       = 243;    { Muhasebe Bağlantıları } 
     OrdPeggingP    = 244;    { Sipariş Bağlantı Portu } 
     RemHistP       = 245;    { İftar Tarihçesi } 
     RePayPlanP     = 246;    { Geri Ödeme Planı (Yeni) } 
     RePayLineP     = 247;    { Geri Ödeme Plan Satırları } 
     DataExchHistP  = 248;    { Logo Data Exchange History } 
     LDXRecDelReqP  = 329;    { Logo Data Exchange  } 
     EximBusTypP    = 250;    { Export - import Type } 
     MarkP          = 251;    { Marka Kartları Portu } 
     FinHeaderP     = 255;    { Bilanco tabloları başlık portu  }   
     DIIBP          = 95;    { DIIB portu }     
     DIIBLineP      = 96;    { DIIB satırları portu }      
     DIIBBOMLineP   = 97;    { DIIB reçete bilgileri portu } 
     EximInfoP      = 256;   { İthalat // ihracat dosyası   GD,Exim    } 
     ExImWhFicheP   = 257;   { İthalat / Malzeme Dolasim Fisi/Millilestirme Fisi   GA,20040928    } 
     ExImWhTransP   = 258;   { İthalat / Malzeme Dolasim Fisi/Millilestirme Lines  GA,20040928    } 
     ImprtSrvDistRlP= 259;   { İthalatta Kullanılacak Hizmet Kartları İlişkileri } 
     EximLinesP     = 260;   { İthalat // ihracat dosyası satırları, Her stLine için bir satır  kb_ 15.10.2004 } 
     ExImDistFicheP = 261; //mbei { İthalat / Dağıtım Fişleri } 
     EximDistLineP  = 262; //mbei { İthalat / Dağıtım Fiş Satrıları } 
     ExImDistPegP   = 263; //mbei { İthalat / Dağıtım Fiş Satırları Bağlantı Kayıtları } 
     EximHistP      = 264; //md   { İthalat/İhracat Tarihçesi  } 
     GermanyDefP    = 265; //     { Almanya Mevzuatı Genel Amaçlı Tanımlar sv_zus} 
     StFcExtraInfP  = 266; //     { Almanya Mevzuatı İrsaliye Ek Bilgileri sv_zus} 
     InstC          = 267;  (* Taksit Kartı hb 24.03.2005 *) 
     GuarantorP     = 268;     { Fatura ve siparis fisi Kefil Bilgileri 06.04.2005 } 
     WFlowCrdP      = 269; //İş akış kartı - header     
     WFlowLnP       = 270; //İş akış kartı - line 
     WFRoleP        = 271; //İş akışı rollleri 
     WFRoleLnP      = 272; //İş akışı rol satırları 
     AGaugeP        = 273;     { Gösterge parametreleri portu   }   
     AppParamP      = 274;     { Erişim ağacı parametreleri portu }   
     WFTaskP        = 275; //Task OD 20050821 
     WFTaskPerP     = 276; //Task Period OD 20050821 
     AccFcAsgnP     = 277;     { SMM mahsup fişi ve Tecil Terkin Mahsup Fişi- fatura bağlantıları portu } 
     ShftP        = 120;     { Vardiya tanımları               } 
     ShftTP       = 121;     { Vardiya saatleri                } 
     ShftAsP      = 122;     { Vardiya atamaları               } 
     ExcDefP      = 104;     { İstisnai durum atamaları        } 
     WorkDP       = 178;     { Çalışılmayan günler             } 
     ProductLineP = 162;     { Ürün hattı                      } 
     WhListP      = 170;     { Tic.Sistem Par. Ambarlar        } 
     AddTaxCrdP   = 219;     { Özel Tüketim Vergisi Kartı      } 
     AddTaxLnP    = 220;     { Özel Tüketim Vergisi Satırları  } 
     WSPartP      = 181;     { İş istasyonu parçaları          } 
     MCrmRelC     = 174;     {MBS Crm kart bağlantıları             } 
     MCrmRelTr    = 180;     {MBS Crm hareket bağlantıları          } 
     GLConnFiltP  = 179; // muhasebe bağlantı kodları filtreleri 
     AnBudgetPrdP = 278;      { Analitik Bütçe Dönemleri }
      AnBudgetP    = 279;      { Analitik Bütçe } 
     AnBudgetLnP  = 280;      { Analitik Bütçe Satırları } 
     AnBudgetPrdLnP    = 281; { Analitik Bütçe Periyod Satırları } 
     AnBdgtAllocFcP    = 282; //mbbdgt { Analitik Bütçe Tahsis Fişleri} 
     AnBdgtAllocLnP    = 283; //mbbdgt { Analitik Bütçe Tahsis Fişi Satırları } 
     AnBdgtAllocPrdLnP = 284; //mbbdgt { Analitik Bütçe Tahsis Fişi Periyod Satırları } 
     AccDemFcP         = 285; //kb_ 30.11.2005 { Muhasebe Talep Fişleri } 
     AccDemTrP         = 286; //kb_ 30.11.2005 { Muhasebe Talep Fiş Satırları } 
     AccDemDetTrP      = 287; //kb_ 30.11.2005 { Muhasebe Talep Fiş detay satırları } 
     AnBdgtRevFcP      = 288; //mbbdgt { Analitik Bütçe Revizyon Fişleri} 
     AnBdgtRevLnP      = 289; //mbbdgt { Analitik Bütçe Revizyon Fişi Satırları }
 
     AnBdgtRevPrdLnP   = 290; //mbbdgt { Analitik Bütçe Revizyon Fişi Periyod Satırları }
 
     TmpAcAsgnP        = 291;    { Geçici Kabul Bağlantıları }
 
     TaxDeclHdrP       = 293; { E-Beyanname Kayıtları}
 
     TaxDeclLineP      = 294; { E-Beyanname Satırları }
 
     CostDistFicheP    = 295;   { Maliyet Dağıtım Fişleri       }
 
     CostDistLineP     = 296;   { Maliyet Dağıtım Fiş Satrıları }
 
     CostDistPegP      = 297;   { Maliyet Dağıtım Fiş Satırları Bağlantı Kayıtları }
 
     ClCollatrlRiskP   = 298;   { Cari Hesap Teminat Mektubu Risk Bilgileri de }
 
     ColltrlCardP      = 299;   // Teminat kartları
 
     ColltrlRollP      = 300;   { Teminat bordroları }
 
     ColltrlTranP      = 301;   { Teminat bordro hareketleri }
 
     PurchOfferP       = 302;   { Satınalma teklif yönetimi Fişleri }
 
     PurchOfferLnP     = 303;   { Satınalma teklif yönetimi Fiş satırları }
 
     GenericModP       = 304;   { Generic Module Port }
 
     CharSetP          = 305; { Malzeme Özellik Setleri }
 
     CharSetAsgnP      = 306; { Malzeme Özellik Setleri - Özellik Bağlantıları }
 
     VariantP          = 307; { Malzeme Varyantları }
 
     VariantCharAsgnP  = 308; { Malzeme Varyant - Özellik Bağlantıları }
 
     VariantTot        = 309 ;{ Varyant Ambar toplamlari portu         }
 
     VariantITots      = 310; { Varyant ambar toplamlari          }
 
     GenVariantITots   = 311; { Genel Varyant ambar toplamlari    }
 
     BOMVrntFormulaP   = 312; { Üretim Reçete Fomül/Koşul Satırları } //AG recete
 
     VariantGenericP   = 313; { Varyant İstisna ve Fiyat Tanımları }
 
     AutoCardTemplateP = 314; { Otomatik malzeme/varyant kart oluşturma şablon portu}
 
     StTrIOPeggingP    = 315; { Malzeme giriş/çıkış hareketi ilişkisi portu}
 
     ItemCatP          = 316; { Ürün Katalog Tanımları } { MG CATALOG }
 
     ItemCatLnP        = 317; { Ürün Katalog Satırları } { MG CATALOG }
 
     DspLnOprCmpPegP   = 318;   //mbot { İş emri operasyon tamamlama bağlantı satır                   }
 
     QProdLineP        = 319;
 
     TskSheLn          = 320; { Zaman Ayarlı İşelemler Dizisi - asims 1/31/2007}
 
     TSDistListPrt     = 321; { Zaman Ayarlı İşelemler Dizisi Dağıtım Listesi Alt Seçim Ekranı - asims 3/20/2007}
 
     StLnExchP         = 322;
 
     InvExchP          = 323;
 
     StFExchP          = 324;
 
     OrdFExchP         = 325;
 
     OrdLnExchP        = 326;
 
     OffFExchP         = 327;
 
     OffLnExchP        = 328;
 
(*     PerCrdP     = 267;     { personel tanımları portu   }*)
 
     BnCreditCardP     = 330; { Banka Kredileri Kartları } // de Banka Kredileri
 
     BnCrePayTrP       = 331; { Banka Kredi Taksitleri}
 
     UnitBCodeP        = 332; { Birim-barkod bağlantı tablosu }
 
     MarketInfoP       = 333; { Malzeme market bilgileri tablosu }
 
     FaExpenseP        = 334; { Malzeme market bilgileri tablosu }
 
     FaProdNumP        = 335; { Malzeme market bilgileri tablosu }
 
     ApproveP          = 336; { İşyeri bazında onaylama bilgileri}
 
     SuppEvalCrP       = 337;
 
     SuppEvalCrLnP     = 338;
 
     SuppEvalCrLnScrP  = 339;
 
     SuppEvalCrSetP    = 340;
 
     SuppEvalCrSetLnP  = 341;
 
     SuppEvalCrSetSubP = 342;
 
     SuppEvalFicheP    = 343; { RecNr : 1060, PortNr : 1043 }
 
     SuppEvalTransP    = 344; { RecNr : 1061, PortNr : 1044 }
 
     SuppEvalTrSetP    = 345; { RecNr : 1062, PortNr : 1045 }
 
     SuppEvalTrSetSubP = 346; { RecNr : 1063, PortNr : 1046 }    
 
     JournalP          = 347; {İşyeri bazında yevmiye madde numaralama } 
 
     CollCommPayTrP    = 348; {Teminat komisyonu ödemeleri }
 
     FATransP          = 349; { Sabit kıymet işlemleri  Portu  RecNr : 1066, portNr : 1049}  Sabit kıymet zimmetleme
 
     GuaranteeLineP    = 350; { Garanti Kayıtları Portu    RecNr : 1067, portNr : 1050}
 
     MaintanenceLineP  = 351; { Bakım Kayıtları Portu    RecNr : 1068, portNr : 1051}
 
     PerfTestP         = 352; { Performans Testi portu            }
 
     PreAccDistDetLnP  = 353; { Muhasebe Kodları üzerinden dağıtım şablonu detayları portu }
 
     PriceListDivP     = 354; { Fiyat Kartları İşyeri Bilgisi Portu } 
 
     ItmLvlTmpP        = 355; //Satınalma Siparişi Şablon Kartı
 
     ItmLvlTmpLnP      = 356; //Satınalma Siparişi Şablon Satırı
 
     BarcodeTmpP        = 357; //Barkod Şablon Kartı
 
     RetTaxPeggP        = 359;
 
     FaRegNewValP       = 360;
 
     UtilInvMtchP       = 361; //Online Hizmet Eşleştirme Tablosu
 
     UtilInvMtchLnP     = 362; //Online Hizmet Eşleştirme Tablosu Satırı
 
     MblInfoUserP       = 363; //Mobil Bilgi Aboneleri KorhanT
 
     MblInfoGroupP      = 364; //Mobil Bilgi Grupları KorhanT
 
     MblInfUsrGrpLnP    = 365; //Mobil Bilgi Eşleştirme KorhanT
 
     MsgTemplateP       = 366; //Mesaj Şablonu
 
     VehicleWHouseP     = 367;
 
     FicheStatusP       = 368;
 
     VehicleClShipP     = 369;
 
     TaxDeclLineAccP    = 370;
 
     InvenValP          = 371;
 
     InvenValLnP        = 372;
 
     TradGrpPayPlanConP = 373;
 
     FaStopP            = 374;
 
     EBookInfoP         = 375;
 
     LocationsForP      = 376;
 
     EBookDetailDocP    = 377;
 
     CreditLettersP     = 378;
 
     RelatedDocsP       = 379;
 
     DivaMainP          = 380;
 
     DivaTransP         = 381;
 
     AccSubAccAs        = 382;
 
     StTrCostP          = 383;
 
     ApproveUserP       = 384;
 
     DeductLimitsP      = 385;    { Fiyat Limitleri Browseri     }
 
     LeasingRegP        = 386;
 
     LeasingRegLnP      = 387;
 
     LeasingPayP        = 388;
 
     LeasingPayLnP      = 389;
 
     StShpAmntP         = 390;
 
     FicheObjectP       = 391;


GetValue
Logo Object içerisinde Value un okunabilmesini sağlayan method'dur.
Parametre	Type	Açıklama
nr	short	Value numarası
Return Type	Açıklama
int	İşlemin gerçekleşip gerçekleşmediğini döner.


 
C# Örneği
MessageBox.Show(Global.UnityApp.GetValue(122).ToString());


GetViewName
View isimlerini alabileceğimiz bir method'dur.


Parametre	Type	Açıklama
ID	int	View ' in ID 'si
fNr	int	Firma numarası.
pNr	boolean	Period numarası.
Return Type	Açıklama
string	View in ismi dönüyor.
C# Örneği
string MyViewName =Global.UnityApp.GetViewName(12,UnityApp.CurrentFirm,UnityApp.ActivePeriod);
view  id numaraları; 
1 : LV_FFF_PP_BNFLINE
2 : LV_FFF_PP_CLCARD
3 : LV_FFF_PP_CLEKSTRE
4 : LV_FFF_PP_CLFLINE
5 : LV_FFF_PP_CSCARD
6 : LV_FFF_PP_EMUHTOT
7 : LV_FFF_PP_EMUHTOTV1
8 : LV_FFF_PP_EMUHTOTV2
9 : LV_FFF_PP_EMUHTOTV3
10 : LV_FFF_PP_GNTOTCL
11 : LV_FFF_PP_GNTOTST
12 : LV_FFF_PP_GNTOTVRNT
13 : LV_FFF_PP_ORFLINE
14 : LV_FFF_PP_STINVENS
15 : LV_FFF_PP_STINVTOT
16 : LV_FFF_PP_STLINE
17 : LV_FFF_PP_TRDGRP
18 : LV_FFF_PP_VRNTINVENS
19 : LV_FFF_PP_VRNTINVTOT
20 : LV_FFF_CLCARD
21 : LV_FFF_ITEMS
22 : LV_FFF_ORDER_ITEMS
23 : LV_FFF_ORDER_SERVICE
24 : LV_FFF_SALES_ITEMS 3/3
25 : LV_FFF_SALES_ITEMS_TOTAL
26 : LV_FFF_SALES_SERVICE
27 : LV_FFF_SALES_SERVICE_TOTAL


LGSetup
Kullanacağınız LogoObjects.exe dosyası ile uyumlu, bağlantı kuracağınız setlere ya registery yada LGold.ini dosyalarından ulaşılarak bağlantı kurulmaktadır.
Bu durum farklı setlerle işlem yapılmak istenildiğinde karışıklığa neden olmakta idi. Objects'in bağlanacağı seti belirlemek için ya sürekli registery kayıtlarını update etmek yada sürekli LGold.ini dosyasını değiştirmek gerekli idi. Bu ihtiyacı eklenen LGSetup methodu ile bağlanacak set bilgisini run-time verme becerisini kazanmış ve rutin işlemlerden kurtulmuş olmaktayız. Registery kayıtlarına veya LGold.ini ve başka bir dosyaya bir kayıt işlemi söz konusu olmadan kullanılacak set belirlenebilir.Bu bilgi kaydedilmeyeceğinden Disconnect işlemlerinde silineceği unutulmamalıdır. Ayrıca LGold.ini dosyasının kullanıldığı durumlarda bu method çalışmaz dolayısıyla ForWebUse özelliğinin FALSE olarak set edilmiş olmasından emin olmak gerekir.
Parametre	Type	Açıklama
GoldPath 	String	Logo programının kurulu olduğu konum belirtilir.Lengine1.exe başka 
bir deyişle aynı yerde bulunan LogoDB.cfg dosyasının konumu belirtilmektedir.
DataPath 	String	DataPath GoldPath ile aynı bilgi girilmektedir. Eski programlardan kalan bir özelliktir. Şimdi bir işlevselliği kalmamıştır ama boş bırakılmasındansa aynı olmak koşulu ile doldurulması tavsiye edilir.
TaskNumber	Long	Terminal server kullanıyorsanız terminal tanımlarınızda hep aynıerminal ismi tanımlanacaktır. Bağlantı kurulacak client belirlenmek için bu numara kullanılır. Örneğin 5 makinadan terminal server kullanılacaksa terminal tanımlarında hepsinin TermServ gibi bir terminal bilgisayar kodu olacaktır. TaskNumberlarını ise 1..5 gibi verecek olursak TermSrv.01 .. TermSrv.05 gibi işlenecek ve çakışma yaşanmayacaktır.
Language	Long	Set özellikleriyle uyumlu olan dillerin seçilebileceği alandır. Dil default değeri TÜRKÇE'dir. Türkçe dil değeri 1 ve 0'dır.
 
VB Örneği
Call UnityApp.LGSetup("C:\UNITY", "C:\ UNITY ", 0, 1)
If UnityApp.Login("LOGO","LOGO",1,0) Then
MsgBox ("Login OK")
Else
string Err=Cstr(UnityApp.GetLastError)+":"+Cstr(UnityApp.GetLastErrorString)
MsgBox(Err)
End If


C# Örneği
UnityApp.LGSetup("C:\\Logo\\Tiger2", "C:\\Logo\\Tiger2", 0, 1);  
if (UnityApp.Login("LOGO", "", 1, 0))
  {
    MessageBox.Show( "Login OK");
  }
else
  {
    string Err = UnityApp.GetLastError().ToString() + ":" + UnityApp.GetLastErrorString().ToString();
    MessageBox.Show(Err);
  }  


LogoDB


Farklı bir LogoDB.cfg dosyasına bağlanmak için kullanılan komut.

Ayrı bir LogoDB.cfg şu şekilde oluşturabilirsiniz.
Öncelikle her iki DB nin de aynı versiyonda olması gerekir,  aksi halde bu işlem mümkün değildir.
1 – Logo ERP ürünü sistem işletmeni içerisinden Logo ERP ürünü için veritabanı bilgilerini girin, çıkın. Akabinde LogoDB.cfg dosyasını kopyalayıp isminiLogoTigerDB.cfg yapın.
2 - Logo ERP ürünü sistem işletmeni içerisine girip  Logo ERP ürünü için veritabanı bilgilerini girin, çıkın. Akabinde LogoDB.cfg dosyasını kopyalayıpismini LogoSuperDB.cfg yapın.
3 – Logo ERP ürünü sistem işletmeni içerisine girip Logo ERP ürünü hangi DB de çalışacaksa ayarları o DB için yapın.
4 – Logo Objects içerisinde Login olmadan önce , UnityApp.LogoDB(“LogoTigerDB.cfg”) metodunu çağırın ve sonrasında Login metodunu çağırın. Diğer uygulama için de diğer config dosyanızı çağırıp o bağlantı ayarlarıyla işlem yapabilirsiniz.
 

Parametre	Type	Açıklama
fName	int	cfg dosyasının tam ismi
C# Örneği
UnityApp.LogoDB("LogoTigerDB.cfg");


NewAuthCodesObject
Yetki kodları programda ayrıntılı bir yetki düzenlemesini sağlamaktadır. Yetki Kodları erişimi tehlike yaratabileceğinden CAPI olarak adlandırılan bölgede BINARY tipinde şifrelenmiş olarak tutulurlar. Dışardan okunulması ve anlaşılması mümkün olmadığı için Çözüm ortaklarımızın geliştirdikleri entegrasyon araçlarında bu özelliği etkin olarak kullanamadığı gözlenmiştir.
Eklenen bu nesne sayesinde yetki kodlarını düzenleme incelme ve işlemler sırasında kontrolleri kolaylaştırıcı nesne ve ilgili metod ve özellikleri kullanarak Yetki kodları kullanımını etkin şekilde kullanabilmeleri amaçlanmıştır.Program içerisinde işleyiş olarak yetki kodları, işlem yetkileri gibi davranır, UO ile kullanımlarıda benzerdir. Hem yetki kodları hemde işlem yetkileri firmalar bazında kullanıcılara ve gruplara atanabilir veya bunların karışık (merged) halleri kullanılabilir. Yetki kodu nesnesini oluştururken bu ayrımı göz önüne almak gerekir. İşlem yetkileriyle hangi düzeyde çalışılacaksa parametrede verilmelidir. Dönen değer olan IAuthCodes nesnesinin içi boş olacaktır. İlgili methodlar yardımıyla bu nesne üzerinde yetki kodlarıyla ilgili işlemler yapılmaktadır. Nesnenin özellik ve metodları hakkında ayrıntılı bilgiye IAuthCodes bölümünden ulaşabilirsiniz.


Parametre	Type	Açıklama
UserType	Integer	Yaratılacak olan yetki kodu nesnesinin Kullanıcı, Grup veya Merged yetki kodları tipinde oluşturulmasını sağlar. Verilecek olan tipler ARightsTypes tipleridir, yani bir Right (Haklar) nesnesi yaratırken verilen tiplerle aynı değerlerdir.
Return Type	Açıklama
IAuthCodes	UserType parametresinde verdiğiniz değere göre User, Group veya Merged Yetki kodları nesnesi oluşacaktır.
C# Örneği
UnityObjects.IAuthCodes AuthCodes = UnityApp.NewAuthCodesObject(3);
bool ok = AuthCodes.GetAuthCodesByNr(2, 158);
if (ok)
{
    for (int i = 1; i < AuthCodes.ItemCount; i++)
    {
        MessageBox.Show(AuthCodes.GetAuthType(i).ToString() + " : " + AuthCodes.GetAuthCode(i));
    }
}
else
{
    MessageBox.Show(ok.ToString());
}


NewCustomDataObject
TableName parametresinde verilen isimde, ClassName parametresinde verilen isimde ve XMLResID parametresinde verilen ID numarasına sahip bir IData nesnesi oluşturulur. Oluşturduğumuz bu nesneyi kullanacağımız bir alan yoktur. UO bu metodu kendi iç işleyişinde IData nesnelerini kullanmak için oluşturur.
Parametre	Type	Açıklama
TableName	String	Oluşturacağımız Data nesnesiyle ilişkili olacak tablo ismini atarız.
ClassName	String	Oluşturulacak Data nesnesinin adını veririz.
XMLResID	LongInt	Oluşturulacak Data nesnesinin ID’sini geçeriz. Karışıklık yaratmaması için bu numaralar 10000 den büyük olmalıdır.
Return Type	Açıklama
IData	Parametre özelliklerine uygun IData tipindeki nesnemiz oluşturulur.
 
VB Örneği
Dim CustData As Variant    
Set CustData = UnityApp.NewCustomDataObject("L_ITEMS", "LXMLData_Item", 1000)
MsgBox CustData.DataFields(1).fieldName
 
C# Örneği
UnityObjects.Data CustData = UnityApp.NewCustomDataObject("L_ITEMS", "LXMLData_Item", 1000);
MessageBox.Show(CustData.DataFields[1].fieldName);

NewDataObject
 IData nesnesi oluşturmak için kullanılır. IData objesiyle verilen tip'de Kart ve fiş nesneleri oluşturulup ve üzerlerin'de işlemler yapılır. Nesne düzgün oluşturulamadığın'da NULL değeri döner.
Logo ERP ürününe dışarıdan erişimde bulunduğunuzda ilişkileri atlamanız eksik kayıt yapmanız ve veri bütünlüğünü bozmanız mümkündür. Sorgularla INSERT, UPDATE veya DELETE işlemini yapmanız kesinlikle önerilmez. IData nesnesini bu işlemleri veri bütünlüğünü bozmadan yapmak için kullanırız.


Parametre	Type	Açıklama
DataObject	DataObjectType	İşlem yapılacak Kart veya fiş türü bilgisini taşıyan parametredir. Hangi türde işlem yapılacaksa o türde nesne yaratılmalıdır. Yaratılacak nesne türü ilgili tablodan bulunur, ismi veya numarası verilerek kullanılır.
Return Type	Açıklama
IData	Kart ve fişlerde işlem yapmak için gerekli nesneyi oluşturur.


VB Örneği
Dim WSP As Variant
Dim WSPLines As Variant
Dim i As Integer
  Set WSP = UnityApp.NewDataObject(doWstChars)
  WSP.New
  WSP.DataFields.FieldByName("CODE").Value = InputBox("Work Station Property Code", , "ISOZELLIK01")
  WSP.DataFields.FieldByName("NAME").Value = "UnityObjects'ten Work Station Property"
  Set WSPLines = WSP.DataFields.FieldByName("VALUES").Lines
  If WSPLines.AppendLine Then
     WSPLines(0).FieldByName("CODE").Value = "OZELLIK_1"
     WSPLines(0).FieldByName("NAME").Value = "Ozellik 1 Açıklaması"
  End If
  If WSPLines.AppendLine Then
     WSPLines(1).FieldByName("CODE").Value = "OZELLIK_2"
     WSPLines(1).FieldByName("NAME").Value = "Ozellik 2 Açıklaması"
  End If
 
  If WSP.Post Then
     MsgBox "Work Station Property Added"
  Else
     ErrorControl (WSP)
  End If
WSP = Empty
WSPLines = Empty 
 
 
 
C# Örneği
 
UnityObjects.Data purcinvoices = Global.UnityApp.NewDataObject(UnityObjects.DataObjectType.doPurchInvoice);
purcinvoices.New();
purcinvoices.DataFields.FieldByName("TYPE").Value = 6;
purcinvoices.DataFields.FieldByName("NUMBER").Value = "~";
purcinvoices.DataFields.FieldByName("DATE").Value = "04.04.2014";
purcinvoices.DataFields.FieldByName("TIME").Value = 269485337;
purcinvoices.DataFields.FieldByName("ARP_CODE").Value = "CRH01";
purcinvoices.DataFields.FieldByName("POST_FLAGS").Value = 247;
purcinvoices.DataFields.FieldByName("VAT_RATE").Value = 18;
purcinvoices.DataFields.FieldByName("CREATED_BY").Value = 1;
purcinvoices.DataFields.FieldByName("CURRSEL_TOTALS").Value = 1;
purcinvoices.DataFields.FieldByName("DOC_DATE").Value = "04.04.2014";
purcinvoices.DataFields.FieldByName("EINVOICE").Value = 1;
purcinvoices.DataFields.FieldByName("PROFILE_ID").Value = 2;
UnityObjects.Lines transactions_lines = purcinvoices.DataFields.FieldByName("TRANSACTIONS").Lines;
transactions_lines.AppendLine();
transactions_lines[transactions_lines.Count - 1].FieldByName("TYPE").Value = 0;
transactions_lines[transactions_lines.Count - 1].FieldByName("MASTER_CODE").Value = "MLZ02";
transactions_lines[transactions_lines.Count - 1].FieldByName("QUANTITY").Value = 12;
transactions_lines[transactions_lines.Count - 1].FieldByName("PRICE").Value = 3698;
transactions_lines[transactions_lines.Count - 1].FieldByName("UNIT_CODE").Value = "ADET";
transactions_lines[transactions_lines.Count - 1].FieldByName("UNIT_CONV1").Value = 1;
transactions_lines[transactions_lines.Count - 1].FieldByName("UNIT_CONV2").Value = 1;
transactions_lines[transactions_lines.Count - 1].FieldByName("VAT_RATE").Value = 18;
transactions_lines[transactions_lines.Count - 1].FieldByName("BILLED").Value = 1;
transactions_lines[transactions_lines.Count - 1].FieldByName("RET_COST_TYPE").Value = 1;
if (purcinvoices.Post() == true)
  {
     MessageBox.Show("POST OK !");
  }
else
  {
      if (purcinvoices.ErrorCode != 0)
        {
           MessageBox.Show("DBError(" + purcinvoices.ErrorCode.ToString() + ")-" + purcinvoices.ErrorDesc + purcinvoices.DBErrorDesc);
        }
      else if (purcinvoices.ValidateErrors.Count > 0)
             {
                string result = "XML ErrorList:";
                for (int i = 0; i < purcinvoices.ValidateErrors.Count; i++)
                   {
                     result += "(" + purcinvoices.ValidateErrors[i].ID.ToString() + ") - " + purcinvoices.ValidateErrors[i].Error;
                    }
                MessageBox.Show(result);
              }
  }


NewEntegCodes
Muhasebe bağlantı kodları okuma method'u dur.


EntegCodes
Parametre 	Type 	Açıklama 
 GetBinaryAccFilter	int 	  Muhasebe bağlantı kodunu okumak için kullanılır.
 branchFilt	 GrpFilter	 Bölüm Filtresi
brandCodeFilt	CStrFilter	Marka Kodu Filtresi
cardType	GrpFilter	 Kart Tipi Filtresi
clCodeDefFilt	CStrFilter	Cari Hesap Kartı Açıklaması Filtresi
clCodeFilt	CStrFilter	Cari Hesap Kodu Filtresi 
crdCodeFilt1	CStrFilter	Kart Kodu Başlangış filtresi 
crdCodeFilt2	CStrFilter	Kart Kodu Bitiş Filtresi 
cyphCodeFilt1	CStrFilter	Yetki Kodu Başlangıç
cyphCodeFilt2	CStrFilter	Yetki Kodu Bitiş filtresi 
departFilt	GrpFilter	 İşyeri Filtresi
factoryFilt	GrpFilter	Fabrika Filtresi
ficheTypFilt1	GrpFilter	Faturalar.
ficheTypFilt2	GrpFilter	 Cari Hesap Fişleri.
ficheTypFilt3	GrpFilter	 Banka Fişleri
ficheTypFilt4	GrpFilter	Bordrolar
ficheTypFilt5	GrpFilter	Siparişler
ficWsCodeFilt	CStrFilter	 Fişin İş İstasyonu Kodu Filtresi
ficWsNameFilt	CStrFilter	Fişin İş İstasyonu açıklaması 
grpCodeFilt	CStrFilter	Grup Kodu Filtresi
invenFilt	GrpFilter	Ambar numarası Filtresi 
parentCrdFilt	CStrFilter	Bağlantılı kart Filtresi 
speCodeFilt1	CStrFilter	Özel Kod 1 Filtresi 
speCodeFilt2	CStrFilter	Özel Kod 2 Filtresi 
speCodeFilt3	CStrFilter	Özel Kod 3 Filtresi 
speCodeFilt4	CStrFilter	Özel Kod 4 Filtresi 
speCodeFilt5	CStrFilter	Özel Kod 5 Filtresi 
speCodeFilt6	CStrFilter	Özel Kod 6 Filtresi 
tradingGrpFilt	CStrFilter	Ticari İşlem Grubu Filtresi 
usageFilt	GrpFilter	Kullanımda/Kullanım Dışı Filtresi
vrntCodeFilt	CStrFilter	Variant Kodu Fİltresi 
wsCodeFilt	CStrFilter	İş İstasyonu Kodu Filtresi 
wsGrpCodeFilt	CStrFilter	İş İstasyonu Grubu Fİltresi 
wsNameFilt	CStrFilter	İş İstasyonu Açıklaması 
wsSpecCodeFilt	CStrFilter	İş İstasyonu Özel Kodu Filtresi
 
GrpFilter
Parametre	Type	Açıklama
Add	Yok	Yeni bir GrpFilter eklemek için kullanılıyor.
Delete	int	Var olan GrpFilter silmek için kullanılıyor.
Item	int	GrpFilter index ine göre çağırmak için kullanılıyor.
Active	byte	GrpFilter aktif hale getirmek için kullanılıyor. 
Count	int	GrpFilter eleman sayısını çağırmak için kullanılıyor.
doInv	boolean	Öndeğer Evet(1)/Hayır(0)
sel	byte	 

CStrFilter
Parametre	Type	Açıklama
Active	byte	CStrFilter aktif hale getirmek için kullanılıyor.
bVal	string	Aralık tipindeki değerlerin Başlangış Değeri
doInv	boolean	Öndeğer Evet(1)/Hayır(0)
eVal	string	Aralık tipindeki değerlerin Bitiş Değeri
gVal	string	Aralık tipinde olmayan değer
sel	byte	 
 
C# Örneği
 UnityObjects.EntegCodes AccCodes=Global.UnityApp.NewEntegCodes();
 AccCodes=AccCodes.GetBinaryAccFilter(2);            
 MessageBox.Show(AccCodes.crdCodeFilt1.bVal);
 MessageBox.Show(AccCodes.crdCodeFilt1.eVal);
 MessageBox.Show(AccCodes.crdCodeFilt1.gVal);
 MessageBox.Show(AccCodes.crdCodeFilt1.sel.ToString());
 
NewProductionApplication
Üretim emirleriyle işlem yapabilmek için kullanacağımız nesne IProductionApplication'dır. Kullanacağımız ilgili methodların hepsi bu nesne içerisinde bulunmaktadır. Hata yakalama rutinleri bile bu nesnenin içinde mevcuttur.
Return Type	Açıklama
IProductionApplication	Üretim Emirleriyle işlem yapabilmenizi sağlayan nesnedir.
C# Örneği
 UnityObjects.ProductionApplication ProdApp = Global.UnityApp.NewProductionApplication();
 string ficheNo = "~";  //Fiş numarası
 int itemRef = 2; //4  //Mamul referansı
 int BOMRef = 1;  //Reçete referansı
 int RevRef = 1; //Reçete revizyon referansı
 int FactoryNr = 0;   // Fabrika numarası
 int PlnAmount = 1000;   // Planlanan üretim miktarı
 int uomR = 23;  // Mamul kartına bağlı Birim Setinin üretimde kullanılacacak Biriminin referansı
 DateTime targetDate = Convert.ToDateTime("30.03.2015");
 DateTime ficheDate = Convert.ToDateTime("30.03.2015"); // Fiş tarihi
 UnityObjects.PrdItmClsLines ItemClsLines = ProdApp.NewPrdItmClsLines();
 int prodOrdRef = ProdApp.ProdOrderAutomaticGenerate(itemRef, BOMRef, RevRef, targetDate, FactoryNr, PlnAmount,    ItemClsLines, ficheDate, ficheNo, uomR);
 if (prodOrdRef == 0)
   {
      MessageBox.Show(ProdApp.GetLastError().ToString() + " : " + ProdApp.GetLastErrorString().ToString());
   }
 else
   {
      MessageBox.Show("Üretim Emri oluşturulmuştur.");
   }

NewQuery
Query nesnesi oluşturmak için kullanılır. Bu sayede veri tabanında harici yöntemlerle sorgulama yapmak yerine Unity Object içerisinden SQL kullanılabilir. UnityApplication nesnesinden ulaşılan NewQuery metodunu kullanarak IQuery nesnesini oluştururuz.
IQuery nesnesinin Inset, Update, Delete ifadelerini çalıştırmak için kullanabilirsiniz veya Select ifadeleri yazarak sonuç olarak dönen kayıtlar üzerinde yine bu nesnenin ilgili metot ve özelliklerini kullanarak istediğiniz işlemleri yapabilirsiniz. Bir Select ifadesini çalıştırdığımızda sonuç olarak dönen satırlar IQuery nesnesinin Coollection tipindeki IQueryFields nesnesine döner. Bu nesnenin altında her kayıt IQueryField  tipindeki nesnelerde saklıdır.
Return Type	Açıklama
IQuery	Query kullanmak için gerekli olan nesne oluşturur.
 
 
VB Örneği
Dim Query As Variant
Dim SQLClause As Variant
Dim QueryFields As Variant
Dim QueryFields1 As Variant
Dim QueryFields2 As Variant
Dim QueryFields3 As Variant
Dim QueryString As String
Dim RES As Boolean
Dim str As String

Set Query = UnityApp.NewQuery
Set SQLClause = Query.SQLClause
  
Call SQLClause.SelectClause.New("LOGICALREF", "")
Call SQLClause.SelectClause.New("CODE", "")
Call SQLClause.SelectClause.New("NAME", "")
Call SQLClause.FromClause.NewTable("LG_001_ITEMS", "A")
Call SQLClause.WhereClause.New("CARDTYPE", 2, 22, 0)
Call SQLClause.OrderClause.New("CODE", 0)
Query.Statement = SQLClause.SQL
      
If Query.OpenDirect Then
Set QueryFields = Query.QueryFields
RES = Query.First
If RES Then
str = str & _"Item Referance - Item Code  - Item Name" & _
Chr(10)
End If
Do While RES
QueryFields1 = Query.QueryFields.Item(0).Value
QueryFields2 = Query.QueryFields.Item(1).Value
QueryFields3 = Query.QueryFields.Item(2).Value
str = str & _QueryFields1 & " - " &_QueryFields2 & " - " & _ QueryFields3 & _
Chr(10)
RES = Query.Next
Loop
Query.Close
End If
MsgBox str
Query = Empty
SQLClause = Empty
C# Örneği
 string resultTxt = "";
 string tblItems = UnityApp.GetTableName( 1,UnityApp.CurrentFirm, UnityApp.ActivePeriod);
 string sqlTxt = "SELECT TOP 5 LOGICALREF, CODE FROM " + tblItems + " WHERE CARDTYPE  22";
 UnityObjects.Query Qry = Global.UnityApp.NewQuery();
 Qry.Statement = sqlTxt;
 if (Qry.OpenDirect())
   {
     bool res = Qry.First();
     while (res)
          {
            resultTxt = resultTxt + Qry.QueryFields[0].Value.ToString() + "\t" + Qry.QueryFields[1].Value.ToString() + "\n";
            res = Qry.Next();
          }
     MessageBox.Show(resultTxt);
   }
 else
    {
      MessageBox.Show(Qry.DBErrorDesc.ToString());
    }
 Qry.Close();


NewRightsObject
IRights tipinde bir nesne oluşturulur. Yetkilendirme işlemi bu nesne üzerinden yapılır. Nesne düzgün oluşturulamadığında NULL değeri döner.
Yetkilendirme için nesne oluşturulduktan sonra bu nesnenin ilgili metot ve özellikleri kullanılarak yetkilendirmede istediğimiz işlemleri yaparız. Bu metod ve özellikler hakkında ayrıntılı bilgi IRights bölümünde verilmiştir. Bu nesne hakkındaki her bilgiye ilgili bölümden ulaşabilirsiniz.
Parametre	Type	Açıklama
ARightsType	Long	Yaratılacak yetki tipidir. İster tipin index numarası ister değeri geçilebilir.
Return Type	Açıklama
IRights	Yetkilendirme yapabilmek için gerekli nesneyi oluşturur.
Rights Types 
1 : Merge : Kullanıcı ve Group haklarının birleşimidir. 
2 : Group Rights : Grup haklarının okur 
3 : User Rights : Kullanıcı haklarını okur.

Right Type 
1 : Terminal yetkilerine ulaşmak için kullanılır. 
2 : İşlem yetkilerine ulaşmak için kullanılır. 
3 : Firma yetkilerine ulaşmak için kullanılır. 
4 : Firmanın Bölüm yetkilerine ulaşmak için kullanılır. 
5 : Firmanın İşyerleri yetkilerine ulaşmak için kullanılır. 
6 : Firmanın Ambar yetkilerine ulaşmak için kullanılır. 
7 : Firmanın Fabrika yetkilerine ulaşmak için kullanılır. 
11 : Firmanın İşyeri giriş yetkileri 
12 : Firmanın İşyeri çıkış yetkileri 
13 : Firmanın Ambar giriş yetkileri 
14 : Firmanın Ambar çıkış yetkileri
 
VB Örneği
Dim Rights As Variant
Dim b
Dim counter
Set Rights = UnityApp.NewRightsObject(3)
b = Rights.GetRightsByName("Aysu2", 2, 1)  'isyeri 5, bolum 4
Rights.Get (1)
Rights.Set 1, True
Rights.Update
Rights = Empty
C# Örneği
short Rights_Types= 3;
short Right_Type= 6;
short userNr = 2;            
short firmNr = 38;            
short whNr = 1;
UnityObjects.Rights Rights = UnityApp.NewRightsObject(Rights_Types); 
Rights.GetRightsByNumber(userNr, Right_Type, firmNr);
bool right_ok = Rights.Get(whNr);
Rights.Set(whNr, !right_ok);


NewSuppInfoList
Tedarikçi değerlendirme hareketi puanlarının LObjects ile değiştirebilmemizi sağlayan method'dur.


SuppInfoList

Parametre	Type	Açıklama
Item	int	SuppInfoList index numarasına göre işlem yapabiliriz.
Count	int	SuppInfoList istediğimiz alanı getirebiliriz.
C# Örneği
 UnityObjects.SuppInfoList suppInf=Global.UnityApp.NewSuppInfoList();
 suppInf=Global.UnityApp.ReadSupplierTrans(7,suppInf);
 for (int i = 0; i < suppInf.Count-1; i++)
    {
	  MessageBox.Show(suppInf.Item[i].criteriaCode+"-"+suppInf.Item[i].criteriaDef+"-"+suppInf.Item[i].subCrCode+"-"
                 +suppInf.Item[i].subCrDef+"-"+suppInf.Item[i].subCrWeight+"-"+suppInf.Item[i].score);
	}

 suppInf.Item[1].score=50;
 suppInf.Item[2].score=30;
 suppInf.Item[3].score=40;
 Global.UnityApp.UpdateSupplierTrans(7,suppInf);
 
NewUserOptions
"İzle"/"Seçenekler" kısmındaki parametrelerin Logo Objects ile update edebilmemizi sağlayan method'dur.
UserOptions
Parametre	Type	Açıklama
ReadUserOptions	short	Muhasebe bağlantı kodunu okumak için kullanılır.
UpdateUserOptions	short	Muhasebe bağlantı kodunu değiştirmek için kullanılır.
AlertTime	short	Hatırlatıcı Güncelleme Süresi (Dak.)
BuzzerBeep	bool	Renkli Listeler
DBBrwCol	int	Veri İzleme Penceresi İçin Renk
DefBrwFilt	bool	Formlarda İzleme penceresi filtresi 
DefDBFont	string	Formlarda Veri Alanlarında Kullanılacak Baskın Font
DefFormFont	string	Formlarda Başlıklarda Kullanılacak Baskın Font
DefRepFilt	bool	Raporda Öndeğer Filtreler Kullanılsın
ficheType	int	Fiş Türü
FormOutFont	string	Form Yazıcı Çıktılarında Kullanılacak Baskın Font
FormRecovery	bool	Tamamlanmamış Kayıtlar Sistemini Devre Dışı Bırak
FormScale	int	Pencere Büyültme
FormStg	bool	Pencere Boyutları Saklansın
GrdnBack	bool	Gölgeli Arka Plan
HideFromTaskBar	bool	Araç Çubuğunu Gizle
LoadDefLay	bool	Öndeğer Tasarım Kullanılsın
MacroFold	string	Makro Kataloğu
MemGCol	int	Veri Giriş Listeleri İçin Renk
MngColDefaultPage	int	Yönetici Konsolu Açılış Sayfası
MngConsole	bool	Yönetici Konsolu Girişte Açılsın
NavStyle	short	Pencere Boyutları Saklansın
NewMessage	bool	Yeni Mesaj Geldiğinde Uyar
NewTask	bool	Yeni Görev Geldiğinde Uyar
PreLdRes	bool	Kaynak Dosyaları Hafızaya Yüklensin
RefrDBG	bool	Veri İzleme İçin Otomatik Güncelleme
ReportDevice	int	Öndeğer Rapor Ünitesi
RepOutFont	string	Rapor Yazıcı Çıktılarında Kullanılacak Baskın Font
RunAtStartUp	int	Windows Açılırken Otomatik Olarak Çalış
ShowColHint	bool	Kolon Hintleri Gösterilsin
SmartPopUp	bool	Akıllı Menü Kullanılsın
SMSUpdateTime	short	Kısa Mesaj Hizmetleri Güncelleme Süresi (Dak.)
SMSWelcome	bool	Kısa Mesaj Hizmetleri Girişte Açılsın
SystemTray	bool	Simge Durumunda Çalış
TaskUpdateTime	short	Görev Zamanlayıcı Güncelleme Süresi (Dak.)
TempFold	string	Geçici Veri Kataloğu
TreeStyle	int	Erişim Ağacı Tipi
ViewLocked	bool	Değiştirilen Kayıtlar İncelenebilsin
 
 
C# Örneği
UnityObjects.UserOptions usropt=Global.UnityApp.NewUserOptions();
short userNr=1;
usropt.ReadUserOptions(userNr);
usropt.UpdateUserOptions(userNr);
 
OrderBilling
Sipariş fişlerini faturalamak için kullanılan method'dur.
Parametre	Type	Açıklama
ordRef	Long	Faturalaştıracağınız siparişin Logical Reference bilgisidir (LRef).
FicheNo	String	Oluşturulacak olan faturanın Numarasıdır.
dateVal	Long	Oluşturulacak olan faturanın Tarihidir.
doCode	String	Oluşturulacak olan faturanın Belge Numarasıdır.
speCode	String	Oluşturulacak olan faturanın Özel Kodudur.
cyphCode	String	Oluşturulacak olan faturanın Yetki Kodudur.
genExp1	String	Oluşturulacak olan faturanın 1. Açıklama satırıdır.
genExp2	String	Oluşturulacak olan faturanın 2. Açıklama satırıdır.
genExp3	String	Oluşturulacak olan faturanın 3. Açıklama satırıdır.
genExp4	String	Oluşturulacak olan faturanın 4. Açıklama satırıdır.
chkRight	Boolean	Kullanici yetkisi kontrolunun manual yapilmasi icin parametredir.
fcType	Long	Dönen bir veridir. Boş, Long tipinde bir değişken gönderilmelidir.
opTrans	Boolean	SQL Transaction parametresidir.
invRef	Long	Dönen bir veridir. Boş, Long tipinde bir değişken gönderilmelidir. (Geriye Fatura referansı dönmektedir.)
eInv	Boolean	E-Fatura işaretidir. Eğer Sipariş E-Faturaya dönüştürülecek ise True set edilmelidir.
Return Type	Açıklama
Boolean	İşlemi başarıyla gerçekleştirirse TRUE, diğer durumlarda FALSE döner.
C# Örneği
 int ordref = 5;
 int invref = 0;
 short ftyp = 8;
 object dt = 0;
 Global.UnityApp.PackDate(20, 04, 2015, ref dt);
 bool ok = Global.UnityApp.OrderBilling(ordref, "~", Convert.ToInt32(dt), "", "", "", "", "", "", "", true, ftyp, true, ref invref, true);
 if (ok)
   {
     MessageBox.Show("OK" + " " + invref.ToString());
   }
 else
   {
     MessageBox.Show(Global.UnityApp.GetLastError() + " : " + Global.UnityApp.GetLastErrorString());
   }
PackDate
Tarih bilgisi veri tabanında bazı alanlarda Long integer değer olarak tutulur. Bu yöntem tarih bilgisinden kaynaklanabilecek sorunları minimize eder.
Tarih bilgisini LBS Long integer formatına dönüştürmek için bu metodu kullanırız. Methoda Gün, Ay ve Yıl bilgilerini geçeriz. Tarihin formatlanmış hali Long integer değer olarak Date parametresinde döner. Aşağıda Tarih formatlama işlemi sırasında kullanılan formül anlatılmıştır.


In (Geçilen) Parametre	Type	Açıklama
d	Long	Day (Gün) bilgisi rakam olarak geçilir.
m	Long	Mounth (Ay) bilgisi rakam olarak geçilir.
y	Long	Year (Yıl) bilgisi rakam olarak geçilir.
Out (Dönen) Parametreleri	Type	Açıklama
date	Variant	Bu parametre return değerini taşır. Geri dönen değer bu parametrede saklanır.
Hesaplama Formülü;
Tarih = 2^16*Year + 2^8*Month + 2^0*Day yani ;
Tarih = Gün + 256 x Ay + 65536 x Yıl
 
C# Örneği
Object dt = 0;
UnityApp.PackDate(DateTime.Now.Day, DateTime.Now.Month, DateTime.Now.Year, ref dt);
MessageBox.Show(dt.ToString());
PackTime
Zaman bilgisi veritabanında bazı alanlarda Long integer değer olarak tutulur. Bu yöntem zaman bilgisinden kaynaklanabilecek sorunları minimize eder. Zaman bilgisini LBS Long integer formatına dönüştürmek için bu metodu kullanırız. 
Metoda Saat, Dakika ve Saniye bilgilerini geçeriz. Zamanın formatlanmış hali Long integer değer olarak tm parametresinde döner. Aşağıda zaman formatlama işleminde kullanılan formül anlatılmıştır.
In (Geçilen) Parametre	Type	Açıklama
h	Long	Hour (Saat) bilgisi rakam olarak geçilir.
m	Long	Minute (Dakika) bilgisi rakam olarak geçilir.
s	Long	Second (Saniye) bilgisi rakam olarak geçilir.
Out (Dönen) Parametre	Type	Açıklama
tm	Variant	Bu parametre return değerini taşır. Geri dönen değer bu parametrede saklanır.
Hesaplama Formülü;
Zaman = 2^24*Hour + 2^16*Minute + 2^8*Second + 2^0*Milisecond yani ;
Zaman = Milisaniye + 256 x Saniye + 65536 x Dakika + 16777216 x Saat
 
C# Örneği
Object tm = 0;
UnityApp.PackTime(DateTime.Now.Hour, DateTime.Now.Minute,DateTime.Now.Second, ref tm);
MessageBox.Show(tm.ToString());

ReadStrings
Detaylı bilgiler üzerinde çalışmamızı sağlayan fonksiyonlar.
LG_FFF_PP_PERDOC tablosundaki bilgileri silme,okuma ve yazma işlemini yapan method lar. 
DeleteString
Parametre	Type	Açıklama
typ	int	LG_FFF_PP_PERDOC tablosundaki infotyp alanına karşılık geliyor.
ref	int	LG_FFF_PP_PERDOC tablosundaki inforef alanına karşılık geliyor.
C# Örneği
Global.UnityApp.DeleteStrings(5, 65432);
WriteStrings
Parametre	Type	Açıklama
typ	int	LG_FFF_PP_PERDOC tablosundaki infotyp alanına karşılık geliyor.
ref	int	LG_FFF_PP_PERDOC tablosundaki inforef alanına karşılık geliyor.
Str	string	Detaylı bilgilere değer yazmak için kullanıyor.
C# Örneği
Global.UnityApp.WriteStrings(5, 65432,"Sipariş Fişi");
ReadStrings
Parametre	Type	Açıklama
typ	int	LG_FFF_PP_PERDOC tablosundaki infotyp alanına karşılık geliyor.
ref	int	LG_FFF_PP_PERDOC tablosundaki inforef alanına karşılık geliyor.
Str	string	Detaylı bilgilere değeri okumak için kullanıyor.
 
C# Örneği
 string umut = "";
 Global.UnityApp.ReadStrings(5, 4, ref umut);
 MessageBox.Show(umut);

SendMail
Logo Object kütüphanesi içinden e-posta gönderebileceğimiz fonksiyondur.
Parametre 	Type 	Açıklama 
 recps	 string	Maili göndereciğiniz kişinin mail adresi. 
 cc	string	Bilgilendireceğiniz kişinin mail adresi
subject	string	Mailin konusu
msg	string	Gönderilecek olan mesaj
attch	string	Gönderilen maile ek olarak döküman.
showDlg	int	Gönderilene direk mesaj
err	int	Mesaj iletilmediyse hata 
C# Örneği
 int err = 0;
 Global.UnityApp.SendMail("Wdev.Support@logo.com.tr", "Jdev.Support@logo.com.tr", "Deneme SendMail Methodu", "Makale Örnek için Deneme", "", 1,out err);
 MessageBox.Show(err.ToString());

SendSMS
Logo Objets üzerinden sms gönderme imkanı sağlayan method'dur.
Parametre	Type	Açıklama
msg	string	Mesaj metni.
telNo	string	Telefon numaraları (Sonlarında ; olması gerekli)
ErrStr	string	Dönen hata mesajı (GetLastError ile de hata numarası okunabilir.)
 
C# Örneği
   string errMsg;
      
   if (Global.UnityApp.SendSMS("mesaj metni", "5333303132;5322202122;", out errMsg))
   {
      MessageBox.Show("Mesaj ok");
   }
   else
   {
     MessageBox.Show(Global.UnityApp.GetLastError()+"-"+errMsg);     
   }

SetApprovalDate
GetApprovalDate metodunda anlatılan onaylama tarihlerini set etmek için kullanılır. İşlem modül bazında yapıldığı için İlgili modül numarası girilmelidir.
Onay tarihide ilgili parametreye geçilerek onay tarihi set edilmiş olur. Eğer işlem başarıyla gerçekleşmemişse return değer olarak FALSE dönecektir.
Parametre	Type	Açıklama
ModuleNr	Long	Module bazında onaylama tarihini vermek için ilgili module numarası geçilir.
NewDate	Date	Yeni onay tarihini geçtiğimiz parametredir.
brNr	short	Bölüm numarası.
Return Type	Açıklama
Boolean	İşlemin başarıyla gerçekleşirse TRUE, diğer durumlarda FALSE döner.
VB Örneği
Dim ADate As Date   
If UnityApp.SetApprovalDate(5, "30.04.2013",0) Then
   MsgBox "Tarih setedildi"
Else
   MsgBox UnityApp.GetLastErrorString
End If
C# Örneği
DateTime dtDate = DateTime.Now;
bool ok = Global.UnityApp.SetApprovalDate(5, dtDate.Date, 0);


SetDistOrderStatus
Dağıtım emirlerinin statü bilgisini değiştirmek için kullanılan bir metotdur.
Statüsünü değiştirmek istediğimiz Dağıtım emrinin Logical Referance bilgisini LRef parametresine, Aşağıdaki listede verilen değiştirmek istediğimiz statü değerini Stat parametresine, İşlem tarihini ise ProcDate parametresine geçeriz. Sevk tarihi ve geri dönüş tarihi parametreye geçtiğimiz statü yardımıyla belirlenir ve veri tabanındaki alanlarına etkir.
Parametre	Type	Açıklama
Lref	Long	Statüsü değiştirilecek Dağıtım emrinin Logical Referans bilgisidir.
Stat	Integer	Update edilecek Statü bilgisidir. Aşağıda listesi verilmiştir.
ProcDate	Date	İşlem tarihidir.
 
VB Örneği
Dim Lref  As Long
Dim Stat As Integer
Dim ProcDate As Date
Stat = 1
Lref = InputBox("Dagitim Emrinin Logical Referance Bilgisini Girin.:")
ProcDate = Date
Call UnityApp.SetDistOrderStatus(Lref, Stat, ProcDate)
LRef'i 3 olan dağıtım emrini 30.04.2013 tarihinde dağıtıma çıkış işlemi yapar.
C# Örneği
UnityApp.SetDistOrderStatus(3,1,DateTime.Parse("26.04.2013"));
LRef'i 3 olan dağıtım emrini 30.04.2013 tarihinde dağıtıma çıkış işlemi yapar.
Stat
Değer	Açıklama
1	Dağıtıma Çıkış (Sevk ediliyor)
2	Geri Al (Dağıtıma Çıkış) (Öneri Durumuna)
3	Dağıtımdan Dönüş (Sevk Edildi)
5	Geri Al (Dağıtımdan Dönüş) (Sevk ediliyor durumuna)

ShredDispatch
İrsaliye parçalama işlemini Lobjects içerisinde yapan method'dur.
Parametre	Type	Açıklama
dispref	int	İrsaliye referansı.
ficheNo	int	Fiş numarası
dateVal	int	Tarihi
time	int	Zaman
doCode	string	Belge numarası.
speCode	string	Özel kod
cyphCode	string	Yetki kodu.
slsmanCode	string	Satış eleman kodu
projCode	string	Proje kodu
shipClCode	string	Sevkiyat hesabı cari hesap kodu.
shipAddr	string	Sevkiyat adresi
docTrNo	string	Döküman izleme numarası
stInfos	StLnInfoList	İrsaliye satır listesi.
Return Type	Açıklama
int	İşlemin gerçekleşip gerçekleşmediğini döner.
StLnInfoList
Parametre	Type	Açıklama
Item	int	İrasliye satır bilgisi.
Count	int	İrasliye satır sayısı.
C# Örneği
 UnityObjects.StLnInfoList stInfos=Global.UnityApp.NewStLnInfoList();
 stInfos=Global.UnityApp.GetStLnInfoList(1,stInfos);
 stInfos.Item[0].amount=4;
 object dt=0;
 object tm=0;
 Global.UnityApp.PackDate(17, 05, 2013,ref dt);
 Global.UnityApp.PackTime(10, 05,50, ref tm);
 int nr = Global.UnityApp.ShredDispatch(1, "~", Convert.ToInt32(dt),Convert.ToInt32(tm), "XXX", "aa", "bb", "", "", "", "", " ", stInfos);
 if (nr!=0)
   {
     MessageBox.Show("irsaliye ref:"+nr.ToString());
   }
 else
   {
      MessageBox.Show("hata :" + Global.UnityApp.GetLastError() +" - " + Global.UnityApp.GetLastErrorString());
   }
UPackDate
PackDate metoduyla formatlanmış veya veritabanından okunmuş Long integer tipindeki tarih bilgisinin anlaşılır hale dönmesi için formatının açılması gerekir. 
Elimizdeki Long integer tipindeki tarih bilgisini date parametresine geçeriz. Gönderdiğimiz format çözülerek d, m ve y (Gün, Ay, Yıl) parametrelerine dönüştürülerek döner.
In (Geçilen) Parametre	Type	Açıklama
date	Long	Bu parametre çözecek olduğunuz tarih bilginin Long integer değerini geçeriz.
Out (Dönen) Parametre	Type	Açıklama
d	Variant	Day (Gün) bilgisi rakam olarak döner.
m	Variant	Mounth (Ay) bilgisi rakam olarak döner.
y	Variant	Year (Yıl) bilgisi rakam olarak döner.
C# Örneği
int dt = 131925017;
Object d = 0;
Object m = 0;
Object y = 0;
UnityApp.UPackDate(dt, ref d, ref m, ref y);
MessageBox.Show(d.ToString() + "." + m.ToString() + "." + y.ToString());
 


UPackTime
PackTime metoduyla formatlanmış veya veritabanından okunmuş Long integer tipindeki zaman  bilgisinin anlaşılır hale dönmesi için formatının açılması gerekir. 
Elimizdeki Long integer tipindeki zaman bilgisini tm parametresine geçeriz. Gönderdiğimiz format çözülerek h, m ve s (Saat,Dakika,Saniye) parametrelerine dönüştürülerek döner.
In (Geçilen) Parametre	Type	Açıklama
tm	Long	Bu parametre çözecek olduğunuz zaman bilginin Long integer değerini geçeceğiniz parametredir.
Out (Dönen) Parametre	Type	Açıklama
h	Variant	Hour (Saat) bilgisi rakam olarak döner.
m	Variant	Minute (Dakika) bilgisi rakam olarak döner.
s	Variant	Second (Saniye bilgisi rakam olarak döner.
C# Örneği
int tm = 153230105;
Object s = 0;
Object m = 0;
Object h = 0;
UnityApp.UPackTime(tm, ref h, ref m, ref s);
MessageBox.Show(h.ToString() + ":" + m.ToString() + ":" + s.ToString());


UpdateGlobalCustTables
LOD ile oluşturulmuş veya güncellenmiş tabloların LObject ile DB tarafında oluşturma ve güncelleme işlemini gerçekleştiren method'dur.
 
C# Örneği
UnityObjects.Firms Firms =Global.UnityApp.CAPI.Firms;
Firms[0].UpdateCustomTables();
UnityObjects.Periods Perds = Global.UnityApp.CAPI.Firms[0].Periods;
Perds[0].UpdateCustomTables();
Global.UnityApp.UpdateGlobalCustTables();


UserLogin
Kullanıcıların Logo ERP ürünün’e login olması için kullanılır.Logo ERP ürünüyle çalışmanın ikinci adımıdır. Bu metod Connect işleminden sonra kullanılır.
Kullanıcının başarılı bir şekilde connect olması durumunda TRUE, diğer durumlarda FALSE değeri döner. UserLogin FALSE dönerse Application nesnesinin GetLastError, GetLastErrorString metodları ile hata yakalanabilir. UserLogin metodu kullanılmadan Connected metodu ile connection durumu kontrol edilebilir.
 
Parametre	Type	Açıklama
UserName	String	Uygulamada tanımlanmış kullanıcı isimleridir. Kullanıcılar Logo ERP ürünü Sistem İşletmeni programı ile tanımlanmış olmalıdır.
Password	String	Kullanıcının şifresidir. Logo ERP ürünü Sistem İşletmeni programı ile tanımlanmış olan kullanıcı şifreleridir.
Return Type	Açıklama
Boolean	UserLogin işleminin gerçekleşme durumunu döner.
VB Örneği
Dim UserName As String
Dim Password As String
Dim Ok As Boolean
  
  
UserName = InputBox("User Name")
If UserName = "" Then 
 Exit Sub
End If  
Password = InputBox("Password")  
Ok = UnityApp.UserLogin(UserName, Password)
If Ok Then
  MsgBox("Login Ok")
 Else
 string Err = Cstr(UnityApp.GetLastError) + ":" + Cstr(UnityApp.GetLastErrorString)
 MsgBox(Err)
 End If
End Sub 
C# Örneği
if ((UserName != "") && (UnityApp.Login(UserName, UserPass, Convert.ToInt16(FirmNr), 0)))
  {
    MessageBox.Show("Login OK");
  }
else
 {
    string Err = UnityApp.GetLastError().ToString() + ":" + UnityApp.GetLastErrorString().ToString();
    MessageBox.Show(Err);
 } 


UserLogout
Kullanıcıların Logo ERP ürünün’den logout olması için kullanılır. Logout olabilmek için Login işleminin yapılmış olması gerekir. UserLogout metodu kullanılmadan LoggedIn metodu ile Login durumu durumu kontrol edilmelidir.
 
 
 
VB Örneği
If UnityApp.UserLogin("UserName", "Password") Then
   :
   UnityApp.UserLogout
End If
 
 
 
C# Örneği
if(UnityApp.UserLogin("UserName","Password")
 {
   :
   UnityApp.UserLogout();
 } 

Version
Logo object Kütüphanesinin Versiyon numarasını almanıza yarar. Bu numara  TigerPlus.EXE, TigerEnterprise.EXE, versiyon numarasıyla aynı olmalıdır.
Return Type	Açıklama
WideString	Logo Objects Kütüphanesi versiyon numarasıdır.
 
 
VB Örneği
MsgBox UnityApp.Version
C# Örneği
MessageBox.Show(UnityApp.Version());


DoIntegration
Logo Objects ile satın alma veya satış faturasının muhasebeleştirilmesini sağlamak için kullanılan method'dur.
 
Parametre	Type	Açıklama
modNr	int	Modül numarası
1 - Malzeme fişi
2 - Alım faturası
3 - Satış faturası
4 - Cari hesap fişi
5 - Çek/Senet
6 - Banka fişi
7 - Kasa fişi
invRef	int	Fatura referansı
MergeLine	boolean	Muhasebe Kodu Girilmemiş Satırlar. 0 - İşlem Yapılmayacak, 1 - Karttan Okunacak
EmptyAccLine	int	Muhasebe Kodu Girilmemiş Satırlar. 0 - İşlem Yapılmayacak, 1 - Karttan Okunacak
Return Type	Açıklama
boolean	işlem başarılı bir şekilde tamamlanmış ise TRUE, yoksa FALSE.
C# Örneği
bool res = Global.UnityApp.DoIntegration(Convert.ToInt16(3),Convert.ToInt16(17), true, Convert.ToInt16(0));
MessageBox.Show(res.ToString());


Diğer methodlar

ExtensionTablesProc (FirmNr,PeriodNr,0) :Genel tablolar,firma bağımlı tablolar,dönem bağımlı tabloların oluşturulmasında ve güncellenmesinde kullanılır.
ExtGlobalTableProc(0) : Logo Object Designer ile oluşturulan genel tabloların oluşturulması veya güncellenmesi için kullanılır.
ExtFirmTableProc(FirmNr, 0) : Logo Object Designer ile oluşturulan Firma bağımlı tabloların oluşturulması veya güncellenmesi için kullanılır.
ExtPeriodTableProc(FirmNr, PeriodNr, 0) :Logo Object Designer ile oluşturulan Dönme bağımlı tabloların oluşturulması veya güncellenmesi için kullanılır.
GetAppPath :Programın kurulu olduğu path gösterir.
GetMemUsageKB :Logo Object.exe memory boyutunu dönderir.
GetPID :Logo Object propestid veren method'dur.


AuthCodes
IApplication nesnesinin NewAuthCodesObject metodunu kullanarak IAuthCodes nesnesi oluşturulur. Bu nesne oluşturulurken tipi user, group veya merged olarak belirtilmiştir. Oluşan bu nesnenin içeriği boştur, nesnenin ilgili metodlarıyla yetki kodları okunur, üzerlerinde çalışılır ve değişiklikler veri tabanına gönderilebilir.
Programda yetki kodları Gruplar veya Kullanıcılar üzerinde tanımlanabilir. Bir başka durum ise her iki tanımlarında çakışma durumudur. Böyle bir durumda öncelik kullanıcı yetki kodlarındadır ama grup yetki kodlarıda kullanıcıyı etkilemektedir. Hem grup hakları hemde kullanıcı haklarının kesişimlerinde işlem yapmak için ise merged tipinde nesne kullanmalıyız. Bu aşamada dikkat edilmesi gereken durum merged haklarda sadece okuma yapılabileceği update işlemlerinin yapılamıyacağıdır. Çünkü merged haklar group ve user haklarından okunup işlenerek getirilen haklardır, tutulduğu bir yer yoktur. Aşağıda nesne üzerinde kullanacağımız metod ve özellikler ayrıntılı olarak anlatılmıştır.


Methods	Return Type	Açıklama
DelAuthCode	Boolean	IAuthCodes nesnesi içerisindeki yetki kodları listesinde istenen sıra numarasındaki yetki kodu tanımını siler. Liste içerisinde, parametre olarak geçilen ListID sıra numarasındaki yetki kodu silinebilirse TRUE, diğer durumlarda FALSE döner.
GetAuthCode	String	IAuthCodes nesnesi içerisindeki yetki kodları listesinde istenen sıradaki yetki kodunu alır. Liste içerisinde, parametre olarak geçilen ListID sıra numarasındaki yetki kodunu döner. Yetki kodu bulunamazsa "" (boşluk) döner.
GetAuthCodesByNm	Boolean	İstenilen kullanıcının belirtilen firmadaki yetki kodları listesini IAuthCodes nesnesine yükler. Parametreleri Kullanıcı ismi ve Firma numarasıdır. Yükleme başarılırsa TRUE, diğer durumlarda FALSE değer döndürür.
GetAuthCodesByNr	Boolean	İstenilen kullanıcının belirtilen firmadaki yetki kodları listesini IAuthCodes nesnesine yükler. Parametreleri Kullanıcı numarası ve Firma numarasıdır. Yükleme başarılırsa TRUE, diğer durumlarda FALSE değer döndürür.
GetAuthType	Integer	IAuthCodes nesnesi içerisindeki yetki kodları listesinde istenen sıradaki yetki kodununun tip bilgisini döner. Liste içerisinde, parametre olarak geçilen ListID sıra numarasındaki yetki kodunun tip bilgisini döner. ListID liste dışında verilirse tip okunamıyacak ve 0 dönecektir.
GetListID	Integer	IAuthCodes nesnesine yüklenmiş yetki kodları listesi içerisinde istenilen yetki kodunun listedeki sırasını bulmak için kullanılır. Parametrede verilen yetki kodu türü ve yetki koduna uyan tanımı liste içinde arar ve bulduğunda yetki kodu tanımının liste içindeki sırasını döner. Liste sırası bulunamazsa -1 döner.
SetAuthCode	Yok	IAuthCodes nesnesine yüklenmiş listenin ListID parametresinde verilen elemanına yine parametrede verilen AuthType tipinde Value yetki kodunu eklemektedir. Yetki kodu tip numarasının 1 den küçük olamıyacağına ve yetki kodunun boş olmamasına dikkat edilmelidir.
Update	Boolean	IAuthCodes nesnesine yüklenmiş olan liste üzerinde yapılmış olan değişiklikleri veri tabanına aktarması için kullanılır.
Data Properties	Type	Açıklama
FirmNr	Long	Yetki kodu listesinin tanımlandığı firma numarasıdır.
ItemCount	Integer	IAuthCodes nesnesine yüklenmiş bulunan yetki kodu listesindeki eleman sayısıdır.
UserNm	String	Yetki kodu listesinin tanımlandığı kullanıcı ismidir.
UserNr	Long	Yetki kodu listesinin tanımlandığı kullanıcı numarasıdır.
UserType	Integer	Yetki kodu listesinin tipidir. (Kullanıcı/Grup)


AuthCodes Methods
DelAuthCode
Yetki kodları listesinde yetki kodu tanımlarını silmek için kullanılmaktadır. Liste içerisinde silinmek istenen kayıdın liste numarası bilinmelidir. Metoda liste numarası geçilerek istenilen kayıt silinecektir. İşlemin başarıyla gerçekleştirilmesi durumunda TRUE, diğer durumlarda FALSE değeri döner. İşlem belleğe yüklenmiş olan liste üzerinde yapılmaktadır. Değişikliklerin veri tabanına yansıması için UPDATE metodunun işletilmesi gerekir.
Parametre	Type	Açıklama
ListID	Long	IAuthCodes nesnesine yüklenmiş olan yetki kodları listesindeki silinmek istenen item numarasıdır.
Return Type	Açıklama
Boolean	Listedeki eleman silinebilirse TRUE, diğer durumlarda FALSE değer döner.


GetAuthCode
Yetki kodları listesinde yetki kodu tanımlarını okumak için kullanılmaktadır. Liste içerisinde okumak istenen kayıdın liste numarası bilinmelidir. Metoda liste numarası geçilerek istenilen kayıt okunacaktır. İşlemin başarıyla gerçekleştirilmesi durumunda, okunan kaydın yetki kodu döndürülür, diğer durumlarda "" (boşluk) döner. 
Parametre	Type	Açıklama
ListID	Long	IAuthCodes nesnesine yüklenmiş olan yetki kodları listesindeki okunmak istenen item numarasıdır.
Return Type	Açıklama
String	Listedeki elemanın yetki kodunu döner.

GetAuthCodesByNm
Yetki kodları listesini IAuthCode nesnesine Kullanıcı ismini kullanarak yüklemek için kullanılır. Hangi firmaya ait olan yetki kodları listesinin yüklenileceği bilinmelidir. Firma numarası ve yetki kodları çekilecek olan Kullanıcı ismiyle birlikte Liste okunur. Liste başarıyla IAuthCodes nesnesine yüklenebilirse TRUE, diğer durumlarda FALSE döner. Listedeki eleman sayısını ITEMCOUNT özelliğinden öğrenebiliriz.
Parametre	Type	Açıklama
UserNm	String	Kullanıcı ismidir. Yetki kodları okumak için kullanıcı ismi tercih edilirse kullanılacak metodtur.
FirmNr	Long	Firma numarasıdır. Yetki kodları okunulacak olan firma numarasıdır.
Return Type	Açıklama
Boolean	Listenin başarıyla okunması durumunda TRUE, diğer durumlarda FALSE değeri döner.
 
GetAuthCodesByNr
Yetki kodları listesini IAuthCode nesnesine Kullanıcı numarasını kullanarak yüklemek için kullanılır. Hangi firmaya ait olan yetki kodları listesinin yüklenileceği bilinmelidir. Firma numarası ve yetki kodları çekilecek olan Kullanıcı numarası ile birlikte liste okunur. Liste başarıyla IAuthCodes nesnesine yüklenebilirse TRUE, diğer durumlarda FALSE döner. Listedeki eleman sayısını ITEMCOUNT özelliğinden öğrenebiliriz.
Parametre	Type	Açıklama
UserNr	Long	Kullanıcı numarasıdır. Yetki kodları okumak için kullanıcı numarası tercih edilirse kullanılacak metodtur.
FirmNr	Long	Firma numarasıdır. Yetki kodları okunulacak olan firma numarasıdır.
Return Type	Açıklama
Boolean	Listenin başarıyla okunması durumunda TRUE, diğer durumlarda FALSE değeri döner.

GetAuthType
IAuthCodes nesnesi içerisindeki yetki kodları listesinde istenen sıradaki yetki kodununun tip bilgisini döner. Liste içerisinde, parametre olarak geçilen ListID sıra numarasındaki yetki kodunun tip bilgisini döner. ListID liste dışında verilirse tip okunamıyacak ve 0 dönecektir. 
 
Parametre	Type	Açıklama
ListID	Long	IAuthCodes nesnesine yüklenmiş olan yetki kodları listesindeki okunmak istenen item numarasıdır.
Return Type	Açıklama
AuthCodeTypes 
Listedeki elemanın yetki kodu tipini döner. Integer tipinde bir değerdir.
GetListID
IAuthCodes nesnesine yüklenmiş olan yetki kodları nesnesinde  bir yetki kodunu aramak için kullanılmaktadır. Aranmak istenilen yetki kodunun tip numarası bilinmelidir. Yetki kodlarının tip numaraları AuthCodesTypes listesinde verilmiştir. Listede belirtilen tip ve koda uygun kayıt bulunursa liste numarası döndürülecektir, diğer durumlarda -1 döner.
Parametre	Type	Açıklama
AuthType	Integer	Yetki kodunun tipidir. Örneğin Malzeme kartı veya Alım irsaliyesine tanımlanmış olan yetki kodlarını ayırmak için kullanılan tip numarası.
AuthCode	String	Yetki kodudur.
Return Type	Açıklama
Integer	IAuthCodes nesnesinde yüklenmiş olan listede belirtilen tipte ve koda sahip olan yetki kodu tanımı liste içerisinde bulunursa liste numarası dönülecektir.
 
SetAuthCode
 IAuthCodes nesnesine yüklenmiş olan listedeki elemanlar üzerinde değişiklik yapabilmek için kullanılır. Listede değiştirilmek istenilen kayıdın liste numarası verilerek bulunur ve parametrelerde belirtilen tip ve kod bilgileriyle kayıt güncellenir. Güncelleme işleminin bellekte yaratılmış olan nesne üzerinde yapıldığı unutulmamalıdır. Değişikliklerin veri tabanına etkilemesi için UPDATE metodunun işletilmesi gerekir.  
Parametre	Type	Açıklama
ListID	Long	Set edilecek olan listedeki elemanın numarasıdır.
AuthType	Integer	Set edilecek olan yetki kodunun tip numarasıdır.  AuthCodeTypes listesinden bulunmalıdır.
Value	String	Set edilecek olan yetki kodudur.

Update
Bellekte oluşturulmuş olan IAuthCodes nesnesinde yapılan değişiklikler bellekte yapılmış olacaktır. Bu nesne bellekten silindiği zaman değişikliklerde kaybolmuş olur. Eğer değişikliklerin kalıcı olmasını istersek, bellekteki nesne üzerindeki değişiklikleri veri tabanına aktarmamız gerekir. Bu işlem için UPDATE metodunu kullanırız. UPDATE metodu değişiklikleri başarılı bir şekilde veri tabanına kaydederse TRUE, diğer durumlarda FALSE değerini döndürür.
Return Type	Açıklama
Boolean	Nesne üzerinde (bellekte) yapılmış olan değişiklikleri veri tabanına yansıtmak için kullanılan metoddur.

 
C# Örneği
UnityObjects.IAuthCodes AuthCodes = Global.UnityApp.NewAuthCodesObject(3);
bool ok = AuthCodes.GetAuthCodesByNr(2, 158);
if (ok)
{
    for (int i = 1; i < AuthCodes.ItemCount; i++)
    {
        MessageBox.Show(AuthCodes.GetAuthType(i).ToString() + " : " + AuthCodes.GetAuthCode(i));
    }
}
else
{
    MessageBox.Show(ok.ToString());
}

Field
Tek bir alanının tüm özelliklerini listeler. Programın kullandığı alanları silmek veya değiştirmek düzgün çalışmasını engelleyecek, veri bütünlüğünün bozulmasına sebep olacaktır. Dikkatli kullanılmalıdır.
Methods	ReturnType	Açıklama
InternalLoad	Yok	Tabloların Fields property’sine erşildiğinde itemları doldurmak için internal olarak çağırılır. Kullanılmamalı.
Data Properties	Type	Açıklama
Size	Integer	Alanın büyüklüğünü byte cinsinden döner.
Name	String	Alanın ismini döner.
Index	Integer	Index (Sıra) numarasıdır. 0'dan başlar. Atanabilen bir alan değildir. CollectionItem Index'ini döner. Kayıtlara ulaşırken Index numaralarını kullanmak hızlı olmasına karşın önerilmez.
Parent	Unknown	ICollectionItem’dan inherit edilmiş bir property’dir. IFields türünden bir nesne bilgisi tutar. Read veya Write işlemi yapılamaz. Unity Object bu özelliği iç işleyişinde kullanır.
C# Örneği
UnityObjects.Fields Fields = Global.UnityApp.Tables[0].Fields;
string str = "Field Count in the Table = " + Fields.Count.ToString() + " First " + Fields.Count.ToString() + " Field ;\n" ;
str = str + "Index - Size - Name \n";
for (int i = 0; i < Fields.Count-1; i++)
{
 UnityObjects.Field Field=Fields[i];
 str = str + Field.index.ToString() + " - " + Field.size.ToString() + " - " + Field.name + "\n";
}
MessageBox.Show(str);


Fields
ICollection nesnesinden inherited (miras alınmış) bir nesnedir.LBS Unity veri tabanındaki tüm tablolar üzerinde işlem yapmamızı sağlar. Tüm elemanları ITable nesnesi olarak olarak tanımlıdır.
Methods	Return Type	Açıklama
Clear	Yok	ICollection'dan inherit edilmiş bir method'dur. Kullanılmamalıdır.
Delete(Index)	Boolean	Index parametresi olan bir metotdur. İstenilen alanı siler. Alanlar birer CollectionItem olarak tanımlı olduklarından silmek istediğimiz alanın collectionItem index'ini bu metoda parametre olarak geçerek silmek istediğimiz alanı sileriz. Silme işlemini check etmek için UnityApplication nesnesinin GetLastError veya GetLastErrorString metodlarını kullanabiliriz. İşlemler hafızada yapılmaktadır. Hiç bir şekilde veri tabanındaki alanları silmez. Sık kullanılan bir metod değildir.
Data Properties	Type	Açıklama
Count	Integer	Tablodaki alanların listesindeki eleman sayısını verir.
Item(Index)	IField	Listedeki bir elemanın bilgilerini tutan listedir. Index 0 dan başlar. Döngülerde Count-1'e kadar döndürülmelidir. Bu listedeki tüm elemanlar IField tipindedir.
Parent	Unknown	ICollection’dan inherit edilmiş bir property’dir. ITable türünden bir nesne bilgisi tutar. Read veya Write işlemi yapılamaz. Unity Object bu özelliği iç işleyişinde kullanır.
C# Örneği
UnityObjects.Fields Fields = Global.UnityApp.Tables[0].Fields;
string str = "Field Count in the Table = " + Fields.Count.ToString() + " First " + Fields.Count.ToString() + " Field ;\n" ;
str = str + "Index - Size - Name \n";
for (int i = 0; i < Fields.Count-1; i++)
   {
	 UnityObjects.Field Field=Fields[i];
     str = str + Field.index.ToString() + " - " + Field.size.ToString() + " - " + Field.name + "\n";
   }
MessageBox.Show(str);



FirmParameters
IFirmParameter nesnesi ile Ticari sistem parametrelerini işleyebiliriz. Programdaki tüm ticari işlem parametreleri bu nesne içinde tanımlı bulunmaktadır.
Bu nesneyi kullanarak ticari işlem parametrelerini okuyup, değiştirebiliriz. Nesnenin özelliklerini değiştirip post edersek yeni parametreler veri tabanına eklenmiş olur.
 
IFirmParameters 
Methods	Return Type	Açıklama
Post	Boolean	Ticari İşlem parametrelerinde yapılan değişiklikleri veri tabanına aktarmak için kullanılır.
Data Properties	Type	Açıklama
ABCCode	Integer	ABC kodu öndeğeri
accControl	Byte	Muhasebe hesabı kontrol sekli
accRepCurrCtrl	Byte	Muhasebe fişinde raporlama döv. kontrolu
accToBeOutOfTrack	String	Takipten düşülecek borç/ alacak hesabı (muhasebe hesap kodu)
allocTargetType	Integer	Yükleme hedefi, 0:PO, 1:WS, 2:OP, 3:OpReq
amntControl	Byte	Miktar kontrol sekli
autoIncSL	Boolean	Lot / seri no otomatik arttırılacak
autoLotOutMtd	Integer	0 : FIFO; 1: LIFO
autoMtrIssue	Byte	0 : Hayır, 1: Başladığında, 2: Tamamlandığında
bagKurPer	Double	Bağkur oranı
begDay	Integer	Dönem bitiş ayı
begMon	Integer	Dönem başlangıç ayı
borsaPer	Double	Borsa oranı
brInvCheck	Boolean	F : İşyeri / ambar kontrolu yapılacak / T : Yapılmayacak
buffer0	Byte	Kullanılmıyor. (Buffer)
buffer1	Byte	Kullanılmıyor. (Buffer)
buffer2	Byte	Kullanılmıyor. (Buffer)
buffer3	Byte	Kullanılmıyor. (Buffer)
caBuffer	String	Kullanılmıyor. (Buffer)
cashCode	String	Kasa kodu
cashWrkDaysCtrl	Byte	Kasa işlemleri çalisma günü kontrolü
centerControl	Byte	Masraf merkezi kontrol şekli
checkSalMan	Boolean	Irsaliye/sipariş aktarımında Satış el. kontrolü
chkSLLocExpDate	Boolean	Seri/Lot/Stok Yeri Otomatik Oluşturma İşleminde Son Kullanma Tarihi Dikkate T: Alınacak/ F : Alınmayacak
chPPConfirm	Byte	Cari Hesap / Ödeme Plan Grubu Kontrolü
clBaseForm	Boolean	CH Bazlı Form - CH Kur Farkı Fişinde
clientQc	Byte	Cari hesap kkk kontrolu yapılmadığında
clLanguage	Boolean	Formlar CH yazışma dilinde basılacak
condReadAct	Byte	Alış/Satış koşulları 0 : Her hesaplamada okunacak
1 : Sadece ilk hesaplamada okunacak 
contEmpActOccWithWS	Boolean	Gerçekleşen çalışan kullanımı, iş istasyonu kullanımı ile kısıtlanacak / kısıtlanmayacak
contEmpPlnOccWithWS	Boolean	Planlanan çalışan kullanımı, iş istasyonu kullanımı ile kısıtlanacak / kısıtlanmayacak
contToolActOccWithWS	Boolean	Gerçekleşen araç çalışan kullanımı, iş istasyonu kullanımı ile kısıtlanacak / kısıtlanmayacak
contToolPlnOccWithWS	Boolean	Planlanan araç kullanımı, iş istasyonu kullanımı ile kısıtlanacak / kısıtlanmayacak
costType	Byte	Stok maliyet türü
countForMPSRun	Integer	Planlama Yöntemi:  0:yapılmayacak, 1:MPS,  2:MRP
crossAmntMatch	Boolean	Eşleşen hareketlerde birebir tutar kontrolü
crossCodeCtrl	Boolean	Hareketlerde karşı hesap kontrolü
currUpdate	Boolean	Tarih degistirilirken kur güncelleme
debitCreditCtrl	Boolean	Açılış ve Özel Fişlerde Borç/Alacak Kontrolü sv almanya 26.03.2001
debtClose0	Boolean	Borc kapatma penceresi
debtClose1	Boolean	Borc kapatma penceresi
debtClose2	Boolean	Borc kapatma penceresi
debtClose3	Boolean	Borc kapatma penceresi
debtClose4	Boolean	Borc kapatma penceresi
deCodeNotFnd	Byte	Indirim/masraf muhasebe kodu girilmediginde uyarı verilecek / ent.bag.kod kullanılacak
defItemInFiche	Boolean	Tanımlı malzeme fişleri (Giriş)
defItemOutFiche	Boolean	Tanımlı malzeme fişleri (Çıkış)
defPurchFNames0	String	Tanımlı Alım İrsaliyesi
defPurchFNames1	String	Tanımlı Alım İrsaliyesi
defPurchFNames2	String	Tanımlı Alım İrsaliyesi
defPurchFNames3	String	Tanımlı Alım İrsaliyesi
defPurchFNames4	String	Tanımlı Alım İrsaliyesi
defSaleFNames1	String	Tanımlı Satış İrsaliyesi
defSaleFNames2	String	Tanımlı Satış İrsaliyesi
defSaleFNames3	String	Tanımlı Satış İrsaliyesi
defSaleFNames4	String	Tanımlı Satış İrsaliyesi
defStFNames0	String	Tanımlı Stok Fişi
defStFNames1	String	Tanımlı Stok Fişi
defStFNames2	String	Tanımlı Stok Fişi
defStFNames3	String	Tanımlı Stok Fişi
defStFNames4	String	Tanımlı Stok Fişi
defStFNames5	String	Tanımlı Stok Fişi
defStFNames6	String	Tanımlı Stok Fişi
defStFNames7	String	Tanımlı Stok Fişi
defStFNames8	String	Tanımlı Stok Fişi
defStFNames9	String	Tanımlı Stok Fişi
deprType	Integer	Amortisman türü
despCampApply	Boolean	İrsaliye Otomatik Kampanya Uygulama
despRiskOver	Byte	Irsaliye Müsteri riski asıldıgında
diffWHouseUse	Boolean	Farklı ambar kullanımı 0:Hayır, 1:Evet
dispPurcFiche	Boolean	Alım irsaliyeleri
dispSaleFiche	Boolean	Satış irsaliyeleri
distExpenses	Boolean	Dağılan masraflar muhasebe hesabına aktarılacak / aktarılmayacak
distOverHeads	Byte	Genel Gider dağıtımı 0:Acc 1:Acc+CC
divLotSize	Boolean	Lot büyüklükleri bölünebilir / bölünemez
divUnit	Boolean	Bölünebilir / bölünemez
doubleWayControl	Boolean	Çift yönlü denetimin yapılıp yapılmaması
ek1Per	Double	Ek1 oranı
ek2Per	Double	Ek2 oranı
endorsTrac	Integer	Ciro takip süresi (gün)
expenWasFiche	Boolean	Sarf / Fire fişleri
extTransfer0	Boolean	Kullanılmıyor
extTransfer1	Boolean	Kullanılmıyor
extTransfer2	Boolean	Kullanılmıyor
extTransfer3	Boolean	Kullanılmıyor
extTransfer4	Boolean	Kullanılmıyor
fichesToAccCtrl0	Boolean	Hesap kodu kontrolu yapılacak fiş türleri
fichesToAccCtrl1	Boolean	Hesap kodu kontrolu yapılacak fiş türleri
fichesToAccCtrl2	Boolean	Hesap kodu kontrolu yapılacak fiş türleri
fichesToAccCtrl3	Boolean	Hesap kodu kontrolu yapılacak fiş türleri
fichesToAccCtrl4	Boolean	Hesap kodu kontrolu yapılacak fiş türleri
fichesToAccCtrl5	Boolean	Hesap kodu kontrolu yapılacak fiş türleri
fichesToAccCtrl6	Boolean	Hesap kodu kontrolu yapılacak fiş türleri
fichesToAccCtrl7	Boolean	Hesap kodu kontrolu yapılacak fiş türleri
fichesToAccCtrl8	Boolean	Hesap kodu kontrolu yapılacak fiş türleri
fichesToAccCtrl9	Boolean	Hesap kodu kontrolu yapılacak fiş türleri
fichesToAccCtrl10	Boolean	Hesap kodu kontrolu yapılacak fiş türleri
fichesToCenCtrl0	Boolean	Masraf merkezi kontrolu yapılacak fiş türleri
fichesToCenCtrl1	Boolean	Masraf merkezi kontrolu yapılacak fiş türleri
fichesToCenCtrl2	Boolean	Masraf merkezi kontrolu yapılacak fiş türleri
fichesToCenCtrl3	Boolean	Masraf merkezi kontrolu yapılacak fiş türleri
fichesToCenCtrl4	Boolean	Masraf merkezi kontrolu yapılacak fiş türleri
fichesToCenCtrl5	Boolean	Masraf merkezi kontrolu yapılacak fiş türleri
fichesToCenCtrl6	Boolean	Masraf merkezi kontrolu yapılacak fiş türleri
fichesToCenCtrl7	Boolean	Masraf merkezi kontrolu yapılacak fiş türleri
fichesToCenCtrl8	Boolean	Masraf merkezi kontrolu yapılacak fiş türleri
fichesToCenCtrl9	Boolean	Masraf merkezi kontrolu yapılacak fiş türleri
fichesToCenCtrl10	Boolean	Masraf merkezi kontrolu yapılacak fiş türleri
finBuffer0	Byte	Kulanılmıyor. (Buffer)
finBuffer1	Byte	Kulanılmıyor. (Buffer)
finBuffer2	Byte	Kulanılmıyor. (Buffer)
finUpdRepCurr	Boolean	Tarih değişikliğinde raporlama dövizi
frequency	Double	Kontrol sıklığı
gLBuffer	Byte	Kullanılmıyor. (Buffer)
gpBuffer	String	Kullanılmıyor. (Buffer)
gpFundShareRat	Double	GP Fon payı oranı
gpInComeTaxRatS	Double	GP Gelir vergisi oranı hizmet için
gpInComeTaxRatT	Double	GP Gelir vergisi oranı mal için
hideCredTrans	Boolean	Dökümlerde alacak hareketleri gizlenecek
invCampApply	Boolean	Fatura Otomatik Kampanya Uygulama
invPurcFiche	Boolean	Alım faturaları
invSaleFiche	Boolean	Satış faturaları
IOCtrl	Byte	Giris/Cikis Kontrolü
iPrintClsLine	Boolean	MS/MT detay satırları basılsın/basılmasın
itemConform	Byte	Malzeme kalite kontrol sonucu uygun değilse
komisyonPer	Double	Komisyon oranı
komKDVPer	Double	Komisyon KDV oranı
localCurr	String	Yerel para birimi
localFrac	String	Yerel para birimi kuruş hanesi
locTracking	Boolean	Lokasyon takibi yapılacak / yapılmayacak
lotEntry	Byte	0: Seri lot browser, 1:Giriş işlemleri
lotParty	Integer	0 : Üretim miktarı, 1:Sabit büyüklük
maxLevelCtrl	Byte	Azami stok seviye kontrolu
mergeCashLns	Byte	Kasa satırları birleştirilecek
mergeFicheLines0	Boolean	Satır birleştirerek entegrasyon
mergeFicheLines1	Boolean	Satır birleştirerek entegrasyon
mergeFicheLines2	Boolean	Satır birleştirerek entegrasyon
mergeFicheLines3	Boolean	Satır birleştirerek entegrasyon
mergeFicheLines4	Boolean	Satır birleştirerek entegrasyon
mergeStFiche	Boolean	Stok fiş satırları ayrı ayrı basılacak/ birleştirilecek
method	Integer	Çizelgeleme yöntemi 0 : geri, 1 : ileri
minLevelCtrl	Byte	Asgari stok seviye kontrolu
mpsDistrMntDays	Integer	Aydan Günlere Dağıtım
mpsDistrWkDays	Integer	Haftadan Günlere Dağıtım
mpsFrozDaysFlag	Integer	Kesinleşmiş Dönemler
mpsNoOfDays	Integer	Çizelgelenecek Dönem (gün)
mpsNoOfFrozDays	Integer	Kesinleşecek Dönem (gün)
mpsNoOfMonths	Integer	Çizelgelenecek Dönem (ay)
mpsNoOfWeeks	Integer	Çizelgelenecek Dönem (hafta)
mtrlItem	Boolean	Kullanım yeri - Malzeme yönetimi
mtrlQChar	Boolean	Kullanım yeri - Malzeme yönetimi
mtrlUnit	Boolean	Kullanım yeri - Malzeme yönetimi
negLevelCtrl	Byte	Negatif seviye kontrolu
nonConform	Byte	Operasyon kalite kontrol sonucu uygun değilse
noteStampPer	Double	Senet pul oranı (binde)
ordCampApply	Boolean	Sipariş Otomatik Kampanya Uygulama
ordRiskOver	Byte	Siparis Müşteri riski aşıldığında
partDep	Boolean	Kıst amortisman durumu
pAttachType	Byte	Irsaliye ve siparişten faturaya genel indirim masraf aktarımı
pcBuffer	String	Kullanılmıyor. (Buffer)
pCheckOrdInv	Boolean	Sipariş sevkinde ambar kontrolu yapılacak/ yapılmayacak
pClConfirm	Byte	Fişlerde Cari Hesap / Malzeme Uygunluğu
pDefStatus	Byte	Sipariş onay bilgisi "öndeğeri  AK.
pDiscounts	Boolean	Indirimler ayrı hesaba / stok maliyetine
perDataPath	String	Personel Yönetimi Kataloğu
persEnteg	Byte	Personel entegrasyonu departmanlara göre/genel
pExpenses	Boolean	Masraflar ayrı hesaba / stok maliyetine
pGlobLotNum	Boolean	Alışta genel lot numaraları
piasOnDisc	Boolean	Indirimlerde kuruş yuvarlanacak / kullanılacak
piasters0	Integer	Kurus hanesi (1.30.00.00 versiyonuyla birlikte kullanılmıyor.)
piasters1	Integer	Kurus hanesi (1.30.00.00 versiyonuyla birlikte kullanılmıyor.)
piasters2	Integer	Kurus hanesi (1.30.00.00 versiyonuyla birlikte kullanılmıyor.)
piasters3	Integer	Kurus hanesi (1.30.00.00 versiyonuyla birlikte kullanılmıyor.)
piasters4	Integer	Ticari sistem Yönetimi / Tanımlar / Finans Parametreleri / Birim Fiyat kuruş hanesi parametresinin değerini öğrenebileceğiniz özelliktir.
Program içerisindeki tüm modüllerde birim fiyat kuruş hanesi bu parametreyi okuyarak çalışmaktadır.
piasters5	Integer	Kurus hanesi (1.30.00.00 versiyonuyla birlikte kullanılmıyor.)
piasters6	Integer	Kurus hanesi (1.30.00.00 versiyonuyla birlikte kullanılmıyor.)
piasters7	Integer	Kurus hanesi (1.30.00.00 versiyonuyla birlikte kullanılmıyor.)
piasters8	Integer	Kurus hanesi (1.30.00.00 versiyonuyla birlikte kullanılmıyor.)
piasters9	Integer	Kurus hanesi (1.30.00.00 versiyonuyla birlikte kullanılmıyor.)
piasters10	Integer	Kurus hanesi (1.30.00.00 versiyonuyla birlikte kullanılmıyor.)
piasters11	Integer	Kurus hanesi (1.30.00.00 versiyonuyla birlikte kullanılmıyor.)
piasters12	Integer	Kurus hanesi (1.30.00.00 versiyonuyla birlikte kullanılmıyor.)
piasters13	Integer	Kurus hanesi (1.30.00.00 versiyonuyla birlikte kullanılmıyor.)
piasters14	Integer	Kurus hanesi (1.30.00.00 versiyonuyla birlikte kullanılmıyor.)
pInvPrintTyp	Byte	Fatura basımı : Sadece fatura / fatura + irsaliye
pLeadTimeChk	Boolean	Temin tarihinde temin süresi kontrolü
pMergeDesp	Boolean	Irsaliye satırları ayrı ayrı basılacak/ birleştirilecek
pMergeInv	Boolean	Fatura satırları ayrı ayrı basılacak/ birleştirilecek
pMergeOrder	Boolean	Siparis satırları ayrı ayrı basılacak/ birleştirilecek
pOnePayLine	Boolean	Parçalı ödeme / ortalama ödeme
pOrdDateCon	Boolean	Verilen Siparişte Temin Tarihi Kontrolü
pPrcType	Byte	Malz.(Sınıfı) Alış Fiyat.-Türü Malz./Malz.Sınıfı
pPrcVAT	Boolean	Malz.(Sınıfı) Alış Fiyat.-KDV Hariç/Dahil
pPrintClsLine	Boolean	MS/MT detay satırları basılsın/basılmasın
pPrintCmpLine	Boolean	Karma koli satırı basılsın/basılmasın
pPrintDesp	Boolean	Irsaliye otomatik basımı
pPrintInv	Boolean	Fatura otomatik basımı
pPrintOrd	Boolean	Siparis otomatik basımı
pPromDiscs	Boolean	Promosyon indirimleri ayri hesaba / dağıtılacak
pRetCostType	Byte	İade işl. mal. 0->Cikiş  1->Güncel 2->iade
printAccFiche	Boolean	Otomatik fiş basimi
printBnFiche	Boolean	Banka fişi otomatik basim
printCashLn	Boolean	Kasa işlemleri otomatik basım
printClNotes	Boolean	CH işlemleri otomatik basım
printClSlip	Boolean	CH işlemleri otomatik basım
printRoll	Boolean	Çek / senet bordrosu otomatik basim
 
 
 	 	 
printStFiche	Byte	Stok fişi otomatik basımı
printUpperAcc	Boolean	Üst hesap bazında toparla/toparlama
productionFiche	Boolean	Üretimden giriş fişleri
protestedNotes	Byte	Protestolu senetler cari hesaba borc/ayrı hesaba
pSortDesp	Byte	Irsalye satırları sıralaması
pSortInv	Byte	Sipariş fiş satırları sıralaması
pSortOrder	Byte	Sipariş fiş satırları sıralaması
pSrvPrcVAT	Boolean	Hizmet Alış Fiyatları - KDV Hariç/Dahil
pUpdateCurr	Boolean	Sip.Irs.Fat. aktarımda kur güncellenecek / aynen kalacak
pUpdRepCurr	Boolean	Tarih değişikliğinde raporlama dövizi
purchItem	Boolean	Kullanım yeri - Satınalma
purchQChar	Boolean	Kullanım yeri - Satınalma
purchUnit	Boolean	Kullanım yeri - Satınalma
qcBuffer0	Byte	Kullanılmıyor. (Buffer)
qcBuffer1	Byte	Kullanılmıyor. (Buffer)
qcBuffer2	Byte	Kullanılmıyor. (Buffer)
qcBuffer3	Byte	Kullanılmıyor. (Buffer)
qcBuffer4	Byte	Kullanılmıyor. (Buffer)
qcPriority	String	Önem derecesi
reeskontInt	Double	Reeskont faizi
repCurrCont	Boolean	Fiş girişinde kur kontrolu
reportCurr	String	Raporlama dövizi
reportFrac	String	Raporlama dövizi kuruş hanesi
Reserved7	Integer	Kullanılmıyor. (Buffer)
revalFlag	Boolean	Değerlenebilir
revDeprFlag	Boolean	Değerleme amortismanı
riskControl0	Boolean	Müşteri riski kontrolü
riskControl1	Boolean	Müşteri riski kontrolü
riskControl2	Boolean	Müşteri riski kontrolü
riskControl3	Boolean	Müşteri riski kontrolü
riskControl4	Boolean	Müşteri riski kontrolü
riskControl5	Boolean	Müşteri riski kontrolü
riskControl6	Boolean	Müşteri riski kontrolü
riskControl7	Boolean	Müşteri riski kontrolü
riskControl8	Boolean	Müşteri riski kontrolü
riskControl9	Boolean	Müşteri riski kontrolü
riskControl10	Boolean	Müşteri riski kontrolü
riskOver	Byte	Genel Müşteri riski aşıldığında
riskType	Byte	Risk toplamı (bakiye/irsaliye)
rollOnePayLine	Boolean	Bordro ortalama / parçalı ödeme
roundDefault	Double	Ödeme / Tahsilat Planı Yuvarlama Tabanı
safeLevelCtrl	Byte	Güvenli seviye kontrolü
salesItem	Boolean	Kullanım yeri - Satış
salesQChar	Boolean	Kullanım yeri - Satış
salesUnit	Boolean	Kullanım yeri - Satış
salManControl0	Boolean	Satış el. kontrolü yapılacak işlemler
salManControl1	Boolean	Satış el. kontrolü yapılacak işlemler
salManControl2	Boolean	Satış el. kontrolü yapılacak işlemler
sampleSize	Double	Örnek küme büyüklüğü
sAttachType	Byte	Irsaliye ve siparişten faturaya genel indirim masraf aktarımı
sCheckOrdInv	Boolean	Sipariş sevkinde ambar kontrolü yapılacak/yapılmayacak
sCheckOrdLink	Boolean	İrsaliye ve faturada sipariş kontrolu
sClConfirm	Byte	Fişlerde Cari Hesap / Malzeme Uygunluğu
sDefReserve	Boolean	Siparis rezerve seçeneği ilk değeri
sDefStatus	Byte	Sipariş onay bilgisi öndeğeri  AK.
sDiscounts	Boolean	Indirimler ayrı hesaba/stok maliyetine
sExpenses	Boolean	Masraflar ayrı hesaba/stok maliyetine
shelfLife	Double	Raf ömrü (gün)
sInvPrintTyp	Byte	Fatura basımı : Sadece fatura / fatura + irsaliye
sLeadTimeChk	Boolean	Teslim tarihinde teslim süresi kontrolü
sMergeDesp	Boolean	Irsaliye satırları ayrı ayrı basılacak/birleştirilecek
sMergeInv	Boolean	Fatura satırları ayrı ayrı basilacak/birleştirilecek
sMergeOrder	Boolean	Sipariş satırları ayrı ayrı basılacak/birleştirilecek
sOnePayLine	Boolean	Parçalı ödeme/ortalama ödeme
sOrdDateCon	Byte	Alınan Siparişte Teslim Tarihi Kontrolü
sOrdPromDlv	Byte	Siparişteki promosyonun sevkiyatı
sortStFiche	Byte	Stok fiş satırları sıralaması
sortType	Byte	Sıralama şekli
sPrcType	Integer	Malz.(Sınıfı) Satış Fiyat.-Türü Malz./Malz.Sınıfı
sPrcVAT	Boolean	Malz.(Sınıfı) Satış Fiyat.-KDV Hariç/Dahil
sPrintClsLine	Boolean	MS/MT detay satırları basılsın/basılmasın
sPrintCmpLine	Boolean	Karma koli satırı basılsın/basılmasın
sPrintDesp	Boolean	Irsaliye otomatik basımı
sPrintInv	Boolean	Fatura otomatik basımı
sPrintOrd	Boolean	Sipariş otomatik basımı
sPromDiscs	Boolean	Promosyon indirimleri ayrı hesaba/dağıtılacak
sRetCostType	Byte	İade işl. mal. 0->Çıkış  1->O anki
sSDFPer	Double	SSDF oranı
sSortDesp	Byte	Irsalye satırları sıralaması
sSortInv	Byte	Sipariş fiş satırları sıralaması
sSortOrder	Byte	Sipariş fiş satırları sıralaması
sSrvPrcVAT	Boolean	Hizmet Satış Fiyatları - KDV Hariç/Dahil
stdRepCurrCont	Byte	Raporlama dövizi kontrolü
stopajPer0	Double	Stopaj oranı 1
stopajPer1	Double	Stopaj oranı 2
stopajPer2	Double	Stopaj oranı 3
stUpdRepCurr	Boolean	Tarih değişikliğinde raporlama dövizi
sUpdateCurr	Boolean	Sip.Irs.Fat. aktarımda kur güncellenecek/aynen kalacak
sUpdRepCurr	Boolean	Tarih değişikliğinde raporlama dövizi
tool	Boolean	Araç / değil
trackType	Byte	İzleme yöntemi 0-None, 1-LOT, 2-Seri
transferFiche	Boolean	Devir fişleri
upperAccPrinting	Byte	Fişlerde üst hesap basımı (tek/grup)
useType	Integer	0 : Genel; 1 : Malzemeye özel
VATDefault	Double	KDV öndeğeri
VATExpense	Double	Masraf KDV öndeğeri
VATRealKurus	Boolean	KDV kuruş hanesi yuvarlanmayacak
WarehouseFiche	Boolean	Ambar fişleri




 
Hesap kodu kontrolu yapılacak fiş türleri


AttachADespatchByLRef
Konsinye İrsaliye bağlantılı bir Müstahsil Makbuzu oluşturulması için kullanılan method 'dur.
Ayrıca farklı ambarlara sahip irsaliyeleri aynı Fatura üzerinde toplar. 
Parametre	Type	Açıklama
dispref	Long	Müstahsil Makbuzuna veya Fatura ya bağlanacak olan irsaliyenin referansı
C# Örneği
UnityObjects.Data invoice = Global.UnityApp.NewDataObject(UnityObjects.DataObjectType.doSalesInvoice); invoice.New();
invoice.DataFields.FieldByName("TYPE").Value = 8;
invoice.DataFields.FieldByName("NUMBER").Value = "AMBARFATURA01";
invoice.DataFields.FieldByName("DATE").Value = "26.10.2015";
invoice.DataFields.FieldByName("TIME").Value = 187708691;            invoice.DataFields.FieldByName("ARP_CODE").Value = "CRH01";            invoice.DataFields.FieldByName("SOURCE_WH").Value = 1;            invoice.DataFields.FieldByName("SOURCE_COST_GRP").Value = 1;            invoice.DataFields.FieldByName("POST_FLAGS").Value = 247;            invoice.DataFields.FieldByName("VAT_RATE").Value = 18;            invoice.DataFields.FieldByName("CREATED_BY").Value = 1;            invoice.DataFields.FieldByName("CURRSEL_TOTALS").Value = 1;            invoice.DataFields.FieldByName("DEDUCTIONPART1").Value = 2;            invoice.DataFields.FieldByName("DEDUCTIONPART2").Value = 3;            invoice.DataFields.FieldByName("DOC_DATE").Value = "26.10.2015";

invoice.AttachADespatchByLRef(6274);
invoice.AttachADespatchByLRef(6275);
            
if (invoice.Post() == true)
  {
    MessageBox.Show("POST OK !");
  }
else
  {
     if (invoice.ErrorCode != 0)
       {
         MessageBox.Show("DBError(" + invoice.ErrorCode.ToString() + ")-" + invoice.ErrorDesc + invoice.DBErrorDesc);
       }
     else if (invoice.ValidateErrors.Count > 0)
        {
          string result = "XML ErrorList:";
          for (int i = 0; i < invoice.ValidateErrors.Count; i++)
             {
               result += "(" + invoice.ValidateErrors[i].ID.ToString() + ") - " + invoice.ValidateErrors[i].Error;
             }
           MessageBox.Show(result);
         }
    }

AttachADespatchByFicheNo
Müstahsil İrsaliye bağlantılı bir Müstahsil Makbuzu oluşturulması için kullanılan method 'dur.
Ayrıca farklı ambarlara sahip irsaliyeleri aynı Fatura üzerinde toplar.
 
Parametre	Type	Açıklama
dispFicheNo	String	Müstahsil Makbuzuna veya Fatura ya bağlanacak olan irsaliyenin numarası
C# Örneği
 UnityObjects.Data invoice = Global.UnityApp.NewDataObject(UnityObjects.DataObjectType.doSalesInvoice);
 invoice.New();
 invoice.DataFields.FieldByName("TYPE").Value = 8;
 invoice.DataFields.FieldByName("NUMBER").Value = "AMBARFATURA01";
 invoice.DataFields.FieldByName("DATE").Value = "26.10.2015";
 invoice.DataFields.FieldByName("TIME").Value = 187708691;
 invoice.DataFields.FieldByName("ARP_CODE").Value = "CRH01";
 invoice.DataFields.FieldByName("SOURCE_WH").Value = 1;
 invoice.DataFields.FieldByName("SOURCE_COST_GRP").Value = 1;
 invoice.DataFields.FieldByName("POST_FLAGS").Value = 247;
 invoice.DataFields.FieldByName("VAT_RATE").Value = 18;
 invoice.DataFields.FieldByName("CREATED_BY").Value = 1;
 invoice.DataFields.FieldByName("CURRSEL_TOTALS").Value = 1;
 invoice.DataFields.FieldByName("DEDUCTIONPART1").Value = 2;
 invoice.DataFields.FieldByName("DEDUCTIONPART2").Value = 3;
 invoice.DataFields.FieldByName("DOC_DATE").Value = "26.10.2015";

 invoice.AttachADespatchByFicheNo("AMBARIRSALIYE01");
 invoice.AttachADespatchByFicheNo("AMBARIRSALIYE02");   
           
 if (invoice.Post() == true)
   {
     MessageBox.Show("POST OK !");
   }
 else
   {
      if (invoice.ErrorCode != 0)
        {
          MessageBox.Show("DBError(" + invoice.ErrorCode.ToString() + ")-" + invoice.ErrorDesc + invoice.DBErrorDesc);
        }
      else if (invoice.ValidateErrors.Count > 0)
         {
           string result = "XML ErrorList:";
           for (int i = 0; i < invoice.ValidateErrors.Count; i++)
              {
                 result += "(" + invoice.ValidateErrors[i].ID.ToString() + ") - " + invoice.ValidateErrors[i].Error;
              }
            MessageBox.Show(result);
          }
     }

UnityAplication bağlantı hataları ve çözüm önerileri
Logo Objects kütüphanesi bağlantı fonksiyonlarının hepsi geriye işlemin gerçekleşme durumunu döner. İşlem başarısız ise oluşan hatanın ayrıntısını UnityApplication sınıfından türetilmiş olan nesnenin GetLastError ve GetLastErrorString fonksiyonlarından edinebiliriz. GetLastError oluşan son hatanın numarasını, GetLastErrorString oluşan son hatanın mesajını döner.


 
Hata No	Hata Mesajı	Çözüm
0	Hata Yok	Hata olmadığını belirtir.
-1	Temel bağlantı sağlanamadı	Doğru LogoDB.cfg dosyası okunmayabilir. Veri tabanı bağlantısı kontrol edilmelidir. Network üzerinden kullanım söz konusu ise yetkiler kontrol edilmelidir.
-2	Veritabanına bağlanılamadı	Kullanıcı yetkisi (Veritabanı kullanıcısı ) kontrol edilir.
-3	Hatalı kullanıcı ismi	Kullanıcı adı bulunamadığı durumlarda ilgili kullanıcı ismi kontrol edilir.
-4	Kullanıcı bilgileri okunamıyor	Kullanıcı bilgileri bulunamadığı zaman Sistem İşletmeni uygulamasından kullanıcı bilgileri kontrol edilir.
-5	Hatalı şifre bilgisi	İlgili kullanıcının şifresi kontrol edilir.
-6	Login işlemi gerçekleşmedi	Bağlantı kurulmaya çalışılan set ayarları kontrol edilir.
-7	Firma bilgilerine ulaşılamadı	Aktif dönemin varlığı kontrol edilir.
-8	Firmaya bağlanılamadı	Firmaya login olunamaz ise firmanın varlığı, kullanıcının ilgili firmaya yetkileri,  Firma tablolarının oluşturulmuş olması, aktif dönemin varlığı kontrol edilir. Bunlar doğru ise kullanıcı limiti aşılmış olabilir. Versiyon uyumsuzluğu da bu hataya sebep olabilir.
-13	Yetki yok.	Kullanmış olduğunuz sette LogoObjects kullanma yetkiniz yoktur. İlgili run-time lisans’ın yüklenmesi gereklidir.
-93	Terminal Limiti Aşılmıştır.	Kullanıcı sayısı aşılmış anlamına gelmektedir. Lisans kontrol edilmeli lisans da kullanıcı sayısında fazla LObjects çalıştırılmaya çalışıldığında kaynaklanan durum.


OrderShipping
Sipariş fişlerini İrsaliyeye çevirmek için kullanılan method'dur.
Parametre	Type	Açıklama
ordRef	Long	Sevkedilecek Siparişin Reference bilgisidir.
ficheNo	String	Oluşturulacak olan İrsaliye Numarası.
dateVal	Long	Oluşturulacak olan İrsaliye Tarihi.
doCode	String	Oluşturulacak olan İrsaliye Belge Numarası.
speCode	String	Oluşturulacak olan İrsaliye Özel Kodudur.
cyphCode	String	Oluşturulacak olan İrsaliye Yetki Kodudur.
genExp1	String	Oluşturulacak olan İrsaliye 1. Açıklama satırıdır.
genExp2	String	Oluşturulacak olan İrsaliye 2. Açıklama satırıdır.
genExp3	String	Oluşturulacak olan İrsaliye 3. Açıklama satırıdır.
genExp4	String	Oluşturulacak olan İrsaliye 4. Açıklama satırıdır.
chkRight	Boolean	Kullanici yetkisi kontrolunun manual yapilmasi icin parametredir.
fcType	Long	Oluşacak fişin tipidir. Alım irsaliyesi için 1, satış irsaliyesi için 7 veya 8 set edilebilir.
opTrans	Boolean	SQL Transaction parametresidir.
dispRef	Long	Dönen bir veridir. Boş, Long tipinde bir değişken gönderilmelidir. (Geriye İrsaliye referansı dönmektedir.)
Return Type	Açıklama
Boolean	İşlemi başarıyla gerçekleştirirse TRUE, diğer durumlarda FALSE döner.
C# Örneği
int ordRef = 5;
Object dt = 0;
int disref = 0;
UnityApp.PackDate(DateTime.Now.Day, DateTime.Now.Month, DateTime.Now.Year, ref dt);
bool ok = Global.UnityApp.OrderShipping(ordRef, "~", Convert.ToInt32(dt), "doCode", "SpeCode", "cyphCode", "U1", "U2", "U3", "U4", true, 1, true, ref disref);
if (ok)
  {
     MessageBox.Show("İşlem Başarılı");
     MessageBox.Show(disref.ToString());
  }
else
  {
     MessageBox.Show(Global.UnityApp.GetLastError() + "  " + Global.UnityApp.GetLastErrorString());
  }


RightTreeLists
Logo Objects içerisinde Rights nesnesi mevcut. Bu nesne ile tüm yetkilerin tek tek okunması ambar, firma, terminal gibi yetkilerde sıkıntı oluşturmazken işlem yetkileri (yaklaşık 10600 tanedir) tek tek okunmak istendiğinde performans sıkıntısıyla karşılaşılabilir..
RightTreeLists ile bu yetkilerin bir anda tümü liste şeklinde alınabilir.
 
Parametre	Type	Açıklama
RghtTree	IRightTreeLists	Yetki listesi.
userID	Integer (opsiyonel)	Kullanıcı numarası (ID)
firmNr	Integer (opsiyonel)	İşlem yetkileri okunacak firma numarası
rightsType	Integer (opsiyonel)	rightsType (Yetki Tipi);
  1 : Merge : Kullanıcı ve Group haklarının birleşimidir.
  2 : Group Rights : Grup haklarının okur
  3 : User Rights : Kullanıcı haklarını okur.
Return Type	Açıklama
Boolean	Belirtilen kriterlere uygun bir yetki kodu tanımı bulunursa TRUE, diğer durumlarda FALSE değeri döner.
Not: Opsiyonel parametreler girilmediği taktirde bütün öğeler için "right" değeri FALSE gelecektir.
Delphi Örneği
Memo1.Lines.BeginUpdate; 
   Memo1.Lines.Clear; 
   RightTree := AppRec.FObject.NewRghtsTree; 
   AppRec.FObject.GetRghtsTree(RightTree, 2, 1, 3); 
   for i:=0 to RightTree.count-1 do 
     Memo1.Lines.Add(StringOfChar(#9, RightTree.item[i].rlev)+ 
                                   inttostr(RightTree.item[i].ridx) +' '+ 
                                   inttostr(RightTree.item[i].rlev)+' '+ 
                                   RightTree.item[i].tag+' '+ 
                                   BoolToStr(RightTree.item[i].right,TRUE)) 
   Memo1.Lines.EndUpdate; 
C# Örneği
  UnityObjects.RightTreeLists RightTree = Global.UnityApp.NewRghtsTree(); 

             Global.UnityApp.GetRghtsTree(RightTree, 2,217, 1); 

             for (int i = 0; i < 10; i++) { 

                richTextBox1.AppendText(RightTree.Item[i].rLev.ToString()  
                     + " : " + RightTree.Item[i].rIdx.ToString()  
                     + " : " + RightTree.Item[i].tag.ToString()  
                     + " : " + RightTree.Item[i].right + "\n"); 
                    
             } 


MaterialTransactionTransfer
ERP arayüzünde "Malzeme Yönetimi" \ "İşlemler" altındaki "malzeme hareketi aktar" formunda bir malzemenin hareketleri bir başka malzemeye aktarılabiliyor.
Aynı işlemin Logo Objects tarafında yapılabilmesini sağlayan methodtur.
 
Parametre	Type	Açıklama
oldCode	String	Kaynak malzeme kodu. Bu malzemenin hareketleri diğerine aktarılmaktadır.
newCode	String	Hedef malzeme kodu. İlk parametrede belirtilen malzemenin hareketleri bu malzemeye aktarılmaktadır.
PeriodNr	Integer	Hareketlerin yer aldığı dönem numarasıdır. İşlem, bu parametrede belirtilen dönemde gerçekleşmektedir.
Return Type	Açıklama
Boolean	İşlemin gerçekleşme durumudur. Falze olması halinde aşağıdaki hata mesajları işlenmektedir;
 - Belirtilen dönem bulunamadı.
- Malzeme kodu bulunamadı.
- Malzeme sınıfı ve karma koliler seçilemez.
- Varyantlı malzemeler seçilemez.
- Tüm hareketlerde ana birim kullanılmış ancak iki malzemenin birim seti farklı.
- Malzemelerin türleri uyumlu değildir.
- Malzemenin tablolu malzeme sınıf(lar)ı ile bağlantısı vardır.
- Ana birim kullanılmamış hareketler var.
- Eski kodun bağlı olduğu malzeme sınıfı ile yeni kodun birim seti farklı.
- Malzemelerin stok yeri takibi yapılacak seçenekleri farklı.
- Malzemelerin izleme yöntemleri uyumlu değildir.
Delphi Örneği
  if AppRec.FObject.MaterialTransactionTransfer('TM.01', 'TM.02', 1) 
    then ShowMessage('İŞLEM BAŞARILI') 
    else ShowMessage('İŞLEM BAŞARISIZ - ' +  
                                    IntToStr(AppRec.FObject.GetLastError) + ' - ' + 
                                    AppRec.FObject.GetLastErrorString); 
C# Örneği
    if (Global.UnityApp.MaterialTransactionTransfer("MALZEME.001", "MALZEME.003", 88))
    {
        MessageBox.Show("işlem başarılı");
    }
    else
    {
        MessageBox.Show(Global.UnityApp.GetLastError().ToString() 
            + " : " + Global.UnityApp.GetLastErrorString());
    }


CancelInvoice
Fatura iptalini gerçekleştirir.
XML veya LObjects üzerinden sadece CANCELLED alanına 1 değeri vererek faturayı iptal etmenin yanlış bir davranış olduğu tespit edildi.
ERP arayüzünde faturayı iptal ederken yapılan çeşitli kontroller ve işlemler gerçekleşmektedir. Ancak CANCELLED alanına 1 değeri vererek bu kontrol ve işlemler gerçekleşememektedir.
Bundan dolayı ürünle aynı şekilde davranacak şekilde CancelInvoice adında bir fonksiyon eklenmiştir;
 
Parametre	Type	Açıklama
invRef	Integer	İptal edilecek fatura referansı
Return Type	Açıklama
Boolean	İşlemin gerçekleşip gerçekleşmediği bilgisini döner.
 
 
Delphi Örneği
 if AppRec.FObject.CancelInvoice(1234)
   then ShowMessage('OLDU')
   else ShowMessage('OLMADI - ' +
                                   IntToStr(AppRec.FObject.GetLastError) + ' - ' +
                                   AppRec.FObject.GetLastErrorString);
C# Örneği
     if (Global.UnityApp.CancelInvoice(82642)) 
             { 
                 MessageBox.Show("ok"); 
             } 
             else 
             { 
                 MessageBox.Show(Global.UnityApp.GetLastError().ToString() 
			+ " : " + Global.UnityApp.GetLastErrorString()); 
             } 

RunCostingMaintenance
ERP ürünü içerisindeki Maliyetlendirme Servisini tetikler. Parametre olarak L_RPFILTS[FFF] tablosundaki ilgili filtrenin LOGICALREF değeri girilmelidir. Sıfırdan büyük bir değer gönderilmediği taktirde default değerlerle işlem gerçekleşecektir. 

Parametre	Type	Açıklama
maskID	Integer	L_RPFILTS[FFF] tablosundaki filtre referansı
Return Type	Açıklama
Boolean	İşlemin gerçekleşip gerçekleşmediği bilgisini döner.
C# Örneği
            if (Global.UnityApp.RunCostingMaintenance(20))
            {
                MessageBox.Show("ok");
            }
            else
            {
                MessageBox.Show(Global.UnityApp.GetLastErrorString());
            }

RunPriceAssignmentsByCosts
ERP ürünü içerisindeki Maliyet Üzerinden Fiyatlandırma (COST) Servisini tetikler. Parametre olarak L_RPFILTS[FFF] tablosundaki ilgili filtrenin LOGICALREF değeri girilmelidir. Sıfırdan büyük bir değer gönderilmediği taktirde default değerlerle işlem gerçekleşecektir. 

Parametre	Type	Açıklama
maskID	Integer	L_RPFILTS[FFF] tablosundaki filtre referansı
Return Type	Açıklama
Boolean	İşlemin gerçekleşip gerçekleşmediği bilgisini döner.
C# Örneği
           if (Global.UnityApp.RunPriceAssignmentsByCosts(22))
            {
                MessageBox.Show("ok");
            }
            else
            {
                MessageBox.Show(Global.UnityApp.GetLastErrorString());
            }


SendRecvEInvoiceDocuments
Cloud Connect kullanıcıları için  E-Fatura Gönder/Al  Logo Objects'e dahil edilmiştir.
Parametre	Açıklama
Send	Parametresi "TRUE" ise gönderim işlemi yapar.
Recv	Parametresi "TRUE" ise alım işlemi yapar.
Refs  	Noktalı virgül ";" ile ayrılarak birden fazla fiş referansı veya GUID karışık olarak girilebilir.
 Eğer girilen değer 36 karakter ise bu değerin GUID olduğunu düşünerek GUID bilgisinden fiş referansını kendi bularak işlemi uygular.
NOT: "Send" parametresi "TRUE" ve "Refs" parametresi boş ise "Gönderilecek" sekmesinde bulunan tüm fişler gönderilir.
Return Type	Açıklama
String	İşlemin gerçekleşip gerçekleşmediğini bildirir.
C# Örneği
  {
       string msg = Global.UnityApp.SendRecvEInvoiceDocuments(True, True, "1105");
            
       MessageBox.Show("Başarılı");
  }

SendRecvEDispatchDocuments
Cloud Connect kullanıcıları için  E-İrsaliye Gönder/Al  Logo Objects'e dahil edilmiştir.
Parametre	Açıklama
send	Parametresi "TRUE" ise gönderim işlemi yapar.
recv	Parametresi "TRUE" ise alım işlemi yapar.
refs  	Noktalı virgül ";" ile ayrılarak birden fazla fiş referansı veya GUID karışık olarak girilebilir.
 Eğer girilen değer 36 karakter ise bu değerin GUID olduğunu düşünerek GUID bilgisinden fiş referansını kendi bularak işlemi uygular.
refsReceipt	Gelen e-İrsaliye üzerinden, F9 menüsü ile "İrsaliye Yanıtı Oluştur" seçeneğinin kullanımının ardından, LG_FFF_PP_APPROVAL tablosunda oluşan kaydın referansını(LOGICALREF) bu parametrede kullanabilirsiniz. 
Ek kaynak: Gelen e-İrsaliyeler İçin İrsaliye Yanıtı Oluşturma - Logo Tiger 3 Bilgi Deposu - Global Site

NOT: "Send" parametresi "TRUE" ve "Refs" parametresi boş ise "Gönderilecek" sekmesinde bulunan tüm fişler gönderilir.
Return Type	Açıklama
String	İşlemin gerçekleşip gerçekleşmediğini bildirir.
C# Örneği
  {
       string msg = Global.UnityApp.SendRecvEDispatchDocuments(True, True, "1090");
            
       MessageBox.Show("Başarılı");
  }


SendEArchiveDocuments
Cloud Connect kullanıcıları için  E-Arşiv Gönder Logo Objects’e dahil edilmiştir.
Parametre	Açıklama
Refs  	Noktalı virgül ";" ile ayrılarak birden fazla fiş referansı veya GUID karışık olarak girilebilir.
 Eğer girilen değer 36 karakter ise bu değerin GUID olduğunu düşünerek GUID bilgisinden fiş referansını kendi bularak işlemi uygular.
C# Örneği
  {
       string msg = Global.UnityApp.SendEArchiveDocuments("1106;1107");
            
       MessageBox.Show("Başarılı");
  }

SendESEPreceiptDocuments
Cloud Connect kullanıcıları için  E-Müstahsil Makbuzu Gönder Logo Objects’e dahil edilmiştir.
Parametre	Açıklama
Refs  	Noktalı virgül ";" ile ayrılarak birden fazla fiş referansı veya GUID karışık olarak girilebilir.
 Eğer girilen değer 36 karakter ise bu değerin GUID olduğunu düşünerek GUID bilgisinden fiş referansını kendi bularak işlemi uygular.
C# Örneği
  {
       string msg = Global.UnityApp.SendESEPreceiptDocuments("1106;1107");
            
       MessageBox.Show("Başarılı");
  }


UpdateEDocumentStatus
Cloud Connect kullanıcıları için  E-Döküman Durum Güncelleme  Logo Objects'e dahil edilmiştir.
Parametre	Açıklama
DocType 	  E-Fatura = "EINVOICE"
  E-Fatura Uygulama Yanıtı = "APPLICATIONRESPONSE"
  E-Arşiv = "EARCHIVEINVOICE"
  E-İrsaliye = "DESPATCHADVICE"
  E-İrsaliye Yanıtı = "RECEIPTADVICE"
  E-SMM (CH Fişi) = "SERECEIPT-CLF"
  E-SMM (Kasa Fişi) = "SERECEIPT-CSH"
  E-Müstahsil = "EPRECEIPT"
Refs  	Noktalı virgül ";" ile ayrılarak birden fazla fiş referansı veya GUID karışık olarak girilebilir.
 Eğer girilen değer 36 karakter ise bu değerin GUID olduğunu düşünerek GUID bilgisinden fiş referansını kendi bularak işlemi uygular.
C# Örneği
  {
    string msg = Global.UnityApp.UpdateEDocumentStatus("EARCHIVEINVOICE", "1106");
        
  }


GetEDocumentContent
Cloud Connect kullanıcıları için E-Doküman içerik alma Logo Objects'e dahil edilmiştir.
Parametre	Açıklama
DocType	 E-Fatura = "EINVOICE"
  E-Fatura Uygulama Yanıtı = "APPLICATIONRESPONSE"
  E-Arşiv = "EARCHIVEINVOICE"
  E-İrsaliye = "DESPATCHADVICE"
  E-İrsaliye Yanıtı = "RECEIPTADVICE"
  E-SMM (CH Fişi) = "SERECEIPT-CLF"
  E-SMM (Kasa Fişi) = "SERECEIPT-CSH"
  E-Müstahsil = "EPRECEIPT"
OutFormat	    "XML"
    "UBL"
    "HTML"
    "JSON"
    "TIGER"
    "HTMLBYGENERALFORMAT"
    "PDF".
GUID	İlgili fişin guıd bilgisi
C# Örneği
 string result = Global.UnityApp.GetEDocumentContent("EARCHIVEINVOICE", "PDF", "9CA583D1-0C13-466E-81F3-DA2BE7D6B871");
 
 System.IO.File.WriteAllText(@"C:\TEST_PDF.PDF", result, Encoding.Default);

   MessageBox.Show("Başarılı");
}


SaveEDocument
Logo Tiger 3 ürün grubunda e-Devlet modülünde gelen kutusundaki onaylı kayıtların kaydedilmesini sağlar. Cloud Connect kullanıcıları için e-Doküman Kaydetme yeteneği bu fonksiyonla Logo Objects'e ve Rest Servis'e dahil edilmiştir.
 
Parameters	Return Type	Description
refs	String	 LG_FFF_PP_APPROVAL tablosundaki LOGICALREF değerini alır.
Noktalı virgüller ile birden fazla referans bilgisi gönderilerek birden fazla kayıt için metot çalıştırılabilir.
Return Type	Description
String	Fonksiyon geriye JSON Object Array formatında bir metin döndürür. 

Örneğin; SaveEDocument("7;22;82;99999") fonksiyonu çağrıldığında aşağıdaki gibi bir JSON ifadesi dönmektedir.
Return JSON Model
[
  {
    "ref": 22, // Daha önce kaydedilen bir kayıt tekrar fonksiyona parametre olarak gönderilirse bu şekilde bir sonuç döner.
    "status": "error",
    "docType": "EINVOICE",
    "INTERNAL_REFERENCE": 55,
    "ErrorDesc": "Kayıt Mevcut! Veri Tabanına Aktarılamadı.",
    "ErrorCode": 32562
  },
  {
    "ref": 99999, // LG_FFF_PP_APPROVAL tablosunda olmayan bir referans fonksiyona parametre olarak gönderilirse bu şekilde bir sonuç döner.
    "status": "error",
    "ErrorDesc": "İlgili fiş bulunamadı.",
    "ErrorCode": 32532
  },
  {
    "ref": 7, // Doküman kaydedilirken bir istisna olmuş ise bu şekilde bir sonuç döner.
    "status": "error",
    "ErrorDesc": "Kayıt Veri Tabanına Aktarılamadı!",
    "ErrorCode": 32563
  },
  {
    "ref": 82, // Doküman kaydedilince bu şekilde bir sonuç döner.
    "status": "ok",
    "docType": "EDISPATCH",
    "INTERNAL_REFERENCE": 244
  },
  {
    "status": "error", // Dokümanlar kaydedilirken kontrole takılırsa bu şekilde bir sonuç döner.
    "ErrorDesc": "K0001 kodlu ek vergi kodu bulunamadı.[1]"
  }
]
C# Örneği
 {
    string result = Global.UnityApp.SaveEDocument("64;152");
    dynamic parsedJson = JsonConvert.DeserializeObject(result);
    var prettyJson = JsonConvert.SerializeObject(parsedJson, Formatting.Indented);
    rtbResult.Text = prettyJson;
 }

ItemVirement
Logo Objects ile malzeme virmanı yapabilmek için bu metot kullanılmalıdır. Çoklu satır desteği bulunmaktadır.
Parametre	Açıklama
date	Oluşturulacak olan fişin tarih bilgisidir.
time	Oluşturulacak olan fişin zaman bilgisidir.
speCode	Oluşturulacak olan fişin özel kod bilgisidir.
cyphCode	Oluşturulacak olan fişin yetki kodu bilgisidir.
srcDivision	Kaynak işyeri bilgisidir.
srcDepartment	Kaynak bölüm bilgisidir.
srcFactory	Kaynak fabrika bilgisidir.
srcWareHouse	Kaynak ambar bilgisidir.
srcProjectCode	Kaynak proje kodu bilgisidir.
dstDivision	Hedef işyeri bilgisidir.
dstDepartment	Hedef  bölüm bilgisidir.
dstFactory	Hedef fabrika bilgisidir.
dstWareHouse	Hedef ambar bilgisidir.
dstProjectCode	Hedef proje kodu bilgisidir.
srcItemCode	Kaynak malzeme referansı bilgisidir.
srcVariantCode	Kaynak varyant kodu bilgisidir.
srcAmount	Kaynak miktar bilgisidir.
srcUnitCode	Kaynak birim bilgisidir.
srcCenterCode	Kaynak masraf merkezi bilgisidir.
dstItemCode	Hedef malzeme referansı bilgisidir.
dstVariantCode	Hedef varyant bilgisidir.
dstAmount	Hedef miktar bilgisidir.
dstUnitCode	Hedef birim bilgisidir.
dstCenterCode	Hedef masraf merkezi bilgisidir.
Return Type	Açıklama
Boolean	İşlemi başarıyla gerçekleştirirse TRUE, diğer durumlarda FALSE döner.


C# örneği
         public static void ItemVirement()
        {
            object dval = 0;
            object tval = 0;
            Global.UnityApp.PackDate(29, 3, 2021, ref dval);
            Global.UnityApp.PackTime(13, 13, 13, ref tval);
            string json = "{"
                     + "\n  \"date\": "+ dval+",         " 
                     + "\n  \"time\": " + tval + ",      "
                     + "\n  \"srcDivision\":\"0\","
                     + "\n  \"srcDepartment\": : \"0\",  "
                     + "\n  \"srcFactory\": : \"0\",     "
                     + "\n  \"srcWareHouse\": \"0\",     "
                     + "\n  \"srcProjectCode\": \"PRJ.001\",     "
                     + "\n  \"dstDivision\": \"0\",      "
                     + "\n  \"dstDepartment\": \"0\",    "
                     + "\n  \"dstFactory\": \"0\",       "
                     + "\n  \"dstWareHouse\": \"0\",     "
                     + "\n  \"dstProjectCode\": \"PRJ.002\",     "
                     + "\n       \"lineList\": [         "        
                     + "\n { "
                     + "\n  \"srcItemCode\": \"H00001\", "
                     + "\n  \"srcAmount\": \"1\",        "
                     + "\n  \"srcVariantCode\": \" \",        "
                     + "\n  \"srcUnitCode\": \"ADET\",   "
                     + "\n  \"srcWareHouse\": \"0\","
 					 + "\n  \"srcProjectCode\": \"PRJ.001\",     "
  					 + "\n  \"srcCenterCode\": \"1-ANALİZ\",     "
                     + "\n  \"dstItemCode\":\"H00012\",  "
                     + "\n  \"dstAmount\": 1,"
 					 + "\n  \"dstVariantCode\": \" \",        "
                     + "\n  \"dstUnitCode\": \"ADET\",   "
                     + "\n  \"dstWareHouse\": \"2\"     "
 					 + "\n  \"dstProjectCode\": \"PRJ.002\",     "
                     + "\n  \"dstCenterCode\": \"2-GELİŞTİRME\",     "
                     + "\n },"
                     + "\n { "
                     + "\n  \"srcItemCode\": \"H00001\", "
                     + "\n  \"srcAmount\": \"1\",        "
                     + "\n  \"srcVariantCode\": \" \",        "
                     + "\n  \"srcUnitCode\": \"ADET\",   "
                     + "\n  \"srcWareHouse\": \"0\","
 					 + "\n  \"srcProjectCode\": \"PRJ.003\",     "
  					 + "\n  \"srcCenterCode\": \"3-TEST\",     "
                     + "\n  \"dstItemCode\":\"H00012\",  "
                     + "\n  \"dstAmount\": 1,"
 					 + "\n  \"dstVariantCode\": \" \",        "
                     + "\n  \"dstUnitCode\": \"ADET\",   "
                     + "\n  \"dstWareHouse\": \"2\"     "
 					 + "\n  \"dstProjectCode\": \"PRJ.006\",     "
                     + "\n  \"dstCenterCode\": \"4-EĞİTİM\",     "
                     + "\n }"
                     + "\n ]"
                    + "\n }";


            bool ok = Global.UnityApp.ItemVirement(json);
            if (!ok)
            {
                MessageBox.Show("Hata Mesajı : " + Global.UnityApp.GetLastError()+ " - " + Global.UnityApp.GetLastErrorString());
            }
            else
            {
                MessageBox.Show("OK");
            }
        }

APREInvoiceCheck
Ürün içerisindeki e-Fatura Mükellef Kontrol işleminin yapılmasını sağlar.
 
Parametre	Type	Açıklama
arpRef	Integer	Cari hesap kartının referansıdır.
Return Type	Açıklama
Boolean	e-Fatura mükellefi ise true değil ise false sonuç döner.
C# Örneği
1
2
3
4
5
6
7	UnityObjects.UnityApplication UnityApp;
//Create an UnityObject instance
UnityApp = new UnityObjects.UnityApplication();
            
bool ok = UnityApp.ARPEInvoiceCheck(12);
             
MessageBox.Show(ok.ToString());
ÖRNEK REQUEST
GET	http://localhost:32001/api/v1/methods/ARPEInvoiceCheck/12  


DATA Objects
ApplyADiscount
Sipariş,irsaliye ve faturalarda satır üzerindeki " indirim uygula " seçeneğinin Logo Object tarafında i=levini gören metod'dur.


Parametre	Type	Açıklama
discCode	String	 İndirim kodunu belirtip ona göre indirim yapması sağlanır.
Return Type	Açıklama
Boolean	Kampanya uygulama işleminin başarıyla gerçekleştirilip geçekleştirilemediğini döner.
 
C# Örneği
 UnityObjects.Data order = Global.UnityApp.NewDataObject(UnityObjects.DataObjectType.doSalesOrderSlip);
 order.New();
 order.DataFields.FieldByName("NUMBER").Value = "~";
 order.DataFields.FieldByName("DATE").Value = "01.07.2015";
 order.DataFields.FieldByName("TIME").Value = 271658552;
 order.DataFields.FieldByName("ARP_CODE").Value = "CRH01";
 order.DataFields.FieldByName("ARP_CODE_SHPM").Value = "CRH01";
 order.DataFields.FieldByName("SHIPLOC_CODE").Value = "UMRANIYE01";
 order.DataFields.FieldByName("ORDER_STATUS").Value = 4;
 order.DataFields.FieldByName("CREATED_BY").Value = 1;
 order.DataFields.FieldByName("CURRSEL_TOTAL").Value = 1;
 order.DataFields.FieldByName("DEDUCTIONPART1").Value = 2;
 order.DataFields.FieldByName("DEDUCTIONPART2").Value = 3;
 UnityObjects.Lines transactions_lines = order.DataFields.FieldByName("TRANSACTIONS").Lines;
 transactions_lines.AppendLine();
 transactions_lines[transactions_lines.Count - 1].FieldByName("TYPE").Value = 0;
 transactions_lines[transactions_lines.Count - 1].FieldByName("MASTER_CODE").Value = "TICARI01";
 transactions_lines[transactions_lines.Count - 1].FieldByName("QUANTITY").Value = 12;
 transactions_lines[transactions_lines.Count - 1].FieldByName("PRICE").Value = 3652;
 transactions_lines[transactions_lines.Count - 1].FieldByName("VAT_RATE").Value = 18;
 transactions_lines[transactions_lines.Count - 1].FieldByName("UNIT_CODE").Value = "ADET";
 transactions_lines[transactions_lines.Count - 1].FieldByName("UNIT_CONV1").Value = 1;
 transactions_lines[transactions_lines.Count - 1].FieldByName("UNIT_CONV2").Value = 1;
 transactions_lines[transactions_lines.Count - 1].FieldByName("ORDER_RESERVE").Value = 1;
 transactions_lines[transactions_lines.Count - 1].FieldByName("DUE_DATE").Value = "01.07.2015";
 transactions_lines[transactions_lines.Count - 1].FieldByName("EDT_CURR").Value = 1;
 transactions_lines[transactions_lines.Count - 1].FieldByName("ORG_DUE_DATE").Value = "01.07.2015";
 transactions_lines[transactions_lines.Count - 1].FieldByName("ORG_QUANTITY").Value = 12;
 transactions_lines[transactions_lines.Count - 1].FieldByName("ORG_PRICE").Value = 3652;
 transactions_lines[transactions_lines.Count - 1].FieldByName("RESERVE_DATE").Value = "01.07.2015";
 transactions_lines[transactions_lines.Count - 1].FieldByName("RESERVE_AMOUNT").Value = 12;
 order.ApplyADiscount("INDIRIM01");
 if (order.Post() == true)
   {
     MessageBox.Show("POST OK !");
   }
 else
   {
     if (order.ErrorCode != 0)
   {
     MessageBox.Show("DBError(" + order.ErrorCode.ToString() + ")-" + order.ErrorDesc + order.DBErrorDesc);
   }
     else if (order.ValidateErrors.Count > 0)
            {
              string result = "XML ErrorList:";
              for (int i = 0; i < order.ValidateErrors.Count; i++)
                 {
                   result += "(" + order.ValidateErrors[i].ID.ToString() + ") - " + order.ValidateErrors[i].Error;
                 }
              MessageBox.Show(result);
            }
   }

ApplyCampaign
ERP ürünlerin 'de Alım ve Satış İrsaliyelerinde,Siparişlerde,Faturalarda sağ tuş kampanya uygulama işlemini LObjects ile run-time yapabilmenize yarayan fonksiyondur. Bellekte yeni oluşturduğumuz veya okuduğumuz Alım veya Satış İrsaliyesi,Siparişler,Faturalarda veri nesnemizin bir methodu olarak çalışır.

Sadece uygulamamız yeterlidir. İşlemin başarıyla gerçekleşme durumunu döndüğü bir result bollean değeri vardır. İşlemler ve hesaplamalar başarılı bir POST işlemi ile gerçekleştirilmektedir. POST TRUE dönmeden kaydınızı tam olarak oluşturamazsınız. Çünkü hesaplamaların bir kısmı POST içerisinde yapılmaktadır. Eğer Satış ve Alış irsaliyelerinin dışında bu methodu kullanırsanız run-time sırasında method bulunamadı hatası alırsınız. 


Return Type	Açıklama
Boolean	Kampanya uygulama işleminin başarıyla gerçekleştirilip geçekleştirilemediğini döner.
 
C# Örneği
UnityObjects.Data Itm = UnityApp.NewDataObject(UnityObjects.DataObjectType.doMaterial);
Itm.New();
Itm.DataFields.FieldByName("CARD_TYPE").Value = 1;
Itm.DataFields.FieldByName("CODE").Value = "MALZEME.01";
Itm.DataFields.FieldByName("NAME").Value = "Logo Objects Sample Item";
Itm.DataFields.FieldByName("AUXIL_CODE").Value = "SPECODE";
Itm.DataFields.FieldByName("USEF_PURCHASING").Value = 1;
Itm.DataFields.FieldByName("USEF_SALES").Value = 1;
Itm.DataFields.FieldByName("USEF_MM").Value = 1;
Itm.DataFields.FieldByName("UNITSET_CODE").Value = "05";
Itm.DataFields.FieldByName("SELVAT").Value = 18;
Itm.DataFields.FieldByName("RETURNVAT").Value = 18;
Itm.ApplyCampaign();
if (!order_slip.Post())
{
    if (order_slip.ErrorCode != 0)
    {
        MessageBox.Show("DB Error : (" + order_slip.ErrorCode.ToString() + ") - " + order_slip.ErrorDesc);
    }
}
else
{
    if (order_slip.ValidateErrors.Count > 0)
    {
        for (int i = 0; i < order_slip.ValidateErrors.Count - 1; i++)
        {
            MessageBox.Show("XML Error : (" + order_slip.ValidateErrors[i].ID.ToString() + ") - " + order_slip.ValidateErrors[i].Error);
        }
    }
}

ApplyCondition
Satış koşulu uygulama işlemini yapar.


Return Type	Açıklama
Boolean	Koşulun sağlanma işleminin başarıyla gerçekleştirilip geçekleştirilemediğini döner. 
 
 
C# Örneği
UnityObjects.Data order = Global.UnityApp.NewDataObject(UnityObjects.DataObjectType.doSalesOrderSlip);
order.New();
order.DataFields.FieldByName("NUMBER").Value = "~";
order.DataFields.FieldByName("DATE").Value = "01.07.2015";
order.DataFields.FieldByName("TIME").Value = 271658552;
order.DataFields.FieldByName("ARP_CODE").Value = "CRH01";
order.DataFields.FieldByName("ARP_CODE_SHPM").Value = "CRH01";
order.DataFields.FieldByName("SHIPLOC_CODE").Value = "UMRANIYE01";
order.DataFields.FieldByName("ORDER_STATUS").Value = 4;
order.DataFields.FieldByName("CREATED_BY").Value = 1;
order.DataFields.FieldByName("CURRSEL_TOTAL").Value = 1;
order.DataFields.FieldByName("DEDUCTIONPART1").Value = 2;
order.DataFields.FieldByName("DEDUCTIONPART2").Value = 3;
UnityObjects.Lines transactions_lines = order.DataFields.FieldByName("TRANSACTIONS").Lines;
transactions_lines.AppendLine();
transactions_lines[transactions_lines.Count - 1].FieldByName("TYPE").Value = 0;
transactions_lines[transactions_lines.Count - 1].FieldByName("MASTER_CODE").Value = "TICARI01";
transactions_lines[transactions_lines.Count - 1].FieldByName("QUANTITY").Value = 12;
transactions_lines[transactions_lines.Count - 1].FieldByName("PRICE").Value = 3652;
transactions_lines[transactions_lines.Count - 1].FieldByName("VAT_RATE").Value = 18;
transactions_lines[transactions_lines.Count - 1].FieldByName("UNIT_CODE").Value = "ADET";
transactions_lines[transactions_lines.Count - 1].FieldByName("UNIT_CONV1").Value = 1;
transactions_lines[transactions_lines.Count - 1].FieldByName("UNIT_CONV2").Value = 1;
transactions_lines[transactions_lines.Count - 1].FieldByName("ORDER_RESERVE").Value = 1;
transactions_lines[transactions_lines.Count - 1].FieldByName("DUE_DATE").Value = "01.07.2015";
transactions_lines[transactions_lines.Count - 1].FieldByName("EDT_CURR").Value = 1;
transactions_lines[transactions_lines.Count - 1].FieldByName("ORG_DUE_DATE").Value = "01.07.2015";
transactions_lines[transactions_lines.Count - 1].FieldByName("ORG_QUANTITY").Value = 12;
transactions_lines[transactions_lines.Count - 1].FieldByName("ORG_PRICE").Value = 3652;
transactions_lines[transactions_lines.Count - 1].FieldByName("RESERVE_DATE").Value = "01.07.2015";
transactions_lines[transactions_lines.Count - 1].FieldByName("RESERVE_AMOUNT").Value = 12;
order.ApplyCondition();
if (order.Post() == true)
  {
    MessageBox.Show("POST OK !");
  }
else
  {
    if (order.ErrorCode != 0)
  {
    MessageBox.Show("DBError(" + order.ErrorCode.ToString() + ")-" + order.ErrorDesc + order.DBErrorDesc);
  }
    else if (order.ValidateErrors.Count > 0)
           {
             string result = "XML ErrorList:";
             for (int i = 0; i < order.ValidateErrors.Count; i++)
                {
                  result += "(" + order.ValidateErrors[i].ID.ToString() + ") - " + order.ValidateErrors[i].Error;
                }
             MessageBox.Show(result);
           }
  }

ApplyRePayPln
Cari hesap kartı fişlerinde geri ödeme planı uygulama işlemini yapar.


Parametre	Type	Açıklama
lineNr	Long	Satır indexsini belirtir.
rePayPCode	String	Geri ödeme planın kodunu belirtiriz.
Return Type	Açıklama
Boolean	Geri ödeme işleminin başarıyla yapılıp yapılmadığı bilgisini döner.
 
 
C# Örneği
UnityObjects.Data  arp_voucher = Global.UnityApp.NewDataObject(UnityObjects.DataObjectType.doARAPVoucher);
 arp_voucher.New();
 arp_voucher.DataFields.FieldByName("NUMBER").Value = '~';
 arp_voucher.DataFields.FieldByName("DATE").Value ="24.05.2013";
 arp_voucher.DataFields.FieldByName("ARP_CODE").Value = "C1";
 arp_voucher.DataFields.FieldByName("CURRSEL_TOTALS").Value = 1;
 arp_voucher.DataFields.FieldByName("AUXIL_CODE").Value = "OZELKOD";
 arp_voucher.DataFields.FieldByName("TIME").Value = "186006283";
 arp_voucher.DataFields.FieldByName("TYPE").Value = 70; 
 arp_voucher.DataFields.FieldByName("DIVISION").Value = 1;
 arp_voucher.DataFields.FieldByName("DEPARTMENT").Value = 1;
 arp_voucher.DataFields.FieldByName("BANKACC_CODE").Value = "İŞB01 KKHESAP";
 UnityObjects.Lines transaction = arp_voucher.DataFields.FieldByName("TRANSACTIONS").Lines;
 transaction.AppendLine();
 transaction[(transaction.Count - 1)].FieldByName("ARP_CODE").Value = "C1";
 transaction[(transaction.Count - 1)].FieldByName("TRANNO").Value = arp_voucher.DataFields.FieldByName("NUMBER").Value;
 transaction[(transaction.Count - 1)].FieldByName("CREDIT_CARD_NO").Value = "1234567890123456";
 transaction[(transaction.Count - 1)].FieldByName("AUXIL_CODE").Value = "OZELKOD";
 transaction[(transaction.Count - 1)].FieldByName("TC_XRATE").Value = 1;
 transaction[(transaction.Count - 1)].FieldByName("TC_AMOUNT").Value = 1000;

if (!arp_voucher.ApplyRePayPln(0, "GERIODEME.01"))
    {
     MessageBox.Show(Global.UnityApp.GetLastError().ToString() + ":" + Global.UnityApp.GetLastErrorString().ToString());
    }
if (arp_voucher.Post() == true)
   {
     MessageBox.Show("POST OK !");
   }
else
   {
      if (arp_voucher.ErrorCode != 0)
        {
          MessageBox.Show("DBError(" + arp_voucher.ErrorCode.ToString() + ")-" + arp_voucher.ErrorDesc + arp_voucher.DBErrorDesc);
        }
      else if (arp_voucher.ValidateErrors.Count > 0)
             {
               string result = "XML ErrorList:";
               for (int i = 0; i < arp_voucher.ValidateErrors.Count; i++)
                  {
                    result += "(" + arp_voucher.ValidateErrors[i].ID.ToString() + ") - " + arp_voucher.ValidateErrors[i].Error;
                  }
                    MessageBox.Show(result);
              }
    }

ApplyRePayPlnForInv
Fatura  geri ödeme planı uygulama işlemini yapar.


Parametre	Type	Açıklama
rePayPCode	String	Geri ödeme planın kodunu belirtiriz.
Return Type	Açıklama
Boolean	Geri ödeme işleminin başarıyla yapılıp yapılmadığı bilgisini döner.
 
C# Örneği
UnityObjects.Data invoice = Global.UnityApp.NewDataObject(UnityObjects.DataObjectType.doSalesInvoice);
invoice.New();
invoice.DataFields.FieldByName("TYPE").Value = 8;                            
invoice.DataFields.FieldByName("NUMBER").Value = "STF01";
invoice.DataFields.FieldByName("DATE").Value = "09.05.2013";
invoice.DataFields.FieldByName("TIME").Value = 153164321;
invoice.DataFields.FieldByName("ARP_CODE").Value = "SEVKC02";                
invoice.DataFields.FieldByName("POST_FLAGS").Value = 247;                    
invoice.DataFields.FieldByName("VAT_RATE").Value = 18;
invoice.DataFields.FieldByName("DOC_DATE").Value = "09.05.2013";             
invoice.DataFields.FieldByName("SOURCE_WH").Value = 0;                       
invoice.DataFields.FieldByName("SOURCE_COST_GRP").Value = 0;                 
invoice.DataFields.FieldByName("DIVISION").Value = 0;                        
invoice.DataFields.FieldByName("DEPARTMENT").Value = 0;                      
invoice.DataFields.FieldByName("FACTORY").Value = 0;                         
UnityObjects.Lines invoiceLine = invoice.DataFields.FieldByName("TRANSACTIONS").Lines;
invoiceLine.AppendLine();
invoiceLine[invoiceLine.Count - 1].FieldByName("TYPE").Value = 0;                   
invoiceLine[invoiceLine.Count - 1].FieldByName("SOURCEINDEX").Value = 0;            
invoiceLine[invoiceLine.Count - 1].FieldByName("SOURCECOSTGRP").Value = 0;          
invoiceLine[invoiceLine.Count - 1].FieldByName("MASTER_CODE").Value = "TM03"; 
invoiceLine[invoiceLine.Count - 1].FieldByName("QUANTITY").Value = 2;
invoiceLine[invoiceLine.Count - 1].FieldByName("PRICE").Value = 2542.37288;               
invoiceLine[invoiceLine.Count - 1].FieldByName("CURR_PRICE").Value = 160;           
invoiceLine[invoiceLine.Count - 1].FieldByName("UNIT_CODE").Value = "ADET";         
invoiceLine[invoiceLine.Count - 1].FieldByName("VAT_RATE").Value =18;              
invoiceLine[invoiceLine.Count - 1].FieldByName("EDT_CURR").Value = 1;             

if (!invoice.ApplyRePayPlnForInv("GO.01"))
{
    MessageBox.Show(Global.UnityApp.GetLastErrorString());
}
if (invoice.Post() == true)
   {
     MessageBox.Show("POST OK !");
   }
else
   {
      if (invoice.ErrorCode != 0)
        {
          MessageBox.Show("DBError(" + invoice.ErrorCode.ToString() + ")-" + invoice.ErrorDesc + invoice.DBErrorDesc);
        }
      else if (invoice.ValidateErrors.Count > 0)
             {
               string result = "XML ErrorList:";
               for (int i = 0; i < invoice.ValidateErrors.Count; i++)
                  {
                    result += "(" + invoice.ValidateErrors[i].ID.ToString() + ") - " + invoice.ValidateErrors[i].Error;
                  }
                    MessageBox.Show(result);
              }
    }

CreateCompositeLines
ipariş,irsaliye veya faturaya Karma koli tipindeki (LineType=6) bir stok eklendiğinde karma kolinin alt kalemleri otomatik eklenmez.Bu alt kalemleri otomatik eklemek için CreateCompositeLines metodunu işletmemiz gerekmektedir.
Sipariş, irsaliye ve faturalar için satırlar eklendikten sonra ve Post edilmeden önce bu metod işletilerek karmakoli alt kalemleri otomatik olarak eklemiş oluruz.Bu metodu işletmezsek karma koli satırları eklenmeyecektir.

C# Örneği
UnityObjects.Data orderslip = Global.UnityApp.NewDataObject(UnityObjects.DataObjectType.doSalesOrderSlip);
orderslip.New();
orderslip.DataFields.FieldByName("NUMBER").Value = "~";
orderslip.DataFields.FieldByName("DATE").Value = DateTime.Today;
object MyTime = null;
UnityApp.PackTime(DateTime.Now.Hour, DateTime.Now.Minute, DateTime.Now.Second, ref MyTime);
orderslip.DataFields.FieldByName("TIME").Value = (int)MyTime;
orderslip.DataFields.FieldByName("ARP_CODE").Value = "AAA";
orderslip.DataFields.FieldByName("ORDER_STATUS").Value = 1;
orderslip.DataFields.FieldByName("CURRSEL_TOTAL").Value = 1;
orderslip.DataFields.FieldByName("AFFECT_RISK").Value = 1;
UnityObjects.Lines transactionstransaction = orderslip.DataFields.FieldByName("TRANSACTIONS").Lines;
transactionstransaction.AppendLine();
transactionstransaction[transactionstransaction.Count - 1].FieldByName("TYPE").Value = 6;
transactionstransaction[transactionstransaction.Count - 1].FieldByName("MASTER_CODE").Value = "KARMA.KOLI";
transactionstransaction[transactionstransaction.Count - 1].FieldByName("QUANTITY").Value = 1;
transactionstransaction[transactionstransaction.Count - 1].FieldByName("PRICE").Value = 1;
transactionstransaction[transactionstransaction.Count - 1].FieldByName("VAT_RATE").Value = 18;
transactionstransaction[transactionstransaction.Count - 1].FieldByName("UNIT_CODE").Value = "ADET";
transactionstransaction[transactionstransaction.Count - 1].FieldByName("UNIT_CONV1").Value = 1;
transactionstransaction[transactionstransaction.Count - 1].FieldByName("UNIT_CONV2").Value = 1;
transactionstransaction[transactionstransaction.Count - 1].FieldByName("DUE_DATE").Value = DateTime.Today;
transactionstransaction[transactionstransaction.Count - 1].FieldByName("EDT_CURR").Value = 1;
orderslip.CreateCompositeLines();
if (orderslip.Post() == true)
{
    MessageBox.Show("POST OK !");
}
else
{
    if (orderslip.ErrorCode != 0)
    {
        MessageBox.Show("DBError(" + orderslip.ErrorCode.ToString() + ") - " + orderslip.ErrorDesc + orderslip.DBErrorDesc);
    }
    else if (orderslip.ValidateErrors.Count > 0)
    {
        string result = "XML Error List : " + "\n";
        for (int i = 0; i < orderslip.ValidateErrors.Count; i++)
        {
            result += "(" + orderslip.ValidateErrors[i].ID.ToString() + ") - " + orderslip.ValidateErrors[i].Error + "\n";
        }
        MessageBox.Show(result);
    }
}

Data Nesneleri
İndex	DataObjectTypes	Açıklama
0	doMaterial	Malzeme
1	doMaterialSlip	Malzeme Fişi
2	doPurchService	Alınan Hizmet Kartı
3	doSalesOrderSlip	Satış Sipariş
4	doPurchOrderSlip	Alım Sipariş
5	doPurchDisc	Alım İndirim Kartı
6	doPurchExpn	Alım masraf kartı
7	doSalesDisc	Satış İndirim Kartı
8	doSalesExpn	Satış Masraf Kartı
9	doPurchProm	Alım Promosyon
10	doSalesProm	Satıs Promosyon
11	doPurchPriceItem	Mal Alım Fiyat Kartı
12	doPurchPriceService	Hizmet Alım Fiyat Kartı
13	doSalesPriceItem	Malzeme Satış Fiyatı
14	doSalesPriceService	Hizmet Satış Fiyatı
15	doSalesmanCl	Satıcı-Cari Bağlatısı
16	doPurchDispatch	Alım İrsaliye
17	doSalesDispatch	Satış İrsaliye
18	doPurchInvoice	Alım Fatura
19	doSalesInvoice	Satış Fatura
20	doTransCqPn	Çek/Senet Devir
21	doCQPnRoll	Çek/Senet Bordorsu
22	doBank	Banka Kartı
23	doBankAccount	Banka Hesap Kartı
24	doBankVoucher	Banka Fişi
25	doGLAccount	Muhasebe Hesap Kartı
26	doGLVoucher	Muhasebe Fişi
27	doOverheadPoolAcc	Masraf Merkezi
28	doSafeDeposit	Kasa Kartları
29	doSafeDepositTrans	Kasa İşlemleri
30	doAccountsRP	Cari Kart
31	doARAPVoucher	Cari Fiş
32	doPayPlan	Ödeme Planı
33	doUnitSet	Birim Seti
34	doArpShipLic  	Cari Sevkiyat Adresleri
35	doFARegistry	Sabit Kıymet Kaydı
36	doItemLangExt	Malzeme Farklı Dilde Açıklamalar
37	doARAPLangExt	Cari Kart Farklı Dil Açıklamaları
38	doBankLangExt	Banka Kartı Farklı Dilde Açıklamalar
39	doGLAcLangExt	Hesap Kartı Farklı Dil Açıklamalar
40	doCustLangExt	Müşteri Yabancı Dil Açıklamaları
41	doItemAlters	Alternatifler
42	doItemBOM	Malzeme Reçetesi
43	doSerialLot	Seri Lot Tablosu
44	doItChCodes	Malzeme Özellikleri
45	doWstChars	İş İstasyonu Özellikleri
46	doWorkStat	İş İstasyonu
47	doWstGroup	İş İstasyonu Grubu
48	doEmployee	Çalışan
49	doEmpGroup	Çalışan Grupları
50	doWrStCost	İş İstasyonu Maliyetleri
51	doEmplCost	Çalışan Maliyetleri
52	doShifts	Vardiya
53	doShiftAsg	Vardiya Ataması
54	doBOM	Ürün Reçetesi
55	doOperation	Operasyonlar
56	doRouting	Rota Tanımı
57	doPrdParams	Reçete Sabitleri
58	doQCCSet	Kalite Kontrol Seti
59	doDelCodes	Teslimat Kodu
60	doGrpCodes	Grup Kodları
61	doPosCodes	Satıcı Pozisyon Kodları
62	doPPGCodes	Ödeme Planı Grup Kodu
63	doSpeCodes	Özel Kodlar
64	doCypCodes	Yetki Kodları
65	doSalesmanCust	Satıcı-Cari Bağlantısı(Satış Yönetimi Flag’i Açıkken)
66	doSlsRoute	Satıcı Rota Baglantısı
67	doSlsTarget	Satıcı Hedef Bağlantısı
68	doPrCampaign	Alım Kampanyası
69	doSlCampaign	Satış Kampanya
70	doDistVehicle	Dağıtım Aracı
71	doDistRouting	Dağıtım Rotası
72	doDistOrder	Dağıtım Emri
73	doCountry	Ülke Bilgileri
74	doCity	Şehir Bilgileri
75	doPostCode	Posta Kodu Bilgisi
76	doTown	İlçe Bilgileri
77	doDistrict	Semt
78	doItemClsAsgn	Malzeme Sınıfı Ataması
79	doStdCostPrd	Standart Maliyet Periodları
80	doItmStdCosts	Malzeme Standart Maliyeti
81	doWStdCosts	İş İstasyonu Standart Maliyeti
82	doEmpStdCosts	Çalışan Standart Maliyeti
83	doStdBOMCosts	Standart Reçete Maliyeti
84	doExceptns	İş istasyonu İstisnaları
85	doSalesService	Verilen Hizmet Kartı
86	doAddTax	Ek Vergi Kartı
87	doPrdLine	Ürün Hattı
88	doDemindPegging	Talep Karşılama
89	doDateDiffInvoice	Fiyat Farkı Faturası
90	doProject	Proje Kartı
91	doRePayPlan	Geri Ödeme Planları
92	doDistTemp	Dağıtım Şablonları
93	doLocCodes	Stok Yeri Kodları
94	doSalesConditionLine	Satış Koşulları (Fiş Satırları)
95	doSalesConditionGn	Satış Koşulları (Fiş Geneli)
96	doPurchConditionLine	Alış Koşulları (Fiş Satırları)
97	doPurchConditionGn	Alış Koşulları (Fiş Geneli) 
98	doDemand	Talep
99	doEximCredit	İhracat Kredisi (Döviz/Exim)
100	doFreeZone	Serbest Bölge Tanımı
101	doCustom	Gümrük Tanımı
102	doImportOpFiche	İthalat Operasyon Fişi
103	doExportOpFiche	İhracat Operasyon Fişi
104	doExTypedPurchInv	İhracat / İhraç Kayıtlı Alım Faturaları
105	doExTypedSalesInv	İhracat / İhraç Kayıtlı Satış Faturaları
106	doDIIB	İhracat / Dahilde İşleme İzin Belgesi
107	doMovementFiche	İthalat / Malzeme Dolaşım Fişi
108	doNationalizeFiche	İthalat / Millileştirme Fişleri
109	doEximDist	İthalat / Dağıtım Fişleri
110	doMark	Marka Tanımları
111	doDefField	Tanımlı Alanlar
112	doDefFieldDef	Tanımlı Alan Tanımları
113	doMandField	Zorunlu Alanlar
114	doCategList	Tanımlı Alan Kategori Listeleri
115	doRoleDef	İş Akış Yönetimi  / AnaKayıtlar / İş Akış Rol Tanımları
116	doWFlowCard	İş Akış Yönetimi  / AnaKayıtlar / İş Akış Kartları
117	doOccupation	Planlanan/Gerçekleşen Kaynak Kullanımı Girişi
118	doGrpArp	Grup Şirketi
119	doCollatrlRoll	Teminat Bordroları
120	doPurchOfOrder	Satınalma Teklif Yönetimi – Emir
121	doPurchOffer	Satınalma Teklif Yönetimi – Teklif
122	doPurchOfCont	Satınalma Teklif Yönetimi – Sözleşme
123	doQProduction	Hızlı Üretim Fişi
124	doCustomer	Müşteriler (Teklif Yönetimi Kategorileri)
125	doSaleOfCateg	Satış Kategorileri
126	doContact	İlgili Kişiler (Teklif Yönetimi Kategorileri)
127	doBankCredit	Banka Kredileri
128	doCostDistFiche	Maliyet Dağıtım Fişi
129	doCharSet	Malzeme Özellik Seti
130	doVariant	Malzeme Variantları
131	doEntegCode	Muhasebe Bağlantı Kodları
132	doEngChange	Mühendislik değişiklikleri
133	doQCCAsgn	Malzeme Kartı Kalite Kontrol Kriteri atamaları
134	doFAZFiche	Zimmet formu (Sabit Kıymet İşlemleri)
135	doSalesOffer	Satış Teklif Formu
136	doSalesCont	Satış Sözleşmesi
137	doSalesProvDistFc	Satış Provizyon Dağıtım Fişleri
138	doStopCause	Durma nedenleri
139	doSalesOpportunity	Satış Fırsatları
140	doSalesActivity 	Satış Faaliyetleri



DataExtension
Tek bir ek tablonun tüm özellikleri ve metodlarını listeler. Ek tablolar üzerindeki tüm işlemleri bu nesne yardımıyla yaparız.


Data Properties	Type	Açıklama
TableName	String	Ek tablonun veri tabanındaki ismini döner.
Number	Long	Ek tablonun index numarsını döner.
Index	Long	Kolonun index’idir. Index (Sıra) numarasıdır. 0'dan başlar. Atanabilen bir alan değildir. CollectionItem Index'ini döner. Kayıtlara ulaşırken Index numaralarını kullanmak hızlı olmasına karşın önerilmez.
Parent	Unknown	ICollectionItem’dan inherit edilmiş bir property’dir. IDataFields türünden bir nesne bilgisi tutar. Read veya Write işlemi yapılamaz. Unity Object bu özelliği iç işleyişinde kullanır.
Collection Properties	Type	Açıklama
Fields	IExtensionFields	Ek tablonun tüm alanları ExtensionField tipinde IExtensionFields collection'ının içinde tanımlanmıştır. Ek tablo alanları üzerindeki tüm işlemleri bu nesne yardımıyla yaparız.


 
C# Örneği
UnityObjects.Data ARP = UnityApp.NewDataObject(UnityObjects.DataObjectType.doAccountsRP);
ARP.Read(2);
           if (ARP.HasDataExtensions)
           {
               UnityObjects.DataExtensions ARPExt = ARP.DataExtensions;
               ARPExt[0].Fields.FieldByName("EK_STR").Value = "Ek bilgi...";
           }
           if (ARP.Post())
           {
              MessageBox.Show("Post Ok");
           }
           else
            { 
              MessageBox.Show(UnityApp.GetLastError().ToString() + ":" + UnityApp.GetLastErrorString().ToString());
            }

DataExtensions
Oluşturduğumuz IData nesnesinin tipine ait tabloya ek tablo tanımları yapılmışsa bu ek tablolara IDataExtensions nesnesi ile ulaşırız. Nesne tipimize ait (Mesela doAccountRP tipinde bir IData oluşturursak bu nesne tipi LG_XXX_CLCARD tablosuyla ilişkilidir.
Cari hesaplara ek tablo tanımı yaparsak bu CLCARD tablosuyla ilişkilendirilecektir.) tabloya bağlı tüm ek tablolar Collection tipindeki bu nesnede her bir nesne CollectionItem olarak tanımlıdır. CollectionItem indexi items metoduna geçilerek istenen ek tablo üzerinde çalışılabilir.


Methods	Type	Açıklama
Clear	Yok	ICollection'dan inherit edilmiş bir method'dur. Kullanılmamalıdır.
Delete(Index)	Boolean	Index parametresi olan bir metotdur. IData ek tablolarından (DataExtension) isteneni siler. DataExtension birer collectionItem olarak tanımlı olduklarından silmek istediğimiz Ek tablonun collectionItem index'ini bu metoda parametre olarak geçerek silmek istediğimiz DataExtension'ı sileriz. Silme işlemini check etmek için IData nesnesinin ErrorCode metodunu kullanabiliriz. İşlemler bellekte yapılmaktadır, veri tabanına yansımaz.
Data Properties	Type	Açıklama
Count	Long	IDataExtension listesindeki eleman sayısını döner.
Item(Index)	IDataExtension	IDataExtensions collection’ında mevcut olan Ek tablolara (IDataExtension) Index numaraları ile ulaşmak için kullanılır.
Parent	Unknown	ICollection’dan inherit edilmiş bir property’dir. IData türünden bir nesne bilgisi tutar. Read veya Write işlemi yapılamaz. Unity Object bu özelliği iç işleyişinde kullanır.


C# Örneği
UnityObjects.Data ARP = UnityApp.NewDataObject(UnityObjects.DataObjectType.doAccountsRP);
ARP.Read(2);
           if (ARP.HasDataExtensions)
           {
               UnityObjects.DataExtensions ARPExt = ARP.DataExtensions;
               ARPExt[0].Fields.FieldByName("EK_STR").Value = "Ek bilgi...";
           }
           if (ARP.Post())
           {
              MessageBox.Show("Post Ok");
           }
           else
            { 
              MessageBox.Show(UnityApp.GetLastError().ToString() + ":" + UnityApp.GetLastErrorString().ToString());
            }

DataField
Tek bir alanın tüm özellikleri ve metodlarını listeler. Alan üzerindeki tüm işlemleri bu nesne yardımıyla yaparız.

Data Properties	Type	Açıklama
DBFieldName	String	Alanın Veri tabanındaki adını döner.
FieldName	String	Alanın XML şablonunda karşılık gelen adını döner.
FieldOffset	Long	DataField'ın DataFields içindeki Offsetini döner. Read Only bir özelliktir.
FieldSize	Long	
FieldType	FiledTypes	Index ve tablolar /Enumerated types/ FieldType bölümünde verilen tabloda filed tipine denk düşen numara döner.
Index	Long	Kolonun index’idir. Index (Sıra) numarasıdır. 0'dan başlar. Atanabilen bir alan değildir. CollectionItem Index'ini döner. Kayıtlara ulaşırken Index numaralarını kullanmak hızlı olmasına karşın önerilmez.
Parent	Unknown	ICollectionItem’dan inherit edilmiş bir property’dir. IDataFields türünden bir nesne bilgisi tutar. Read veya Write işlemi yapılamaz. Unity Object bu özelliği iç işleyişinde kullanır.
Value	Variant	Alanın içerdiği veri döner.
Collection Properties	Type	Açıklama
Lines	ILines 
Liste tipinde alanları açmak için kullanılır. (Transactions, Dispatch...)


C# Örneği
UnityObjects.Data vrnt;
UnityObjects.Lines vrntLines;
vrnt = Global.UnityApp.NewDataObject(UnityObjects.DataObjectType.doVariant);
vrnt.Read(1);
vrntLines = vrnt.DataFields.FieldByName("VRNT_ASSIGNS").Lines;
vrntLines[vrntLines.Count - 1].FieldByName("CHARVAL").Value = 2;
     if (!vrnt.Post())
     {
         LOData.ErrorControl(vrnt);
     }


DataFields
IData nesnesinden okuduğumuz veya eklemekte olduğumuz kayıdın alanlarının okunması veya atanması işlemi için bu nesneyi kullanırız. IDataFields nesnesi bize ilgili kayıdın tüm alanlarıyla ilgili count, Lines   gibi işlemlere olanak verir ve her alan için bir IDataField nesnesine ulaşmamıza yarar. IDataField nesnesi ile ilgili kayıdın bir alanına ulaştıktan sonra bu alanın Name, Size, Type, Index, Value bilgilerine ulaşırız. 


 
Methods	Type	Açıklama
Clear	Yok	ICollection'dan inherit edilmiş bir method'dur. Kullanılmamalıdır.
Delete(Index)	Boolean	Index parametresi olan bir metotdur. IData kayıdı kolonlarından (DataField) isteneni siler. DataField birer collectionItem olarak tanımlı olduklarından silmek istediğimiz DataField'ının collectionItem index'ini bu metoda parametre olarak geçerek silmek istediğimiz DataField'ı sileriz. Silme işlemini check etmek için IData nesnesinin ErrorCode metodunu kullanabiliriz. İşlemler bellekte yapılmaktadır, veri tabanına yansımaz.
DBFieldByName	IDataField 
IDataFields collection’ında mevcut olan fieldlara Veri tabanındaki ismi ile ulaşmak için kullanılır.
FieldByName	IDataField	IDataFields collection’ında mevcut olan fieldlara XML tag'lerindeki isimlerle ulaşmak için kullanılır.
GetFieldIndex	IDataFields	 Field sıra indexini döndürür. Bu index'e göre Lines nesnesinde FieldByName kullanmadan Item index üzerinden set işlemi gerçekleştirilebilir.
Data Properties	Type	Açıklama
Count	Integer	IDataField listesindeki eleman sayısını döner.
Item(Index)	IDataField 
IDataFields collection’ında mevcut olan fieldlara Index numaraları ile ulaşmak için kullanılır.
Parent	Unknown	ICollection'dan inherit edilmiş bir property’dir. IData türünden bir nesne bilgisi tutar. Read veya Write işlemi yapılamaz. Unity Object bu özelliği iç işleyişinde kullanır.



C# Örneği
UnityObjects.Data orderslip = null;
UnityObjects.Lines transactionstransaction = null;
orderslip = UnityApp.NewDataObject(UnityObjects.DataObjectType.doSalesOrderSlip);
orderslip.New();
orderslip.DataFields.FieldByName("NUMBER").Value = "~";
orderslip.DataFields.FieldByName("DATE").Value = DateTime.Today;
object MyTime = null;
UnityApp.PackTime(DateTime.Now.Hour, DateTime.Now.Minute, DateTime.Now.Second, ref MyTime);
orderslip.DataFields.FieldByName("TIME").Value = (int)MyTime;
orderslip.DataFields.FieldByName("ARP_CODE").Value = "AAA";
orderslip.DataFields.FieldByName("ORDER_STATUS").Value = 1;
orderslip.DataFields.FieldByName("CURRSEL_TOTAL").Value = 1;
orderslip.DataFields.FieldByName("AFFECT_RISK").Value = 1;
transactionstransaction = orderslip.DataFields.FieldByName("TRANSACTIONS").Lines;
transactionstransaction.AppendLine();
transactionstransaction[transactionstransaction.Count - 1].FieldByName("TYPE").Value = 0;
transactionstransaction[transactionstransaction.Count - 1].FieldByName("MASTER_CODE").Value = "ITEM01";
transactionstransaction[transactionstransaction.Count - 1].FieldByName("QUANTITY").Value = 1;
transactionstransaction[transactionstransaction.Count - 1].FieldByName("PRICE").Value = 1;
transactionstransaction[transactionstransaction.Count - 1].FieldByName("VAT_RATE").Value = 18;
transactionstransaction[transactionstransaction.Count - 1].FieldByName("UNIT_CODE").Value = "ADET";
transactionstransaction[transactionstransaction.Count - 1].FieldByName("UNIT_CONV1").Value = 1;
transactionstransaction[transactionstransaction.Count - 1].FieldByName("UNIT_CONV2").Value = 1;
transactionstransaction[transactionstransaction.Count - 1].FieldByName("DUE_DATE").Value = DateTime.Today;
transactionstransaction[transactionstransaction.Count - 1].FieldByName("EDT_CURR").Value = 1;
  if (orderslip.Post() == true)
    {
      MessageBox.Show("POST OK !");
    }
  else
   {
      if (orderslip.ErrorCode != 0)
   {
MessageBox.Show("DBError(" + orderslip.ErrorCode.ToString() + ") - " + orderslip.ErrorDesc + orderslip.DBErrorDesc);
   }
else if (orderslip.ValidateErrors.Count > 0)
   {
       string result = "XML Error List : " + "\n";
       for (int i = 0; i < orderslip.ValidateErrors.Count; i++)
           {
             result += "(" + orderslip.ValidateErrors[i].ID.ToString() + ") - " + orderslip.ValidateErrors[i].Error + "\n";
           }
         MessageBox.Show(result);
          }
       }


Delete
IData nesnesinin veri buffer'ından silme işlemi yapar. Silme işlemi başarıyla gerçekleşirse TRUE, diğer durumlarda FALSE döner.Long tipindeki Reference parametresi, silinecek kayıdın logical referans numarasıdır.

Parametrede geçilmesi gereken referans numarası query yardımıyla alınabilir. Öncelikle yapılmış bir read metodu varsa yani bir kayda konumlanılmışdurumda ise Delete metodunu bu kayıt üzerinde direct (index numarası vermeden)uygulayabilirsiniz.Silme işleminin veri tabanında yapıldığı unutulmamalıdır. Ek bir işleme gerek kalmadan komut başarıyla işletilmişse kayıt veri tabanından silinmiştir. 

Delete metodunda herhangi bir kontrol yoktur. Hareket görmüş kart veya fiş Delete metoduyla veritabanından silinebilir.
Dolayısıyla kullanılması tavsiye edilmez.


Parametre	Type	Açıklama
Reference  	Long	Silinmek istenen kayıdın Logical referansıdır(LRef).
Return Type	Açıklama
Boolean  	Silme işlemi başarıyla tamamlanırsa TRUE, diğer durumlarda FALSE döner.
 
 
C# Örneği
int itemRef = 10001;
UnityObjects.Data Itm = UnityApp.NewDataObject(UnityObjects.DataObjectType.doMaterial);
if (Itm.Delete(itemRef))
{
    MessageBox.Show("Deleted");
}
 
EqualizePayAmnt
Ödeme hareketi bulunan fişlerde ödeme ve fiş toplamlarının eşitlenmesinde kullanılan method 'dur.


Return Type	Açıklama
Boolean	Ödeme Hareketi işleminin başarıyla gerçekleştirilip geçekleştirilemediğini döner. 
 
 
C# Örneği
UnityObjects.Data purdis = Global.UnityApp.NewDataObject(UnityObjects.DataObjectType.doPurchDispatch);
purdis.New();
purdis.DataFields.FieldByName("TYPE").Value = 1;
purdis.DataFields.FieldByName("NUMBER").Value = "~";
purdis.DataFields.FieldByName("DATE").Value = "31.03.2015";
purdis.DataFields.FieldByName("TIME").Value = 253245737;
purdis.DataFields.FieldByName("ARP_CODE").Value = "CRH01";
purdis.DataFields.FieldByName("PAYMENT_CODE").Value = "ODEME01";
purdis.DataFields.FieldByName("CREATED_BY").Value = 1;
purdis.DataFields.FieldByName("CURRSEL_TOTALS").Value = 1;
purdis.DataFields.FieldByName("DEDUCTIONPART1").Value = 2;
purdis.DataFields.FieldByName("DEDUCTIONPART2").Value = 3;
purdis.DataFields.FieldByName("DISP_STATUS").Value = 1;
UnityObjects.Lines transactions_lines = purdis.DataFields.FieldByName("TRANSACTIONS").Lines;
transactions_lines.AppendLine();
transactions_lines[transactions_lines.Count - 1].FieldByName("TYPE").Value = 0;
transactions_lines[transactions_lines.Count - 1].FieldByName("MASTER_CODE").Value = "MLZ04";
transactions_lines[transactions_lines.Count - 1].FieldByName("PAYMENT_CODE").Value = "ODEME01";
transactions_lines[transactions_lines.Count - 1].FieldByName("QUANTITY").Value = 100;
transactions_lines[transactions_lines.Count - 1].FieldByName("PRICE").Value = 100;
transactions_lines[transactions_lines.Count - 1].FieldByName("UNIT_CODE").Value = "ADET";
transactions_lines[transactions_lines.Count - 1].FieldByName("UNIT_CONV1").Value = 1;
transactions_lines[transactions_lines.Count - 1].FieldByName("UNIT_CONV2").Value = 1;
transactions_lines[transactions_lines.Count - 1].FieldByName("VAT_RATE").Value = 18;
transactions_lines[transactions_lines.Count - 1].FieldByName("EDT_CURR").Value = 1;
transactions_lines[transactions_lines.Count - 1].FieldByName("MONTH").Value = 3;
transactions_lines[transactions_lines.Count - 1].FieldByName("YEAR").Value = 2015;
purdis.EqualizePayAmnt();
if (purdis.Post() == true)
  {
     MessageBox.Show("POST OK !");
  }
else
  {
     if (purdis.ErrorCode != 0)
       {
          MessageBox.Show("DBError(" + purdis.ErrorCode.ToString() + ")-" + purdis.ErrorDesc + purdis.DBErrorDesc);
       }
     else if (purdis.ValidateErrors.Count > 0)
            {
               string result = "XML ErrorList:";
               for (int i = 0; i < purdis.ValidateErrors.Count; i++)
                  {
                      result += "(" + purdis.ValidateErrors[i].ID.ToString() + ") - " + purdis.ValidateErrors[i].Error;
                  }
               MessageBox.Show(result);
             }
   }
 
ExportImage
Malzeme Kartı ve Cari Hesap kartı üzerine eklenebilen resimlerin dışarıya jpeg formatında export eden bir komuttur.


Parametre	Type	Açıklama
ImgPath	string	Kaydedilecek resmin yolu ve ismi
Indx 	byte	Malzeme kartı üzerinde 2 resim vardır.  İlk resim için bu parametreye 1 ikicisi için ise 2 verilmelidir.
Return Type	Açıklama
Boolean	Dışarıya alma işi başarılı olursa true, başarısız olursa false değeri döner.


C# Örneği
UnityObjects.Data ItemFiche = Global.UnityApp.NewDataObject(UnityObjects.DataObjectType.doMaterial);
ItemFiche.Read(2);
if (!ItemFiche.ExportImage("C:/image/metarial.jpg",2))
  {
    MessageBox.Show(Global.UnityApp.GetLastError()+"-"+ Global.UnityApp.GetLastErrorString());
  }
else
 {
   MessageBox.Show("Resim belirtmiş olduğunuz yere aktarılmıştır.");
 }

ExportToXML
ERP ürününün XML desteğini UnityObject ile kolaylıkla kullanabilirsiniz. XML desteğini uygulamanıza kazandırmak çok kolay olacaktır.Oluşturduğunuz IData nesnesinin ExportToXML metodu yardımıyla iki parametre geçilerek istediğiniz kayıdı XML formatında belirteceğiniz path ve isimle export edecektir.
Rootkey parametresine Export etmek istediğiniz kaydın xml şablon ismi geçilmelidir. FileName parametresine ise export edilecek kaydın yolu ve ismi birlikte geçilir.ExportToXML metodunu Post methodundan önce kullanmamız gerektiğini unutmamak gereklidir. Post methosundan sonra satır nesneleri boşaltıldığından ExportToXML düzgün bir çıktı vermeyecektir.Bu methodu yeni bir kayıt oluşturduğumuzda Post methodunu çalıştırmadan kullanmalıyız.


Parametre	Type	Açıklama
Rootkey	String	Data tipine ait olan XML şablonunun ismi. Verilen RootKey oluşturacağımız veya içeri alacağımız (Export/Import) xml dosyasının hangi şablon yapısında olduğu bilgisidir.
Bir şablonun rootkey bilgisini oluşturacağımız şablon tipinde bir kaydı ERP ürünü içerisinden almak ve bu kaydı export ederek ERP ürününün oluşturduğu xml şablonundaki rootkey kullanılabilir.
FileName  	String	Export edilecek dosyanın yolu ve ismi.
Return Type	Açıklama
Boolean  	Export işlemi başarıyla yapılırsa TRUE, diğer durumlarda FALSE değeri döner.


C# Örneği
UnityObjects.Data Discount =UnityApp.NewDataObject(UnityObjects.DataObjectType.doSalesDispatch); 
Discount.Read(12);
Discount.ExportToXML("SALES_DISPATCHES", "C:/IRS01.xml");
if (Discount.Post() == true)
  {
   MessageBox.Show("Başarılı");
  }
else
  {
   if (Discount.ValidateErrors.Count > 0)
     {
        for (int i = 0; i < Discount.ValidateErrors.Count - 1; i++)
           {
              MessageBox.Show("XML Error:(" + Discount.ValidateErrors.ToString() + ") -" + Discount.ValidateErrors.ToString());
           }
     }
  }


ExportToXMLStr
Data nesnesinin içerisindeki veriyi bize string olarak veren metodh dur.


Parametre	Type	Açıklama
Rootkey	String	Data tipine ait olan XML şablonunun ismi. Verilen RootKey Oluşturacağımız veya içeri alacağımız (Export/Import) xml dosyasının hangi şablon yapısında olduğu bilgisidir. Bir şablonun rootkey bilgisini oluşturacağımız şablon tipinde bir kaydı ERP ürünü içerisinden almak ve bu kaydı export ederek ERP ürününün oluşturduğu xml şablonundaki rootkey kullanılabilir. 
XmlStr	String	string olarak dönen veriyi bi değişkene atamamızı sağlıyor.
Return Type	Açıklama
Boolean	Export işlemi başarıyla yapılırsa TRUE, diğer durumlarda FALSE değeri döner.
 
 
C# Örneği
UnityObjects.Data Discount =UnityApp.NewDataObject(UnityObjects.DataObjectType.doSalesDispatch); 
Discount.Read(12);
string domates;
Discount.ExportToXMLStr("SALES_DISPATCHES", domates);
if (Discount.Read(12))
  {
   MessageBox.Show("Başarılı");
  }
else
  {
   if (Discount.ValidateErrors.Count > 0)
     {
        for (int i = 0; i < Discount.ValidateErrors.Count - 1; i++)
           {
              MessageBox.Show("XML Error:(" + Discount.ValidateErrors.ToString() + ") -" + Discount.ValidateErrors.ToString());
           }
     }
  }
ExtensionField
Ek tablonun tek bir alanı için tüm özellikleri listeler. Alan ile ilgili tüm bilgilere bu nesne yardımıyla yaparız.
 
Data Properties	Type	Açıklama
FieldName	String	Alanın ismini döner.
FieldType	FiledTypes	Index ve tablolar /Enumerated types/ FieldType bölümünde verilen tabloda filed tipine denk düşen numara döner.
Index	Long	Kolonun index’idir. Index (Sıra) numarasıdır. 0'dan başlar. Atanabilen bir alan değildir. CollectionItem Index'ini döner. Kayıtlara ulaşırken Index numaralarını kullanmak hızlı olmasına karşın önerilmez.
Parent	Unknown	ICollectionItem’dan inherit edilmiş bir property’dir. IExtensionFields türünden bir nesne bilgisi tutar. Read veya Write işlemi yapılamaz. Unity Object bu özelliği iç işleyişinde kullanır.
Value	Variant	Alanın içerdiği veri döner.
 
 
C# Örneği
UnityObjects.Data ARP = UnityApp.NewDataObject(UnityObjects.DataObjectType.doAccountsRP);
ARP.Read(2);
           if (ARP.HasDataExtensions)
           {
               UnityObjects.DataExtensions ARPExt = ARP.DataExtensions;
               ARPExt[0].Fields.FieldByName("EK_STR").Value = "Ek bilgi...";
           }
           if (ARP.Post())
           {
              MessageBox.Show("Post Ok");
           }
           else
            { 
              MessageBox.Show(UnityApp.GetLastError().ToString() + ":" + UnityApp.GetLastErrorString().ToString());
            }


ExtensionFields
Üzerinde işlem yaptığımız ek tablonun tüm alanları bu nesnede tanımlıdır. IDataExtension nesnesi Collection nesnesinden inherited edildiği için items metoduyla bağlı olan CollectionItem'lara ulaşılır. CollectionItem'lar ek tablomuzun alanlarıdır ve  IDataExtension tipinde tanımlanmışlardır.


 
Methods	Type	Açıklama
Clear	Yok	ICollection'dan inherit edilmiş bir method'dur. Kullanılmamalıdır.
Delete(Index)	Boolean	Index parametresi olan bir metotdur. Ek tablo kolonlarından (ExtensionField) isteneni siler. ExtensionField birer CollectionItem olarak tanımlı olduklarından silmek istediğimiz ExtensionField'ının CollectionItem index'ini bu metoda parametre olarak geçerek silmek istediğimiz ExtensionField'ı sileriz. Silme işlemini check etmek için IData nesnesinin ErrorCode metodunu kullanabiliriz. İşlemler bellekte yapılmaktadır, veri tabanına yansımaz.
FieldByName	IExtensionField	IExtensionFields collection’ında mevcut olan fieldlara isimleriyle ulaşmak için kullanılır.
Data Properties	Type	Açıklama
Count	Long	IExtensionFields listesindeki eleman sayısını döner.
Item(Index)	IExtensionField	IExtensionFields Collection’ında mevcut olan fieldlara Index numaraları ile ulaşmak için kullanılır.
Parent	Unknown	ICollection’dan inherit edilmiş bir property’dir. IDataExtension türünden bir nesne bilgisi tutar. Read veya Write işlemi yapılamaz. Unity Object bu özelliği iç işleyişinde kullanır.


 
C# Örneği
UnityObjects.Data ARP = UnityApp.NewDataObject(UnityObjects.DataObjectType.doAccountsRP);
ARP.Read(2);
           if (ARP.HasDataExtensions)
           {
              UnityObjects.DataExtensions ARPExt = ARP.DataExtensions;
              ARPExt[0].Fields.FieldByName("EK_STR").Value = "Ek bilgi...";
           }
           if (ARP.Post())
           {
              MessageBox.Show("Post Ok");
           }
           else
            { 
              MessageBox.Show(UnityApp.GetLastError().ToString() + ":" + UnityApp.GetLastErrorString().ToString());
            }

FillAccCodes
Muh.Kod.Genel Uygula  seçeneğinde yer alan sadece boş kodlar menü seçeneği ile yapılan atanmamış muhasebe kodlarına muhasebe kodu atama işlemini yapan metod dur. Bu method'u post methodundan önce kullanmak gerekir.Paremetresi yoktur.Bu method Data New işlemlerinde çalışmamakta,sadece READ POST esnasında kullanılabilmektedir. 


Return Type	Açıklama
Boolean	Sadece TRUE veya FALSE, işlemin gerçekleşme durumunu dönen bir geri dönüş değeri vardır.
 UnityObjects.Data invoice = Global.UnityApp.NewDataObject(UnityObjects.DataObjectType.doSalesInvoice);
 invoice.New();
 invoice.DataFields.FieldByName("TYPE").Value = 7;
 invoice.DataFields.FieldByName("NUMBER").Value = "~";
 invoice.DataFields.FieldByName("DATE").Value = "01.07.2015";
 invoice.DataFields.FieldByName("TIME").Value = 19937115;
 invoice.DataFields.FieldByName("ARP_CODE").Value = "CRH01";
 invoice.DataFields.FieldByName("POST_FLAGS").Value = 247;
 invoice.DataFields.FieldByName("VAT_RATE").Value = 18;
 invoice.DataFields.FieldByName("VAT_INCLUDED_GRS").Value = 1;
 invoice.DataFields.FieldByName("CREATED_BY").Value = 1;
 invoice.DataFields.FieldByName("CURRSEL_TOTALS").Value = 1;
 UnityObjects.Lines transactions_lines = invoice.DataFields.FieldByName("TRANSACTIONS").Lines;
 transactions_lines.AppendLine();
 transactions_lines[transactions_lines.Count - 1].FieldByName("TYPE").Value = 0;
 transactions_lines[transactions_lines.Count - 1].FieldByName("MASTER_CODE").Value = "ETICARI01";
 transactions_lines[transactions_lines.Count - 1].FieldByName("QUANTITY").Value = 12;
 transactions_lines[transactions_lines.Count - 1].FieldByName("PRICE").Value = 365;
 transactions_lines[transactions_lines.Count - 1].FieldByName("UNIT_CODE").Value = "ADET";
 transactions_lines[transactions_lines.Count - 1].FieldByName("UNIT_CONV1").Value = 1;
 transactions_lines[transactions_lines.Count - 1].FieldByName("UNIT_CONV2").Value = 1;
 transactions_lines[transactions_lines.Count - 1].FieldByName("VAT_INCLUDED").Value = 1;
 transactions_lines[transactions_lines.Count - 1].FieldByName("VAT_RATE").Value = 18;
 transactions_lines[transactions_lines.Count - 1].FieldByName("EDT_CURR").Value = 1;
 transactions_lines[transactions_lines.Count - 1].FieldByName("MONTH").Value = 7;
 transactions_lines[transactions_lines.Count - 1].FieldByName("YEAR").Value = 2015;

 invoice.DataFields.FieldByName("DEDUCTIONPART1").Value = 2;
 invoice.DataFields.FieldByName("DEDUCTIONPART2").Value = 3;
 invoice.DataFields.FieldByName("AFFECT_RISK").Value = 0;
 invoice.DataFields.FieldByName("DOC_DATE").Value = "01.07.2015";
 invoice.DataFields.FieldByName("EINVOICE").Value = 1;
 invoice.DataFields.FieldByName("PROFILE_ID").Value = 2;
 invoice.DataFields.FieldByName("EXIMVAT").Value = 0;
 invoice.DataFields.FieldByName("EARCHIVEDETR_INTPAYMENTTYPE").Value = 0;
 invoice.DataFields.FieldByName("EBOOK_DOCDATE").Value = "06.07.2015";
 invoice.DataFields.FieldByName("EBOOK_DOCNR").Value = "1234";
 invoice.DataFields.FieldByName("EBOOK_DOCTYPE").Value = 5;
 invoice.DataFields.FieldByName("EBOOK_PAYTYPE").Value = "COKSECMELI";  
 invoice.DataFields.FieldByName("EBOOK_NOPAY").Value = 1;
 invoice.FillAccCodes();            
 if (invoice.Post() == true)
   {
     MessageBox.Show("POST OK !");
   }
 else
   {
     if (invoice.ErrorCode != 0)
       {
         MessageBox.Show("DBError(" + invoice.ErrorCode.ToString() + ")-" + invoice.ErrorDesc + invoice.DBErrorDesc);
       }
     else if (invoice.ValidateErrors.Count > 0)
       {
         string result = "XML ErrorList:";
         for (int i = 0; i < invoice.ValidateErrors.Count; i++)
            {
              result += "(" + invoice.ValidateErrors[i].ID.ToString() + ") - " + invoice.ValidateErrors[i].Error;
            }
          MessageBox.Show(result);
       }
    }


FormSeriLotLines
ERP ürünün 'de Malzeme Yönetimi parametrelerinde otomatik Lot no ataması FIFO veya LIFO yapıldıgında, fise Lot takibi yapılan bir Malzeme girilirken Lot numarasını otomatik artıyor. Aynı işlemin  LObjects  ile yapılabilmesi için eklenen method.


Parametre	Type	Açıklama
lOMtd 	int	Seri lot atama işleminin FIFO veya LIFO yöntemine göre yapılmasını belirteceğimiz opsiyonel parametredir.
-1 (Öndeğer)           : Programdaki ilgili parametreden (Malzeme Yönetimi Parametreleri / Sarf ve firelerde Lot belirleme yöntemi parametresinden) okur. 
0                : FIFO 
1                : LIFO
Return Type	Açıklama
int	1 değerini aldığında işlem gerçekleşti.
 
 
C# Örneği
UnityObjects.Data slip = UnityApp.NewDataObject(UnityObjects.DataObjectType.doMaterialSlip);
slip.New();
slip.DataFields.FieldByName("GROUP").Value = 3;
slip.DataFields.FieldByName("TYPE").Value = 12;
slip.DataFields.FieldByName("NUMBER").Value = "XXX";
slip.DataFields.FieldByName("DATE").Value = "03.05.2011";
slip.DataFields.FieldByName("TIME").Value = 270610492;
slip.DataFields.FieldByName("CURRSEL_TOTALS").Value = 1;
slip.DataFields.FieldByName("SOURCE_WH").Value = 1;
slip.DataFields.FieldByName("SOURCE_COST_GRP").Value = 1;
slip.DataFields.FieldByName("SOURCE_FACTORY_NR").Value = 1;
slip.DataFields.FieldByName("SOURCE_DIVISION_NR").Value = 1;
UnityObjects.Lines transactionstransaction = slip.DataFields.FieldByName("TRANSACTIONS").Lines;
transactionstransaction.AppendLine();
transactionstransaction[(transactionstransaction.Count - 1)].FieldByName("ITEM_CODE").Value = "SERI01";
transactionstransaction[(transactionstransaction.Count - 1)].FieldByName("LINE_TYPE").Value = 0;
transactionstransaction[(transactionstransaction.Count - 1)].FieldByName("SOURCEINDEX").Value = 1;
transactionstransaction[(transactionstransaction.Count - 1)].FieldByName("SOURCECOSTGRP").Value = 1;
transactionstransaction[(transactionstransaction.Count - 1)].FieldByName("FACTORYNR").Value = 1;
transactionstransaction[(transactionstransaction.Count - 1)].FieldByName("LINE_NUMBER").Value = 1;
transactionstransaction[(transactionstransaction.Count - 1)].FieldByName("QUANTITY").Value = 5;
transactionstransaction[(transactionstransaction.Count - 1)].FieldByName("PRICE").Value = 22;
transactionstransaction[(transactionstransaction.Count - 1)].FieldByName("UNIT_CODE").Value = "ADET";
transactionstransaction[(transactionstransaction.Count - 1)].FieldByName("UNIT_CONV1").Value = 1;
transactionstransaction[(transactionstransaction.Count - 1)].FieldByName("UNIT_CONV2").Value = 1;
transactionstransaction[(transactionstransaction.Count - 1)].FieldByName("EU_VAT_STATUS").Value = 4;
transactionstransaction[(transactionstransaction.Count - 1)].FieldByName("EDT_CURR").Value = 1;
   if (slip.FormSeriLotLines() == 1)
   {
     MessageBox.Show("Formserilotlines ok");
   }
 else 
   {
      MessageBox.Show("Formserilotlines hata");
   }
if (invoice.Post() == true)
  {
     MessageBox.Show("POST OK !");
  }
else
  {
    if (invoice.ErrorCode != 0)
      {
        MessageBox.Show("DBError(" + invoice.ErrorCode.ToString() + ")-" + invoice.ErrorDesc + invoice.DBErrorDesc);
      }
    else if (invoice.ValidateErrors.Count > 0)
      {
         string result = "XML ErrorList:";
         for (int i = 0; i < invoice.ValidateErrors.Count; i++)
            {
              result += "(" + invoice.ValidateErrors[i].ID.ToString() + ") - " + invoice.ValidateErrors[i].Error;
            }
         MessageBox.Show(result);
      }
   }


ImportFromXMLFile
ERP ürününün XML desteğini LObjects ile kolaylıkla kullanabilirsiniz. XML desteğini uygulamanıza kazandırmak çok kolay olacaktır. Oluşturduğunuz IData nesnesinin ImportToXML metodu yardımıyla iki parametre geçilerek belirttiğiniz path'de bulunan XML formatındaki kayıt ERP ürününe INSERT veya UPDATE işlemi gerçekleşecektir.
XML Şablonlarındaki <ITEM DBOP="INS"> veya <ITEM DBOP="UPD"> alanları "INS" (Insert) veya "UPD" (Update) işleminin yapılacağını belirtir. Insert modunda normal kayıt ekleme işlemi yapılacaktır. Update metodunda ise içerde var olan bir kayıt için yapılır kayıt bulunur ve farklı olan alanları düzeltilir.


Parametreler	Type	Açıklama
Rootkey	String	Data tipine ait olan XML şablonunun ismi. Verilen RootKey Oluşturacağımız veya içeri alacağımız (Export/Import) xml dosyasının hangi şablon yapısında olduğu bilgisidir. Bir şablonun rootkey bilgisini oluşturacağımız şablon tipinde bir kaydı unity içerisinden almak ve bu kaydı export ederek unity'nin oluşturduğu xml şablonundaki rootkey kullanılabilir. 
FileName  	String	Import edilecek dosyanın yolu ve ismi.
Return Type	Açıklama
Boolean	Import işleminin başarıyla yapılıp yapılmadığı bilgisini döner.
 
 
 
VB Örneği
   Set ms = UnityApp.NewDataObject(doPurchInvoice)

   If ms.ImportFromXMLFile("PURCHASE_INVOICES", "D:\AlimFaturasi.XML") Then
       MsgBox ("Ok")
   Else
       If ms.ValidateErrors.Count > 0 Then
          For i = 0 To ms.ValidateErrors.Count - 1
              MsgBox ("XML Error : (" + CStr(ms.ValidateErrors.ITEM(i).ID) + ") - " + ms.ValidateErrors.ITEM(i).Error)
          Next i
       End If
   End If
C# Örneği
UnityObjects.Data ms = Global.UnityApp.NewDataObject(UnityObjects.DataObjectType.doPurchInvoice);
  if (ms.ImportFromXMLFile("PURCHASE_INVOICES","D:/AlimFaturasi.XML"))
    {
       MessageBox.Show("ok");
    }
  else
    {
            for (int i = 0; i < ms.ValidateErrors.Count ; i++)
               {
                 MessageBox.Show("XML Error:("+ ms.ValidateErrors.ToString() + ") -" + ms.ValidateErrors.ToString());
               }
         
     }
 
ImportFromXMLStr
String değişkende tutulan veriyi Data nesnesi içerisine aktarmamıza yarıyor.


Parametreler	Type	Açıklama
Rootkey	String	Data tipine ait olan XML şablonunun ismi. Verilen RootKey Oluşturacağımız veya içeri alacağımız (Export/Import) xml dosyasının hangi şablon yapısında olduğu bilgisidir. Bir şablonun rootkey bilgisini oluşturacağımız şablon tipinde bir kaydı unity içerisinden almak ve bu kaydı export ederek unity'nin oluşturduğu xml şablonundaki rootkey kullanılabilir.
XmlStr	String	String olarak dönen veriyi bi değişkene atamamızı sağlıyor.
Return Type	Açıklama
Boolean	Import işleminin başarıyla yapılıp yapılmadığı bilgisini döner.


C# Örneği
UnityObjects.Data ms = Global.UnityApp.NewDataObject(UnityObjects.DataObjectType.doAccountsRP);
   
string xml = ""
             + ""
             + "3"
             + "KOD4"
             + ""
             + ""            
             + "";

 ms.ImportFromXMLStr("PURCHASE_INVOICES",xml);
  if (ms.Post())
    {
      MessageBox.Show("ok");
    }
  else
    {
      if (ms.ValidateErrors.Count > 0)
        {
           for (int i = 0; i < ms.ValidateErrors.Count-1 ; i++)
              {
                 MessageBox.Show("XML Error:("+ ms.ValidateErrors.ToString() + ") -" + ms.ValidateErrors.ToString());
              }
        }
     }


ImportImage
ImportImage fonksiyonu kayıtlı olan malzeme ve cari hesap kartlarına resim eklemek için kullanılır.


Parametre	Type	Açıklama
ImgPath	string	Kaydedilecek resmin yolu ve ismi
Indx	byte	Görselin kaydedileceği alanın index bilgisi

Malzeme kartlarında iki adet görsel alan, cari hesap kartlarında ise bir adet görsel alan bulunur.
Parametreye, görselin hangi alana ekleneceği bilgisi geçilir. 1 veya 2 değerleri atanabilir.
Return Type	Açıklama
Boolean	Fonksiyon başarılı olursa true, başarısız olursa false değeri döndürür.


ImportImage C#
            UnityObjects.Data item = UnityApp.NewDataObject(UnityObjects.DataObjectType.doAccountsRP);
            item.Read(2193);
            item.ImportImage(@"C:\Users\furkan.kaya\Pictures\Tiger3.jpg", 1);
            //item.ImportImage(@"C:\Users\furkan.kaya\Pictures\GO3.jpg", 2);
            if (item.Post() == true)
            {
                MessageBox.Show("POST OK !");
            }
            else
            {
                if (item.ErrorCode != 0)
                {
                    MessageBox.Show("DBError(" + item.ErrorCode.ToString() + ") - " + item.ErrorDesc + item.DBErrorDesc);
                }
                else if (item.ValidateErrors.Count > 0)
                {
                    string result = "XML ErrorList : ";
                    for (int i = 0; i < item.ValidateErrors.Count; i++)
                    {
                        result += "(" + item.ValidateErrors[i].ID.ToString() + ") - " + item.ValidateErrors[i].Error + "\n";
                    }
                    MessageBox.Show(result);
                }
            }
New
IData nesnesinde belirttiğimiz tipte yeni bir kayıt oluşturmak için kullanırız. New metodunu kullanarak tüm veri bufferlarını sıfırlamış oluruz. IDataFields nesnesinin tüm elemanları (Tüm alanlar) sıfırlanmış olur.
Boş olan IDataFields nesnesinin gerekli alanlarını doldurarak kaydımızı oluşturmuş oluruz. Fakat yeni kaydımızın veri tabanına eklenmesi için Post metodunu çalıştırmamız gerekir aksi taktirde nesnedeki veriler veri tabanına yansımıyacak ve nesnemiz empty durumuna düştüğünde bellektende silinecektir.
Yeni bir kayıt eklerken hangi alanların doldurulması gerektiğini en kolay ve güvenilir olarak XML şablonlarından öğrenebiliriz. Bizimde yaptığımız işlem XML şablonlarının gerekli alanlarını IDataFields nesnesinde doldurarak post işlemiyle bu şablonlara veriyi iletmektir. Bu şablonlar eklemek istediğimiz veriye göre değişiklik gösterir. Bizim IData nesnesini yaratırken verdiğimiz tipide bu XML şablonlarından hangisiyle ilişkili olduğunu belirtmek içindir.
Mesela bir cari hesap kartı eklemek istiyorsak en doğru yol LBS Unity programı ile bir cari hesap kartı eklemek ve bunu Araçlar/Veri Aktarımı (dışarı)/Finans/Cari Hesap Kartları bölümünden XML şablonu kullanarak export ettikten sonra bu dosyayı incelemektir. Bu export ettiğimiz dosya bizim XML şablonumuzun yapısını verecektir. Gerekli alanları bu şablon yapısına göre IDataFields nesnesinde doldurup, post işlemiyle ekleme işlemimizi gerçekleştirebiliriz. 


Parametre	Type
Yok	Yok
ReturnType
Yok
 
 
VB Örneği
Dim MFiche As Variant
Dim mLines As Variant
Set MFiche = UnityApp.NewDataObject(doSalesDispatch)
Call MFiche.New
MFiche.DataFields.FieldByName("TYPE").Value = 3
MFiche.DataFields.FieldByName("NUMBER").Value = "~"
MFiche.DataFields.FieldByName("DATE").Value = Date
MFiche.DataFields.FieldByName("ARP_CODE").Value = "C"
MFiche.DataFields.FieldByName("CURRSEL_TOTALS").Value = 1
'MFiche.DataFields.FieldByName("VA_CENTERREF").Value = 9
'MFiche.DataFields.FieldByName("GROUP").Value = 3
Set mLines = MFiche.DataFields.FieldByName("TRANSACTIONS").Lines
mLines.AppendLine
mLines(0).FieldByName("TYPE").Value = 0
mLines(0).FieldByName("MASTER_CODE").Value = "MAL01"
mLines(0).FieldByName("QUANTITY").Value = 1
mLines(0).FieldByName("UNIT_CODE").Value = "ADET"
mLines(0).FieldByName("UNIT_CONV1").Value = 1
mLines(0).FieldByName("UNIT_CONV2").Value = 1
'mLines(0).FieldByName("PRICE").Value = 100000
'mLines(0).FieldByName("VAT_RATE").Value = 18
mLines(0).FieldByName("SOURCE_REFERENCE").Value = 29
'mLines(0).FieldByName("EDT_CURR").Value = 1
    If Not MFiche.Post Then
  If MFiche.ErrorCode  0 Then
      MsgBox "Error code : " + _
             CStr(MFiche.ErrorCode) + _
             Chr(10) + _
             "Err Str : " + _
             MFiche.ErrorDesc
  Else
     If MFiche.ValidateErrors.Count > 0 Then
         For i = 0 To MFiche.ValidateErrors.Count - 1
             MsgBox "Error code : " + _
                    CStr(MFiche.ValidateErrors(i).ID) + _
                    Chr(10) + _
                    "Err Str : " + _
                    MFiche.ValidateErrors(i).Error
         Next i
     End If
  End If
  End If
MFiche = Empty
mLines = Empty
C# Örneği
UnityObjects.Data OrderSlip = Global.UnityApp.NewDataObject(UnityObjects.DataObjectType.doSalesOrderSlip);
OrderSlip.New();
OrderSlip.DataFields.FieldByName("NUMBER").Value = "~";
OrderSlip.DataFields.FieldByName("DATE").Value = "17.05.2010";
OrderSlip.DataFields.FieldByName("TIME").Value = "09:29";
OrderSlip.DataFields.FieldByName("ARP_CODE").Value = "CARI.01";
OrderSlip.DataFields.FieldByName("RC_RATE").Value = 1.5;
OrderSlip.DataFields.FieldByName("TC_RATE").Value = 2;
OrderSlip.DataFields.FieldByName("ORDER_STATUS").Value = 1;
OrderSlip.DataFields.FieldByName("CURRSEL_TOTAL").Value = 1;
OrderSlip.DataFields.FieldByName("CURRSEL_DETAILS").Value = 2;
OrderSlip.DataFields.FieldByName("CURR_TRANSACTIN").Value = 20;
            
UnityObjects.Lines OrderLine = OrderSlip.DataFields.FieldByName("TRANSACTIONS").Lines;
OrderLine.AppendLine();
OrderLine[OrderLine.Count - 1].FieldByName("TYPE").Value = 0;
OrderLine[OrderLine.Count - 1].FieldByName("MASTER_CODE").Value = "MALZEME.01";
OrderLine[OrderLine.Count - 1].FieldByName("QUANTITY").Value = 5;
OrderLine[OrderLine.Count - 1].FieldByName("PRICE").Value = 1000;
OrderLine[OrderLine.Count - 1].FieldByName("VAT_RATE").Value = 18;
OrderLine[OrderLine.Count - 1].FieldByName("UNIT_CODE").Value = "ADET";
OrderLine[OrderLine.Count - 1].FieldByName("UNIT_CONV1").Value = 1;
OrderLine[OrderLine.Count - 1].FieldByName("UNIT_CONV2").Value = 1;
OrderLine[OrderLine.Count - 1].FieldByName("CURR_PRICE").Value = 160;
OrderLine[OrderLine.Count - 1].FieldByName("RC_XRATE").Value = 1.5;
OrderLine[OrderLine.Count - 1].FieldByName("CURR_TRANSACTIN").Value = 20;
OrderLine[OrderLine.Count - 1].FieldByName("EDT_PRICE").Value = 500;
OrderLine[OrderLine.Count - 1].FieldByName("EDT_CURR").Value = 20;
OrderSlip.ApplyCampaign();
OrderSlip.FillAccCodes();
          if (!OrderSlip.Post())
            {
                ErrorControl(OrderSlip);
            }


Post
Buffer'ındaki verileri (IDataFields nesnesi içindeki alanları) veri tabanına Post eder. Ekleme ve değiştirme işlemlerinde Post metodunu kullanmak zorundayız. Nesne Post edilmez ise veri tabanına değişiklikler yansımaz.
Eklenen kaydı ve değişiklikleri veri tabanına aktarmak için Post işlemi yapılmalıdır. Post metodu gerekli kontrollerin hepsini yaparak Unity'de değişiklikleri yapacaktır. Post işlemi başarıyla gerçekleşirse TRUE, diğer durumlarda FALSE döner. Post işlemi FALSE dönerse ValidationErrors veya ErrorCode özelliklerinden oluşan hataları handle edebiliriz.


Parametreleri	Type
Yok	Yok
Return Type	Açıklama
Boolean	Post işlemi başarıyla gerçekleştirilmişse TRUE, diğer durumlarda FALSE değeri döner.
 
 
VB Örneği
Dim Firms As Variant
Dim Firm As Variant
Dim NewFIRMNr As Long
Dim MyCheck As Byte
   
'Get Firm number for New Firm
NewFIRMNr = Val(InputBox("New Firm Number"))
  If NewFIRMNr = 0 Then 'if CANCEL
     Exit Sub
  End If
  
Set Firms = UnityApp.CAPI.Firms 'IFirms Object
Set Firm = Firms.NewFirm 'IFirm Object
Firm.FirmNr = NewFIRMNr
Firm.name = "Firm" & CStr(NewFIRMNr)
Firm.WorkDays(7) = True
  
  If Firm.Post Then
     'Firm added database
     MyCheck = MsgBox("Firma Tabloları Oluşturulsun mu ?", vbYesNo)
     If MyCheck = vbYes Then
        'Firm tables creating
        Firm.CreateTables
     End If
     MsgBox "Firm Nr = " & CStr(Firm.FirmNr) & _
            " Firm name = " & Firm.name & _
            " is added CAPI"
  Else
     'Error Handling
     MsgBox str(UnityApp.GetLastError) & "  " & UnityApp.GetLastErrorString
  End If

'Kill Objects
Firms = Empty
Firm = Empty
C# Örneği
int invoiceRef = 38;
UnityObjects.Data invoice = UnityApp.NewDataObject(UnityObjects.DataObjectType.doSalesInvoice);
  if (invoice.Read(invoiceRef))
    {
    // Okunan faturanın verisini almak               
     MessageBox.Show(invoice.DataFields.FieldByName("NUMBER").Value.ToString());
    // Okunan faturanın ilk satır birim fiyatını değiştirmek
UnityObjects.Lines invoiceLine = invoice.DataFields.FieldByName("TRANSACTIONS").Lines;
invoiceLine[invoiceLine.Count - 1].FieldByName("PRICE").Value = 1000;
// Okunan faturaya yeni bir satır daha eklemek
invoiceLine.AppendLine();
invoiceLine[invoiceLine.Count - 1].FieldByName("TYPE").Value = 0;                   // Satır tipi (0 : Malzeme)
invoiceLine[invoiceLine.Count - 1].FieldByName("SOURCEINDEX").Value = 0;            // Ambar numarası
invoiceLine[invoiceLine.Count - 1].FieldByName("SOURCECOSTGRP").Value = 0;          // Ambar maliyet grubu
invoiceLine[invoiceLine.Count - 1].FieldByName("MASTER_CODE").Value = "MALZEME.01"; // Malzeme Kodu
invoiceLine[invoiceLine.Count - 1].FieldByName("QUANTITY").Value = 1;               // Miktar
invoiceLine[invoiceLine.Count - 1].FieldByName("PRICE").Value = 1000;               // Fiyat
invoiceLine[invoiceLine.Count - 1].FieldByName("CURR_PRICE").Value = 160;           // Para Birimi (CurrID)
invoiceLine[invoiceLine.Count - 1].FieldByName("UNIT_CODE").Value = "ADET";         // Birim
invoiceLine[invoiceLine.Count - 1].FieldByName("VAT_RATE").Value = 8;               // Satır KDV Oranı
invoiceLine[invoiceLine.Count - 1].FieldByName("EDT_CURR").Value = 1;               // Dövizli para türü
// Okunan faturanın 2. satırını silmek
invoiceLine.DeleteLine(1); // index sıfırdan başladığı için 2.satır için 1 indexi kullanılıyor
  if (!invoice.Post())
    {
      ErrorControl(invoice);
    }
   }
  else
    {
      MessageBox.Show("Fatura Okunamadı");
    }


Read
IData nesnesinin veri buffer'ından okuma işlemi yapar. Okuma işlemi başarıyla gerçekleşirse TRUE, diğer durumlarda FALSE döner. Long tipindeki Referance parametresi, okunacak kayıdın logical referans numarasıdır.
Parametrede geçilmesi gereken referans numarası query yardımıyla alınabilir. Okuma işlemi başarıyla gerçekleşmişse IDataFields nesnesi okunan kayıdın alanlarıyla doldurulur. FieldByName, DBFieldName veya Item metodlarıyla bu alanlara ulaşılabilir.
 
Parametreleri	Type	Açıklama
Reference	Long	Okunmak istenen kayıdın Logical referansıdır(LRef).
Return Type	Açıklama
Boolean	Okuma işlemi başarıyla tamamlanırsa TRUE, diğer durumlarda FALSE döner.
 
 
VB Örneği
Dim OrFiche As Variant 'variant
Dim RES As Boolean
Dim OrLines As Variant 'variant
Dim date_
Dim trCode
Dim ficheNo
Dim s
Dim DataField As DataField
Dim ADataFields As DataFields
Dim i
Dim lineCount
Dim CmpLines
    
  Set OrFiche = UnityApp.NewDataObject(doSalesOrderSlip)
  
  OrFiche.Read
  OrFiche.DataFields.DBFieldByName("FICHENO").Value = "~"
  'OrFiche.DataFields.DBFieldByName("TRCODE").Value = 1
  OrFiche.DataFields.DBFieldByName("DATE_").Value = "10.03.2004" 'CDate(Date)
  OrFiche.DataFields.DBFieldByName("STATUS").Value = 1
  OrFiche.DataFields.FieldByName("ARP_CODE").Value = "C"
  
  Set OrLines = OrFiche.DataFields.FieldByName("TRANSACTIONS").Lines
  If OrLines.AppendLine Then
    OrLines(0).FieldByName("TYPE").Value = 0
    OrLines(0).FieldByName("MASTER_CODE").Value = "TM01" 'InputBox("Malzeme kodu giriniz", "AddItemCode", "MALZEME1")
    'OrLines(0).FieldByName("SLIP_TYPE").Value = 2
    OrLines(0).FieldByName("DATE").Value = CDate("10.03.2004")
    OrLines(0).FieldByName("VAT_RATE").Value = 18
    OrLines(0).FieldByName("QUANTITY").Value = CDbl(1)
    OrLines(0).FieldByName("PRICE").Value = CDbl(1000)
    OrLines(0).FieldByName("UNIT_CODE").Value = CStr("ADET")
  End If
  'If OrFiche.ApplyCampaign Then
  '   MsgBox ("ok")
  'Else
  '   MsgBox ("false")
  'End If
   ' Call OrFiche.ExportToXML("d", "c:\satış.xml")
    If OrFiche.Post Then
       MsgBox "OrderFiche Eklendi"
    '   Call OrFiche.ExportToXML("d2", "c:\satış2.xml")
    Else
'*     Error control
          ErrorControl (OrFiche)
    End If
    
OrLines = Empty
OrFiche = Empty
'Dim Query As Variant
'Dim i, MyStr As Variant
'Dim MyEOF As Variant
'
'
'  Set Query = UnityApp.NewQuery
'  Query.Statement = "SELECT * FROM LG_001_01_ORFICHE"
'  If Not Query.OpenDirect Then
'     MsgBox Query.Error
'  End If
'
'  MyStr = "Index - Number " & Chr(10) & "---------------------" & Chr(10)
'  MyEOF = Query.First
'  i = 0
'  Do While MyEOF
'     'Listing All Order Fiche
'     MyStr = MyStr + CStr(i) & "    -    " & CStr(Query.QueryFields.Item(2).Value) & Chr(10)
'     i = i + 1
'     MyEOF = Query.Next
'  Loop
'  MsgBox MyStr
'
'Query = Empty
C# Örneği
int itemRef = 10001;
       UnityObjects.Data Itm =                   Global.UnityApp.NewDataObject(UnityObjects.DataObjectType.doMaterial);
           if (Itm.Read(itemRef))
           {
               MessageBox.Show(Itm.DataFields.FieldByName("CODE").Value.ToString());
               Itm.DataFields.FieldByName("AUXIL_CODE").Value = "NEWSPECODE";
               
               if (!Itm.Post())
               {
                   ErrorControl(Itm);
               }
           }
 
ReCalculate
Alış-Satış İrsaliyelerinde, Faturalarda Post etmeden fiş toplamını hesaplayan ve TOTAL alanlarını okumamızı sağlayan metod dur. Bütün fiş bilgileri set edildikten sonra Post yerine ReCalculate çağırıldığında TOTAL alanları Lobjects tarafından doldurulmaktadır.
(Not : 2.43.00.00 Seti ile birlikte Sipariş fişlerinde de çalışması sağlanmıştır)
 
Parametreleri
Yok
Return Type
Yok
 
 
C# Örneği
UnityObjects.Data Discount = UnityApp.NewDataObject(UnityObjects.DataObjectType.doSalesDispatch);
Discount.New();
Discount.DataFields.FieldByName("NUMBER").Value="IRS01";//IRS02
Discount.DataFields.FieldByName("TYPE").Value=8;
Discount.DataFields.FieldByName("DATE").Value="12.04.2013";
Discount.DataFields.FieldByName("ARP_CODE").Value="CARI.01"; //CARİ HESAP KARTI
UnityObjects.Lines DiscountLine = Discount.DataFields.FieldByName("TRANSACTIONS").Lines;
DiscountLine.AppendLine();
DiscountLine._Item[0].FieldByName("TYPE").Value = 0;
DiscountLine._Item[0].FieldByName("MASTER_CODE").Value = "MALZEME.01"; // MALZEME KARTI
DiscountLine._Item[0].FieldByName("QUANTITY").Value = 5;
DiscountLine._Item[0].FieldByName("PRICE").Value = 1000000;
DiscountLine._Item[0].FieldByName("UNIT_CODE").Value = "MTR";
              
Discount.ReCalculate();
int LRef = Discount.DataFields.FieldByName("TOTAL_NET").Value;
MessageBox.Show(LRef.ToString());


SetDefIntValue
Veri merkezi kullanımında aktarılan verilerin içerisindeki başlık, satır ve detay bilgilerinde veri merkezi numarası yer almaktadır. Bu bilginin set edilebilmesi için tüm bu satır ve bu satırlara bağlı tüm detay satırlarındaki ilgili alanların set edilmesi gerekiyordu.
Kullanımı kolaylaştırmak için aşağıdaki method eklenmiştir. Bu method ile sadece SITE_ID alanı değil numeric tipte olan tüm XML alanlarına ön değer atanabilir.


Parametreleri	Type	Açıklama
fldName	String	Değiştirilmek istenen numerik XML alan ismi. 
fType	Short	1 - Byte    2 - SmallInt     3 - Integer, LongInt 
fSz	Short	 1 (byte için), 2 (smallInt için), 4 (Integer için)
Value	int	 set edilmek istenen numerik değer
Return Type
Yok
 
 
C# Örneği
public static void ErrorControl(UnityObjects.Data doData)
        {
            if (doData.ErrorCode != 0)
            {
                MessageBox.Show(doData.ErrorCode.ToString() + " : "
                    + doData.ErrorDesc.ToString() + "\n"
                    + doData.DBErrorDesc.ToString());
            }
            else
            {
                string txt = "XML Errors \n";
                for (int i = 0; i < doData.ValidateErrors.Count; i++)
                {
                    txt = txt + doData.ValidateErrors[i].ID.ToString() + " : " 
                        + doData.ValidateErrors[i].Error.ToString() + "\n";
                }
                MessageBox.Show(txt);
            }
        }

UnityObjects.Data Itm = UnityApp.NewDataObject(UnityObjects.DataObjectType.doMaterial);
Itm.New();
Itm.DataFields.FieldByName("CARD_TYPE").Value = 1;
Itm.DataFields.FieldByName("CODE").Value = "MALZEME.01";
Itm.DataFields.FieldByName("NAME").Value = "Logo Objects Sample Item";
Itm.DataFields.FieldByName("AUXIL_CODE").Value = "SPECODE";
Itm.DataFields.FieldByName("USEF_PURCHASING").Value = 1;
Itm.DataFields.FieldByName("USEF_SALES").Value = 1;
Itm.DataFields.FieldByName("USEF_MM").Value = 1;
Itm.DataFields.FieldByName("UNITSET_CODE").Value = "05";
Itm.DataFields.FieldByName("SELVAT").Value = 18;
Itm.DataFields.FieldByName("RETURNVAT").Value = 18;
Itm.ReplicMode = True ;
Itm.SetDefIntValue("DATA_SITEID", 2, 2, 333);
         if (!Itm.Post())
         {
             ErrorControl(Itm);
         }


ValidateError
IData nesnesinde çıkan XML hatalarının bilgilerinin tutulduğu nesnedir. Herbir hata tanımı farklı bir IValidateError nesnesi ile tutulur. IValidateErrors nesnesinin Items özelliği ile bu nesnelere ulaşırız. 


Data Properties	Type	Açıklama
Error	WideString	Hatanın açıklamasıdır.
ID	Integer	Hata numarasıdır.



C# Örneği
UnityObjects.Data orderslip = null;
orderslip = UnityApp.NewDataObject(UnityObjects.DataObjectType.doSalesOrderSlip);
if (orderslip.Post() == true)
  {
    MessageBox.Show("POST OK !");
  }
else
  {
    if (orderslip.ErrorCode != 0)
      {
        MessageBox.Show("DBError(" + orderslip.ErrorCode.ToString() + ")-" + orderslip.ErrorDesc + orderslip.DBErrorDesc);
      }
    else if (orderslip.ValidateErrors.Count > 0)
        {
           string result = "XML Error List : " + "\n";
          for (int i = 0; i < orderslip.ValidateErrors.Count; i++)
        {
         result += "(" + orderslip.ValidateErrors[i].ID.ToString() + ") - " + orderslip.ValidateErrors[i].Error + "\n";
        }
       MessageBox.Show(result);
    }
  }


ValidateErrors
ICollection nesnesinden inherited (miras alınmış) bir nesnedir. IData nesnesinde tanımlıdır.  Xml kontrollerinde bir hata oluşması halinde bu nesneyi kullanarak hataları ayıklarız. Count özelliğini kontrol ederek nesnenin dolu olup olmadığı anlaşılabilir. Count > 0 ise nesne dolu yani XML hatası oluşmuş demektir. Eğer hata mevcutsa Items özelliği ile ulaşacağımız hataların ID ve Error bilgileri mevcuttur.


Data Properties	Type	Açıklama
Count	Integer	Hata listesinin eleman sayısını verir.
Item(Index)	IValidateError 
Listedeki bir elemanın bilgilerini tutan listedir. Index 0 dan başlar. Döngülerde Count-1'e kadar döndürülmelidir. Bu listedeki tüm elemanlar IValidateError tipindedir.



C# Örneği
UnityObjects.Data orderslip = null;
UnityObjects.Lines transactionstransaction = null;
orderslip = Global.UnityApp.NewDataObject(UnityObjects.DataObjectType.doSalesOrderSlip);
orderslip.New();
orderslip.DataFields.FieldByName("NUMBER").Value = "~";
orderslip.DataFields.FieldByName("DATE").Value = DateTime.Today;
object MyTime = null;
UnityApp.PackTime(DateTime.Now.Hour, DateTime.Now.Minute, DateTime.Now.Second, ref MyTime);
orderslip.DataFields.FieldByName("TIME").Value = (int)MyTime;
orderslip.DataFields.FieldByName("ARP_CODE").Value = "AAA";
orderslip.DataFields.FieldByName("ORDER_STATUS").Value = 1;
orderslip.DataFields.FieldByName("CURRSEL_TOTAL").Value = 1; orderslip.DataFields.FieldByName("AFFECT_RISK").Value = 1;
transactionstransaction = orderslip.DataFields.FieldByName("TRANSACTIONS").Lines;
transactionstransaction.AppendLine();
transactionstransaction[transactionstransaction.Count - 1].FieldByName("TYPE").Value = 0; transactionstransaction[transactionstransaction.Count - 1].FieldByName("MASTER_CODE").Value = "ITEM01";
transactionstransaction[transactionstransaction.Count - 1].FieldByName("QUANTITY").Value = 1;
transactionstransaction[transactionstransaction.Count - 1].FieldByName("PRICE").Value = 1;
transactionstransaction[transactionstransaction.Count - 1].FieldByName("VAT_RATE").Value = 18;
transactionstransaction[transactionstransaction.Count - 1].FieldByName("UNIT_CODE").Value = "ADET";
transactionstransaction[transactionstransaction.Count - 1].FieldByName("UNIT_CONV1").Value = 1;
transactionstransaction[transactionstransaction.Count - 1].FieldByName("UNIT_CONV2").Value = 1;
transactionstransaction[transactionstransaction.Count - 1].FieldByName("DUE_DATE").Value = DateTime.Today;
transactionstransaction[transactionstransaction.Count - 1].FieldByName("EDT_CURR").Value = 1;
     if (orderslip.Post() == true)
        {
          MessageBox.Show("POST OK !");
        }
      else
       {
        if (orderslip.ErrorCode != 0)
       {
    MessageBox.Show("DBError(" + orderslip.ErrorCode.ToString() + ") - " + orderslip.ErrorDesc + orderslip.DBErrorDesc);
        }
   else if (orderslip.ValidateErrors.Count > 0)
         {
           string result = "XML Error List : " + "\n";
         for (int i = 0; i < orderslip.ValidateErrors.Count; i++)
          {
           result += "(" + orderslip.ValidateErrors[i].ID.ToString() + ") - " + orderslip.ValidateErrors[i].Error + "\n";
          }
           MessageBox.Show(result);
                }
            }


Veri Tabanı Hataları
Hata No	Hata Mesajı
0	Hata yok
1	Tablo tanımsız
2	Hatalı kayıt referansı
3	Hatalı kayıt uzunluğu
4	Veri tabanı kaydı mevcut değil
5	Kayıt silme işlemi başarısız
6	Kaydın detay verileri silinemedi
7	Kaydın detay verileri tablolara yazılamadı
8	Kayıt ekleme işlemi başarısız
9	Kaydın aslına erişilemedi
10	Veritabanı ünitesinde yer yok
11	XML tag hatası
12	Geçersiz tag hatası
13	XML tag’ı sonlandırılmamış
14	Bilinmeyen XML elemanı
15	Geçersiz değer
16	Geçersiz liste
17	Ana belirteç sonlandırılmış
18	Kayıt güncelleme başarısız
19	Ek bilgilerin güncellenmesi başarısız
20	Kullanıcının yetkisi yok.


XML Katmanı Hataları
IData nesnesinin ValidateError metoduyla yakalayabileceğiniz hata kodlarıdır. Bu hatalar verilerin XML katmanındaki şablonlara iletilirken çıkan hatalardır.
 
Hata No
	Hata Mesajı
111	Ülke kodu belirtilmemiş.
112	İl kodu belirtilmemiş.
113	İlçe kodu belirtilmemiş.
114	Posta kodu belirtilmemiş.
115	Semt kodu belirtilmemiş.
116	Serbest bölge kodu belirtilmemiş.
501	~1 kodlu malzeme bulunamadı.
502	~1 kodlu malzeme sınıfı bulunamadı.
503	~1 kodlu birim seti bulunamadı.
504	~1 kodlu hizmet bulunamadı.
505	~1 kodlu promosyon bulunamadı.
506	~1 kodlu indirim bulunamadı.
507	~1 kodlu masraf bulunamadı.
508	~1 kodlu cari hesap bulunamadı.
509	~1 kodlu banka bulunamadı.
510	~1 kodlu banka hesabı bulunamadı.
511	~1 kodlu kasa bulunamadı.
512	~1 kodlu masraf merkezi bulunamadı.
513	~1 kodlu muhasebe hesabı bulunamadı.
514	~1 kodlu ödeme planı bulunamadı.
515	~1 kodlu kalite kontrol karakteristik seti bulunamadı.
517	~1 kodlu iş istasyonu bulunamadı.
518	~1 kodlu sabit kıymet kaydı bulunamadı.
519	~1 satış elemanı bulunamadı.
520	~1 kodlu yerleşim noktası bulunamadı.
521	~1 kodlu seri/lot kaydı bulunamadı.
522	~1 kodlu iş istasyonu özelliği bulunamadı.
523	~1 kodlu iş istasyonu bulunamadı.
524	~1 kodlu iş istasyonu grubu bulunamadı.
525	~1 kodlu çalışan bulunamadı.
526	~1 kodlu çalışan grubu bulunamadı.
527	~1 kodlu iş istasyonu maliyeti bulunamadı.
528	~1 kodlu çalışan maliyeti bulunamadı.
529	~1 kodlu ürün reçetesi bulunamadı.
530	~1 kodlu operasyon bulunamadı.
531	~1 kodlu rota bulunamadı.
532	~1 kodlu üretim sabiti bulunamadı.
533	~1 kodlu vardiya kodu bulunamadı.
534	~1 tarihli kayıt daha önce girilmiş.
536	~1 kodlu malzeme özellik kodu bulunamadı.
537	~1 kodlu malzeme özellik değeri bulunamadı.
538	~1 kodlu malzeme özellik değeri kullanılıyor.
540	~1 kodlu kampanya bulunamadı.
541	~1 kodlu dağıtım aracı kodu bulunamadı.
542	~1 kodlu dağıtım rotası kodu bulunamadı.
543	~1 kodlu dağıtım emri bulunamadı.
544	~1 kodlu sevkiyat adresi bulunamadı.
545	~1 kodlu revizyon bulunamadı.
546	~1 kodlu ek vergi kodu bulunamadı.
547	~1 kodlu üretim emri fiş numarası bulunamadı.
548	~1 kodlu ürün hattı kodu bulunamadı.
549	~1 kodlu proje bulunamadı.
550	~1 kodlu geri ödeme planı bulunamadı.
551	~1 kodlu müşteri bulunamadı.
552	~1 kodlu satış fırsatı bulunamadı.
553	~1 kodlu malzeme alternatifi bulunamadı.
554	~1 nolu sipariş bulunamadı.
555	~1 kodlu sektör bulunamadı.
556	~1 adlı ilgili kişi bulunamadı.
557	~1 adlı dosya bulunamadı.
558	~1 kodlu banka kredisi bulunamadı.
600	~1 kodlu kayıt daha önce girilmiş.
601	~1 kodlu stok yeri bulunamadı.
611	~1 periyodu ile çakışan bir kayıt daha önce girilmiş.
612	~1 kodlu periyot bulunamadı.
32404	~1 numaralı barkod başka malzemede kullanılıyor.
32452	~1 kodlu kredi kartı hesabı bulunamadı.
32467	~1 kodlu banka hesabı yok ya da kredi kartı işlemleri için uygun değil.
701	Seri/Lot giriş malzeme hareketi bulunamadı.
702	Seri/Lot giriş kaydı bulunamadı.
703	Bağlantılı malzeme hareketi bulunamadı (iade/fiyat farkı).
1101	Seri/Lot malzeme giriş hareketi bulunamadı.
1102	Seri/Lot giriş hareketi bulunamadı.
1103	Birim setine ait ~1 kodlu birim bulunamadı.
1104	Malzeme kodu belirtilmemiş.
1105	Malzeme fişi numarası belirtilmemiş.
32402	Son Kullanma Tarihi Geçmiş Malzeme Kullanımı
1106	Sabit kıymet kayıt numarası belirtilmemiş.
1107	Seri/Lot kayıt kodu belirtilmemiş.
1111	Ek vergi kodu belitilmemiş.
1112	Seri/Lot giriş miktarı yetersiz.
1113	Seri/Lot satırındaki miktar ile malzeme hareketi miktarı farklı.
1115	Varyant istisna tanımı bulunamadı.
1116	Hızlı üretim fişinin miktar bilgisi girilmemiş.
1117	Hızlı üretim fişi bağlantısı kurulamadı.
1118	Dağıtım şablonu satırları girilmelidir.
1119	Dağıtım şablonu katsayıları girilmelidir.
1120	Birim seti/birim seçilmeyen malzeme sınıfı için dağıtım şablonu tanımlanamaz.
1121	Dağtım şablonunun birim kodu bağlı olduğu malzeme sınıfına ait değil.
2101	Hizmet kodu belirtilmemiş.
3101	Sipariş numarası belirtilmemiş.
3151	Sipariş satırları daha önce sevkedilmiş.
3152	Miktar, dağıtım emri satırındaki bekleyen miktardan daha fazla olamaz.
4101	Promosyon kodu belirtilmemiş.
4102	Masraf kodu belirtilmemiş.
4103	İndirim kodu belirtilmemiş.
4104	İrsaliye numarası belirtilmemiş.
4105	Fatura numarası belirtilmemiş.
4106	Satış elemanı kodu belirtilmemiş.
4108	Satış rotası kodu belirtilmemiş.
4109	Satış hedefleri kodu belirtilmemiş.
4115	Fatura geneline uygulanan satır türü yanlış.
4116	Kullanılan malzeme seri/lot takipli.
4117	Faturada, irsaliye-dağıtım emri uyumsuzluğu var.
4118	Faturada borç kapatma işlemi yapılmış.
4119	İrsaliye daha önce faturalanmış.
4120	Tevkifat payı paydasından büyük olamaz.
4130	Kampanya kodu belirtilmemiş.
4140	Dağıtım aracı kodu belirtilmemiş.
4141	Dağıtım rotası kodu belirtilmemiş.
4142	Dağıtım emri numarası belirtilmemiş.
4201	Sektör kodu belirtilmemiş.
4202	Müşteri kodu belirtilmemiş.
4203	Aynı bilgilere sahip olan bir kategori kaydı daha var.
4204	Satış fırsatı numarası belirtilmemiş.
4205	Tahmini gerçekleşme tarihi girilmemiş.
4206	Satış faaliyeti daha önce oluşturulmuş.
4207	Satış sözleşmesinin bağlı olduğu satış teklifi bulunamadı.
4208	~1 kodlu cari hesabın fişin ait olduğu müşteri ile bir bağlantısı bulunmamaktadır.
4209	~1 adlı kişinin müşteri ile bağlantısı bulunmamaktadır.
4210	Sözleşmenin bağlı olduğu teklifin durumu onaylandı olmalıdır.
4211	İlgili kişinin adı belirtilmemiş.
4643	E-İş ortamında geçerli tek bir fiyat olabilir.
5101	Cari hesap kodu belirtilmemiş.
5102	Cari hesap fiş numarası belirtilmemiş.
5103	Ödeme planı kodu belirtilmemiş.
5104	Geri ödeme planı bulunamadı.
5105	Uygulanılacak satır bulunamadı.
5106	Geri ödeme planı hareketleri oluşturulamadı.
5107	Satıra daha önce geri ödeme planı uygulanmış.
5108	~1 kodlu cari hesabın türü kullanıma uygun değil.
6101	~1 numaralı çek/senet kaydedilemedi.
6102	Üzerinde işlem yapılan ~1 numaralı çek/senet bulunamadı veya statüsü uygun değil.
6103	Çek/senet bordro numarası belirtilmemiş.
6104	Çek/senet numarası belirtilmemiş.
7101	Banka kodu belirtilmemiş.
7102	Banka hesap kodu belirtilmemiş.
7103	Banka fiş numarası belirtilmemiş.
7104	Kredi kartı geri ödemesinin bağlı olduğu banka fişi bulunamadı.
7105	Banka kredisi kodu belirtilmemiş.
7106	Kredi alınış tarihi belirtilmemiş.
7107	Banka kredi hesabı belirtilmemiş.
7108	Banka ticari hesabı belirtilmemiş.
7109	Faiz oranı ya da faiz tutarı belirtilmemiş.
7110	İlgili banka fişi bulunamadı.
7111	Aynı banka kredi teksidi/geri ödemesi daha önce girilmiş.
9101	Muhasebe kodu belirtilmemiş.
9102	Masraf merkezi kodu belirtilmemiş.
9103	Muhasebe fiş numarası belirtilmemiş.
9104	Tahsis fişi numarası belirtilmemiş.
10101	Kasa kodu belirtilmemiş.
10102	Kasa işlem numarası belirtilmemiş.
201	Tarih mali yıl içerisinde değil.
202	Tarih çalışma günü değil.
14101	İş istasyonu özelliği kodu belirtilmemiş.
14102	İş istasyonu kodu belirtilmemiş.
14103	İş istasyonu grubu kodu belirtilmemiş.
14104	Çalışan kodu belirtilmemiş.
14105	Çalışan grubu kodu belirtilmemiş.
14106	Çalışan maliyeti tarihi belirtilmemiş.
14107	İş istasyonu maliyeti tarihi belirtilmemiş.
14108	Vardiya kodu belirtilmemiş.
15101	Ürün reçetesi kodu belirtilmemiş.
15102	Operasyon kodu belirtilmemiş.
15103	Rota kodu belirtilmemiş.
15104	Üretim sabiti kodu belirtilmemiş.
15111	Reçete satırı ile malzeme arasında birim seti / birim uyumsuzluğu var.
15112	Başlamadı durumundaki İş Emrine Durma işlemi aktarılamaz.
15113	Durma işlemlerinde tarih-zaman çakışması var.
15114	Reçetede revizyonunda ana çıktı tespit edilemedi.
18101	KKK seti kodu belirtilmemiş.
20101	Dolaşım fişi numarası belirtilmemiş.
20102	Dağıtım fişi numarası belirtilmemiş.
20103	Millileştirme fişi numarası belirtilmemiş.
21102	DİİB numarası belirtilmemiş.
22101	Talep fişi numarası belirtilmemiş.
22102	Talep fişi bulunamadı.
32001	Özel kod belirtilmemiş.
32002	Yetki kodu belirtilmemiş.
32003	Teslimat kodu belirtilmemiş.
32004	Grup kodu belirtilmemiş.
32005	Posta kodu belirtilmemiş.
32006	Ödeme planı grup kodu belirtilmemiş.
32101	Stok yeri kodu belirtilmemiş.
32102	~1 numaralı ambar bulunamadı.
32403	Fişin onay tarihi geçmiş.
32401	Standart maliyet periyodu kodu belirtilmemiş.
32405	Fatura tarihi irsaliye tarihinden sonra olmalıdır.
32406	Bölümü kullanma yetkiniz yoktur.
32407	İşyerini kullanma yetkiniz yoktur.
32408	Ambarı kullanma yetkiniz yoktur.
32409	Fatura tarihi belirtilmemiş.
32410	Ambar bulunamadı.
32411	İşyerinin ambarları seçilmelidir.
32412	Fabrikanın ambarları seçilmelidir.
32413	Fabrika bulunamadı.
32414	İşyerinin fabrikaları seçilmelidir.
32415	Fabrikayı kullanma yetkiniz yoktur.
32416	Tutar belirtilmelidir.
32417	Bu fişe ait irsaliyelerin tarihleri onay tarihinden daha önce.
32418	Faturada kanuni faturalama süresini geçmiş irsaliye(ler) var.
32419	Aynı numaralı bir kasa işlemi daha var.
32420	Aynı numaralı bir fatura daha var.
32421	Aynı numaralı kasa işlemini başka bir kullanıcı kaydediyor.
32422	Satıcı kodu girilmelidir.
32423	Fişte muhasebe hesap kodu girilmemiş satır(lar) var.
32424	Fişte masraf merkezi girilmemiş satır(lar) var.
32425	Fişte birim girilmemiş satır(lar) var.
32426	Giriş/çıkış hareketleri ile ilişkilendirilmelidir.
32427	Kontrol işlemi yapılmadı.
32428	Yetersiz sayıda kontrol yapıldı.
32429	Yetersiz miktarda numune kontrol edildi.
32430	Yetersiz sayıda kontrol yapıldı ve yetersiz numune.
32431	Kontrol sonuçları uygun değil.
32432	Kontrol sonuçları uygun değil ve yetersiz sayıda kontrol.
32433	Kontrol sonuçları uygun değil ve yetersiz numune.
32434	Kontrol sonuçları uygun değil, yetersiz sayıda kontrol ve yetersiz numune.
32435	Raporlama döviz kuru girilmelidir.
32436	Cari hesabın riski aşılmıştır.
32437	Kayıt başka bir uygulama tarafından kullanılıyor.
32438	Cari hesap / malzeme uygunsuzluğu bulunmaktadır.
32439	Cari hesap ödeme planı grubuna bağlı ödeme planı seçilmelidir.
32440	Aynı numaralı bir fiş daha var.
32441	İrsaliye bulunamadı.
32442	Fiş içinde dönem kapatma yapılmış malzeme(ler) var.
32443	Öneri durumundaki fişe bağlantı satırı aktarılamaz.
32444	Karşılandı durumundaki fişe bağlantı satırı aktarılamaz.
32445	İptal durumundaki fişe bağlantı satırı aktarılamaz.
32446	Karşılama miktarı,talep satırı kalan miktarından fazla olamaz.
32447	~1 kodlu malzeme asgari stok seviyesinin altındadır.
32448	~1 kodlu  malzeme azami stok seviyesinin üzerindedir.
32449	~1 kodlu malzeme negatif seviyeye düşmüştür.
32450	~1 kodlu malzeme güvenli stok seviyesinin altındadır.
32451	Proje Kodu Belirtilmemiş.
32453	Karşılamaya ait sipariş bulunamadı.
32455	Dağıtım şablonu kodu belirtilmemiş.
32454	Karşılamaya ait ambar transfer fişi bulunamadı.
32456	Hareketin tümü başka işlemleri kapatıyor.
32457	İşlem iptal edilmiş ! ~ ~Borç kapatma işlemi yapılamaz.
32458	Fatura peşin ödenmiş ! ~ ~Borç kapatma işlemi yapılamaz.
32459	Hareketler aynı cariye ait olmalıdır.
32460	İşlem döviz türleri uyuşmuyor.
32461	Başka bir kullanıcı kapatma işlemi yapıyor.
32462	Hareketler birbirinden farklı olmalı
32463	İşlem türü hatalı.
32464	İşlemin tümü kapanmış.
32465	Hareket bulunamadı.
32466	Negatif seviyeye düşen sabit kıymet satırı mevcuttur.
32468	Satır tipi hatalı.
1114	~1 kodlu marka tanımı bulunamadı.
12001	~1 kodlu genel gider bulunamadı.
12002	~1 kodlu Maliyet Yeri bulunamadı.
32469	Seri numarası daha önce kullanılmış.
32470	Döviz türü bulunamadı.
32473	~1 kodlu Bütçe Kartı Bulunamadı
649	~1 kodlu ithalat operasyon fişi bulunamadı.
650	~1 kodlu serbest bölgeye ihracat operasyon fişi bulunamadı.
651	~1 kodlu yabancı ülkeye ihracat operasyon fişi bulunamadı.
652	~1 kodlu ihraç kayıtlı satınalma faturası bulunamadı.
653	~1 kodlu ihraç kayıtlı satış faturası bulunamadı.
21001	Kredi kodu belirtilmemiş.
654	~1 kodlu ihraç kredisi bulunamadı.
700	~1 kodlu ülke bulunamadı.
705	~1 kodlu banka bulunamadı.
706	~1 kodlu banka şubesi bulunamadı.
707	~1 kodlu vergi dairesi bulunamadı.
708	~1 kodlu gümrük bulunamadı.
709	~1 kodlu serbest bölge bulunamadı.
710	~1 kodlu taşıma tipi bulunamadı.
711	~1 kodlu taşıyıcı bulunamadı.
712	~1 kodlu ödeme şekli bulunamadı.
713	~1 kodlu rejim şekli bulunamadı.
32474	Sadece başlamadı ya da durduruldu statüsündeki iş emirleri değiştirilebilir.
32475	İş emri bulunamadı.
32476	Üretim emri bulunamadı.
32477	Sadece başlamadı statüsündeki üretim emirleri değiştirilebilir.
32478	Hedeflenen bitiş tarihi planlanan bitiş tarihinden büyük olamaz.
32479	Fiyat ilişkisi kurulamadı.
31974	Cari hesabın karşılıksız çekleri ve/veya protesto edilmiş senetleri bulunmaktadır.
21146	Malzeme dolaşım fişinin tarih ve saati, izleyen hareketten sonra olamaz.
21147	Malzeme Dolaşım Fişinin tarih & saati, önceki hareketten önce olamaz.
21148	Malzeme dolaşım fişinin tarih ve saati, ilgili ithalat operasyon fişinden önce olamaz.
20306	Hareket miktarı kullanılabilir miktardan fazla olamaz.
9105	İş Akış bağlantısı bulunamadı.
32480	İstenilen nesnenin resim bilgisi yoktur.
32481	Resim kayıt edilemedi.
32482	Resim bulunamadı.
32483	Virman bağlantısı kurulamadı.
32484	Personel Borçlanması bağlantısı kurulamadı.
32485	İrsaliye faturalanmış.
32486	Talep Fişi bağlantısı kurulamadı.
32487	~1 kodlu Ticari İşlem Grubu bulunamadı.
32488	Ödemeli & Ödemesiz siparişlere ait satırlar aynı faturada bulunamaz.
32489	Satınalma teklifi numarası belirtilmemiş.
32490	Satınalma sözleşmesi numarası belirtilmemiş.
32491	Dönem kapatmadan öncesine ait bir fiş girilemez.
32492	Teminat Bordrosu bağlantısı kurulamadı.
32493	Operasyon süresi ve Bitiş Tarihi & Saati uyuşmazlığı var.
32494	Başlamadı konumundaki İş Emrine gerçekleşen kay. kullanımı girilemez.
32495	Planlanan kaynak kullanımı girişinde, iş istasyonu değiştirilemez.
1200	~1 kodlu varyant bulunamadı.
1201	~1 kodlu malzeme özellik seti bulunamadı.
32496	İşlem başlangıç tarihi belirtilmemiş.
32497	Döviz türü değiştirilmeyecek hesaplara sadece aynı döviz ve kur türü olan kayıttan aktarım yapılabilir.
32498	Cari hesap bulunamadı.
32499	Kapatılacak borç kaydı bulunamadı.
6105	Masraf girişi yapılmış olan çek/senet bulunamadı.
5109	Vade farkı faturaları, faturalar ile aktarılamaz.
32500	Bankadan kesilen hizmet faturası geri alınamaz.
32501	Bu hareket başka bir işlemi kapatmıyor.
32502	Ambar yetkisi bulunmamaktadır.
1202	~1 kodlu varyant istisna olduğundan kaydedilemez.
4150	~1 kodlu kriter bulunamadı.
4151	~1 kodlu alt kriter bulunamadı.
4152	Kriter ağırlıkları toplamı 100'e tamamlanmalı.
4153	Ağırlıkları toplamı 100'den farklı olan alt kriter(ler) bulunuyor.
4154	~1 kodlu tedarikçi değerlendirme kriteri daha önce seçilmiş.
4155	~1 kodlu alt kriter daha önce seçilmiş.
4156	Tedarikçi değerlendirme kriteri kodu belirtilmemiş.
4157	Tedarikçi değerlendirme kriter seti kodu belirtilmemiş.
9108	Bağlantılı muhasebe fişi bulunamadı. Bağlantılar koparılmıştır.
32503	İlgili teminat kartı bulunamadı.
32504	Aynı teminat komisyon ödemesi daha önce girilmiş.
4110	İndirim kartı bulunamadı.
15115	İşlem numarası belirtilmemiş.
15116	Revizyon kodu belirtilmemiş.
15117	Yeni revizyon kodu belirtilmemiş.
15118	Bu ürün reçetesine ait aynı kodlu revizyon var.
15119	Tarih belirtilmemiş.
15120	Onaylanmadı durumdaki revizyon ile güncelleme yapılamaz.
4121	Seri/lot kodu bulunamadı.
1122	İlişkili zimmet fişi bulunamadı.
1123	Zimmet fişi numarası belirtilmemiş.
1124	Zimmet fişi miktarı belirtilmemiş.
1125	Kalan sabit kıymet miktarından fazla sayıda giriş yapılmıştır.
1126	Fiş tarihi seri/lot giriş hareketinden önce olamaz.
1127	Yeterli seri/lot giriş hareketi bulunmadı.
5110	~1 numaralı IBAN geçersizdir.
1301	~1 kodlu araç bulunamadı.
715	~1 kodlu kullanıcı bulunamadı.
18102	~1 kodlu KKK nitel değeri bulunamadı.
18103	~1 kodlu KKK satırı bulunamadı.
18104	Asgari değer nominal değerden büyük olamaz.
18105	Azami değer nominal değerden küçük olamaz.
18106	Diğer KKK atama satırları olmadığından kaydedilemez.
32505	Malzeme kodu bulunamadı.
32506	Malzeme birim kodu bulunamadı.
32507	Proje kodu bulunamadı.
32508	Kaynak kullanım kayıtlarında tarih-zaman çakışması var.
716	~1 numaralı işyeri bulunamadı.
3153	Tamamı sevk edilmiş siparişler değiştirilemez.
3154	Sevkedilen miktar sipariş miktarını aşmıştır.
3155	Şablon kodu girilmelidir.
3156	Azami gün asgari günden küçük olamaz.
3157	Gün alanı boş olamaz.
3158	Katsayı sıfırdan büyük olmalı.
3159	Asgari gün ile temin süresi toplamı azami günden fazla olamaz.
3160	Malzeme grup kodu belirtilmemiş.
3161	Malzeme özel kodu belirtilmemiş.
3162	Malzeme yetki kodu belirtilmemiş.
3163	Tedarikçi kodu belirtilmemiş.
3164	Standart tipi aynı ambar için sadece bir defa kullanılabilir.
720	Fişin tip bilgisi girilmelidir.
721	Fiş tip bilgisi fiş modülüne uygun değil.
32509	Fişin durumu uygun değildir.
32510	Fişler aynı tip olmalıdır.
32511	Fişler aynı işyerini kullanmalıdır.
32512	Fişler aynı ambarı kullanmalıdır.
32513	Fişlerdeki ödemeli siparişten oluşmuş değeri aynı olmalıdır.
32514	Fişlerdeki teminat riskini etkiler değeri aynı olmalıdır.
32515	Fişler aynı dağıtım emrine bağlı olmalıdır.
32516	Fişler aynı cari hesabı kullanmalıdır.
18107	Malzemeye atanmış KKK seti bulunamadı.
18108	~1 kodlu KKK satırının değer girişi yapılmamıştır.
3165	Sevk edilen siparişler çıkarılamaz.
32517	İrsaliyede ödemeli siparişten gelen satırlar var.
32518	İrsaliyede değişiklik yapılmalıdır.
32519	İrsaliye parçalama işlemi gerçekleştirilemedi.
4131	Kampanya uygulanamadı.
1128	Kullanım dışı malzemeler bulunuyor.
15121	Formül satırında reçete satırındaki malzeme kullanılmışsa özellik kodu seçilmelidir.
15122	Formül satırında reçete satırından başka malzeme kullanılmışsa satırdaki malzeme kodu seçilmelidir.
1129	Fişte sevk edilmiş seri/lot ve stok yeri bilgisi olan malzeme(ler) var.
3166	Siparişler başka kullanıcı tarafından değiştiriliyor.
3167	Sipariş daha önce aktarılmış.
3168	Sipariş bulunamadı.
3169	Uygun sipariş satırı bulunamadı.
32520	Sevkedilecek emanet satırı bulunamadı.
32521	Yeni miktar daha küçük olmalı.
32522	Toplam miktar kayıtlı miktardan fazla olmamalıdır.
3170	Sipariş miktarı sevkedilen miktardan küçük olamaz.
4160	e-Faturada yalnızca bir adet fiyatlandırma döviz türü olmalıdır.
4161	e-Faturada tüm satırlara birim fiyat girilmelidir.
4162	e-Faturada yalnızca bir adet fiyatlandırma dövizi kuru olmalıdır.
4165	e-Faturada, malzemede seçili ek vergi için Ek Vergi Tanımı’nda “Evrensel Kod” alanı doldurulmalıdır.
4166	e-Faturada, Malzeme Birim Tanımı’nda “Evrensel Kod” alanı doldurulmalıdır.
4122	Bağlantılı giriş/çıkış hareketi ile cari uyumsuzluğu var.
4123	Bağlantılı giriş/çıkış hareketi ile malzeme uyumsuzluğu var.
1204	Varyant kodu bulunamadı.
4124	Aynı belge numarasına ve cariye sahip başka bir fatura daha var.
32523	Arayüz uyarlama tablosu bulunamadı.
1131	Hızlı üretim fişi numarası belirtilmemiş.
32524	Muhasebe hesap kodu bulunamadı.
32525	Masraf merkezi kodu bulunamadı.
1132	Asgari miktar azami miktardan büyük olamaz.
1133	Bazı fabrikalar için planlama reçetesi seçilmiştir. Onlar silinmeden hepsi için seçim yapılamaz.
1134	Bu fabrikanın girilen tarih ve öncelikte planlaması için reçete seçilmiştir.
1135	Bazı fabrikalar için standart maliyet reçetesi seçilmiştir. Onlar silinmeden hepsi için seçim yapılamaz.
1136	Bu fabrikanın standart maliyeti için reçete seçilmiştir.
1137	Sabit kıymet gideri daha önce ilişkilendirilmiş.

